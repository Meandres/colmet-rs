<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="485.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="485.00"> </text><svg id="frames" x="10" width="1180" total_samples="302"><g><title>[libzmq.so.5.2.4] (1 samples, 0.33%)</title><rect x="0.0000%" y="309" width="0.3311%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.33%)</title><rect x="0.0000%" y="293" width="0.3311%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.33%)</title><rect x="0.0000%" y="277" width="0.3311%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.33%)</title><rect x="0.0000%" y="261" width="0.3311%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.33%)</title><rect x="0.0000%" y="245" width="0.3311%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>_dl_runtime_resolve_xsavec (1 samples, 0.33%)</title><rect x="0.0000%" y="229" width="0.3311%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>_dl_fixup (1 samples, 0.33%)</title><rect x="0.0000%" y="213" width="0.3311%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="223.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.33%)</title><rect x="0.0000%" y="197" width="0.3311%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="207.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.33%)</title><rect x="0.0000%" y="181" width="0.3311%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="191.50"></text></g><g><title>exc_page_fault (1 samples, 0.33%)</title><rect x="0.0000%" y="165" width="0.3311%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="175.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.33%)</title><rect x="0.0000%" y="149" width="0.3311%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="159.50"></text></g><g><title>handle_mm_fault (1 samples, 0.33%)</title><rect x="0.0000%" y="133" width="0.3311%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="143.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.33%)</title><rect x="0.0000%" y="117" width="0.3311%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="127.50"></text></g><g><title>__alloc_pages_nodemask (1 samples, 0.33%)</title><rect x="0.0000%" y="101" width="0.3311%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="111.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.33%)</title><rect x="0.0000%" y="85" width="0.3311%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="1"/><text x="0.2500%" y="95.50"></text></g><g><title>prep_new_page (1 samples, 0.33%)</title><rect x="0.0000%" y="69" width="0.3311%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="79.50"></text></g><g><title>kernel_init_free_pages (1 samples, 0.33%)</title><rect x="0.0000%" y="53" width="0.3311%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="1"/><text x="0.2500%" y="63.50"></text></g><g><title>clear_page_erms (1 samples, 0.33%)</title><rect x="0.0000%" y="37" width="0.3311%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="1"/><text x="0.2500%" y="47.50"></text></g><g><title>[libzmq.so.5.2.4] (2 samples, 0.66%)</title><rect x="0.0000%" y="325" width="0.6623%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="2"/><text x="0.2500%" y="335.50"></text></g><g><title>__GI_epoll_ctl (1 samples, 0.33%)</title><rect x="0.3311%" y="309" width="0.3311%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="1"/><text x="0.5811%" y="319.50"></text></g><g><title>syscall_return_via_sysret (1 samples, 0.33%)</title><rect x="0.3311%" y="293" width="0.3311%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="1"/><text x="0.5811%" y="303.50"></text></g><g><title>ZMQbg/IO/0 (3 samples, 0.99%)</title><rect x="0.0000%" y="437" width="0.9934%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="3"/><text x="0.2500%" y="447.50"></text></g><g><title>__GI___clone (3 samples, 0.99%)</title><rect x="0.0000%" y="421" width="0.9934%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="3"/><text x="0.2500%" y="431.50"></text></g><g><title>start_thread (3 samples, 0.99%)</title><rect x="0.0000%" y="405" width="0.9934%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="3"/><text x="0.2500%" y="415.50"></text></g><g><title>[libzmq.so.5.2.4] (3 samples, 0.99%)</title><rect x="0.0000%" y="389" width="0.9934%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="3"/><text x="0.2500%" y="399.50"></text></g><g><title>[libzmq.so.5.2.4] (3 samples, 0.99%)</title><rect x="0.0000%" y="373" width="0.9934%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="3"/><text x="0.2500%" y="383.50"></text></g><g><title>[libzmq.so.5.2.4] (3 samples, 0.99%)</title><rect x="0.0000%" y="357" width="0.9934%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="3"/><text x="0.2500%" y="367.50"></text></g><g><title>[libzmq.so.5.2.4] (3 samples, 0.99%)</title><rect x="0.0000%" y="341" width="0.9934%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="3"/><text x="0.2500%" y="351.50"></text></g><g><title>__GI_getsockopt (1 samples, 0.33%)</title><rect x="0.6623%" y="325" width="0.3311%" height="15" fill="rgb(214,148,48)" fg:x="2" fg:w="1"/><text x="0.9123%" y="335.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.33%)</title><rect x="0.6623%" y="309" width="0.3311%" height="15" fill="rgb(232,36,49)" fg:x="2" fg:w="1"/><text x="0.9123%" y="319.50"></text></g><g><title>do_syscall_64 (1 samples, 0.33%)</title><rect x="0.6623%" y="293" width="0.3311%" height="15" fill="rgb(209,103,24)" fg:x="2" fg:w="1"/><text x="0.9123%" y="303.50"></text></g><g><title>__x64_sys_getsockopt (1 samples, 0.33%)</title><rect x="0.6623%" y="277" width="0.3311%" height="15" fill="rgb(229,88,8)" fg:x="2" fg:w="1"/><text x="0.9123%" y="287.50"></text></g><g><title>__sys_getsockopt (1 samples, 0.33%)</title><rect x="0.6623%" y="261" width="0.3311%" height="15" fill="rgb(213,181,19)" fg:x="2" fg:w="1"/><text x="0.9123%" y="271.50"></text></g><g><title>security_socket_getsockopt (1 samples, 0.33%)</title><rect x="0.6623%" y="245" width="0.3311%" height="15" fill="rgb(254,191,54)" fg:x="2" fg:w="1"/><text x="0.9123%" y="255.50"></text></g><g><title>aa_sk_perm (1 samples, 0.33%)</title><rect x="0.6623%" y="229" width="0.3311%" height="15" fill="rgb(241,83,37)" fg:x="2" fg:w="1"/><text x="0.9123%" y="239.50"></text></g><g><title>ZMQbg/Reaper (1 samples, 0.33%)</title><rect x="0.9934%" y="437" width="0.3311%" height="15" fill="rgb(233,36,39)" fg:x="3" fg:w="1"/><text x="1.2434%" y="447.50"></text></g><g><title>__GI___clone (1 samples, 0.33%)</title><rect x="0.9934%" y="421" width="0.3311%" height="15" fill="rgb(226,3,54)" fg:x="3" fg:w="1"/><text x="1.2434%" y="431.50"></text></g><g><title>start_thread (1 samples, 0.33%)</title><rect x="0.9934%" y="405" width="0.3311%" height="15" fill="rgb(245,192,40)" fg:x="3" fg:w="1"/><text x="1.2434%" y="415.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.33%)</title><rect x="0.9934%" y="389" width="0.3311%" height="15" fill="rgb(238,167,29)" fg:x="3" fg:w="1"/><text x="1.2434%" y="399.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.33%)</title><rect x="0.9934%" y="373" width="0.3311%" height="15" fill="rgb(232,182,51)" fg:x="3" fg:w="1"/><text x="1.2434%" y="383.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.33%)</title><rect x="0.9934%" y="357" width="0.3311%" height="15" fill="rgb(231,60,39)" fg:x="3" fg:w="1"/><text x="1.2434%" y="367.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.33%)</title><rect x="0.9934%" y="341" width="0.3311%" height="15" fill="rgb(208,69,12)" fg:x="3" fg:w="1"/><text x="1.2434%" y="351.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.33%)</title><rect x="0.9934%" y="325" width="0.3311%" height="15" fill="rgb(235,93,37)" fg:x="3" fg:w="1"/><text x="1.2434%" y="335.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.33%)</title><rect x="0.9934%" y="309" width="0.3311%" height="15" fill="rgb(213,116,39)" fg:x="3" fg:w="1"/><text x="1.2434%" y="319.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.33%)</title><rect x="0.9934%" y="293" width="0.3311%" height="15" fill="rgb(222,207,29)" fg:x="3" fg:w="1"/><text x="1.2434%" y="303.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (1 samples, 0.33%)</title><rect x="0.9934%" y="277" width="0.3311%" height="15" fill="rgb(206,96,30)" fg:x="3" fg:w="1"/><text x="1.2434%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.99%)</title><rect x="1.3245%" y="405" width="0.9934%" height="15" fill="rgb(218,138,4)" fg:x="4" fg:w="3"/><text x="1.5745%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.99%)</title><rect x="1.3245%" y="389" width="0.9934%" height="15" fill="rgb(250,191,14)" fg:x="4" fg:w="3"/><text x="1.5745%" y="399.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.33%)</title><rect x="2.3179%" y="405" width="0.3311%" height="15" fill="rgb(239,60,40)" fg:x="7" fg:w="1"/><text x="2.5679%" y="415.50"></text></g><g><title>__GI___nanosleep (1 samples, 0.33%)</title><rect x="2.6490%" y="405" width="0.3311%" height="15" fill="rgb(206,27,48)" fg:x="8" fg:w="1"/><text x="2.8990%" y="415.50"></text></g><g><title>[[heap]] (6 samples, 1.99%)</title><rect x="1.3245%" y="421" width="1.9868%" height="15" fill="rgb(225,35,8)" fg:x="4" fg:w="6"/><text x="1.5745%" y="431.50">[..</text></g><g><title>_int_free (1 samples, 0.33%)</title><rect x="2.9801%" y="405" width="0.3311%" height="15" fill="rgb(250,213,24)" fg:x="9" fg:w="1"/><text x="3.2301%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.66%)</title><rect x="3.3113%" y="405" width="0.6623%" height="15" fill="rgb(247,123,22)" fg:x="10" fg:w="2"/><text x="3.5613%" y="415.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.33%)</title><rect x="3.9735%" y="405" width="0.3311%" height="15" fill="rgb(231,138,38)" fg:x="12" fg:w="1"/><text x="4.2235%" y="415.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.33%)</title><rect x="3.9735%" y="389" width="0.3311%" height="15" fill="rgb(231,145,46)" fg:x="12" fg:w="1"/><text x="4.2235%" y="399.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.33%)</title><rect x="3.9735%" y="373" width="0.3311%" height="15" fill="rgb(251,118,11)" fg:x="12" fg:w="1"/><text x="4.2235%" y="383.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.33%)</title><rect x="3.9735%" y="357" width="0.3311%" height="15" fill="rgb(217,147,25)" fg:x="12" fg:w="1"/><text x="4.2235%" y="367.50"></text></g><g><title>__GI___poll (1 samples, 0.33%)</title><rect x="3.9735%" y="341" width="0.3311%" height="15" fill="rgb(247,81,37)" fg:x="12" fg:w="1"/><text x="4.2235%" y="351.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.33%)</title><rect x="3.9735%" y="325" width="0.3311%" height="15" fill="rgb(209,12,38)" fg:x="12" fg:w="1"/><text x="4.2235%" y="335.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (2 samples, 0.66%)</title><rect x="4.3046%" y="405" width="0.6623%" height="15" fill="rgb(227,1,9)" fg:x="13" fg:w="2"/><text x="4.5546%" y="415.50"></text></g><g><title>[[stack]] (7 samples, 2.32%)</title><rect x="3.3113%" y="421" width="2.3179%" height="15" fill="rgb(248,47,43)" fg:x="10" fg:w="7"/><text x="3.5613%" y="431.50">[..</text></g><g><title>zmq::Error::from_raw (2 samples, 0.66%)</title><rect x="4.9669%" y="405" width="0.6623%" height="15" fill="rgb(221,10,30)" fg:x="15" fg:w="2"/><text x="5.2169%" y="415.50"></text></g><g><title>[libzmq.so.5.2.4] (2 samples, 0.66%)</title><rect x="5.6291%" y="421" width="0.6623%" height="15" fill="rgb(210,229,1)" fg:x="17" fg:w="2"/><text x="5.8791%" y="431.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.33%)</title><rect x="6.2914%" y="405" width="0.3311%" height="15" fill="rgb(222,148,37)" fg:x="19" fg:w="1"/><text x="6.5414%" y="415.50"></text></g><g><title>__GI___clock_nanosleep (3 samples, 0.99%)</title><rect x="6.6225%" y="405" width="0.9934%" height="15" fill="rgb(234,67,33)" fg:x="20" fg:w="3"/><text x="6.8725%" y="415.50"></text></g><g><title>entry_SYSCALL_64 (3 samples, 0.99%)</title><rect x="6.6225%" y="389" width="0.9934%" height="15" fill="rgb(247,98,35)" fg:x="20" fg:w="3"/><text x="6.8725%" y="399.50"></text></g><g><title>__vdso_clock_gettime (2 samples, 0.66%)</title><rect x="7.6159%" y="405" width="0.6623%" height="15" fill="rgb(247,138,52)" fg:x="23" fg:w="2"/><text x="7.8659%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (10 samples, 3.31%)</title><rect x="8.9404%" y="309" width="3.3113%" height="15" fill="rgb(213,79,30)" fg:x="27" fg:w="10"/><text x="9.1904%" y="319.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10 samples, 3.31%)</title><rect x="8.9404%" y="293" width="3.3113%" height="15" fill="rgb(246,177,23)" fg:x="27" fg:w="10"/><text x="9.1904%" y="303.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 3.31%)</title><rect x="8.9404%" y="277" width="3.3113%" height="15" fill="rgb(230,62,27)" fg:x="27" fg:w="10"/><text x="9.1904%" y="287.50">all..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10 samples, 3.31%)</title><rect x="8.9404%" y="261" width="3.3113%" height="15" fill="rgb(216,154,8)" fg:x="27" fg:w="10"/><text x="9.1904%" y="271.50">&lt;al..</text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 3.31%)</title><rect x="8.9404%" y="245" width="3.3113%" height="15" fill="rgb(244,35,45)" fg:x="27" fg:w="10"/><text x="9.1904%" y="255.50">all..</text></g><g><title>alloc::alloc::alloc (10 samples, 3.31%)</title><rect x="8.9404%" y="229" width="3.3113%" height="15" fill="rgb(251,115,12)" fg:x="27" fg:w="10"/><text x="9.1904%" y="239.50">all..</text></g><g><title>__rdl_alloc (10 samples, 3.31%)</title><rect x="8.9404%" y="213" width="3.3113%" height="15" fill="rgb(240,54,50)" fg:x="27" fg:w="10"/><text x="9.1904%" y="223.50">__r..</text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (10 samples, 3.31%)</title><rect x="8.9404%" y="197" width="3.3113%" height="15" fill="rgb(233,84,52)" fg:x="27" fg:w="10"/><text x="9.1904%" y="207.50">std..</text></g><g><title>__GI___libc_malloc (10 samples, 3.31%)</title><rect x="8.9404%" y="181" width="3.3113%" height="15" fill="rgb(207,117,47)" fg:x="27" fg:w="10"/><text x="9.1904%" y="191.50">__G..</text></g><g><title>tcache_get (2 samples, 0.66%)</title><rect x="11.5894%" y="165" width="0.6623%" height="15" fill="rgb(249,43,39)" fg:x="35" fg:w="2"/><text x="11.8394%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (11 samples, 3.64%)</title><rect x="8.9404%" y="389" width="3.6424%" height="15" fill="rgb(209,38,44)" fg:x="27" fg:w="11"/><text x="9.1904%" y="399.50">&lt;all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 3.64%)</title><rect x="8.9404%" y="373" width="3.6424%" height="15" fill="rgb(236,212,23)" fg:x="27" fg:w="11"/><text x="9.1904%" y="383.50">&lt;all..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (11 samples, 3.64%)</title><rect x="8.9404%" y="357" width="3.6424%" height="15" fill="rgb(242,79,21)" fg:x="27" fg:w="11"/><text x="9.1904%" y="367.50">allo..</text></g><g><title>alloc::slice::hack::to_vec (11 samples, 3.64%)</title><rect x="8.9404%" y="341" width="3.6424%" height="15" fill="rgb(211,96,35)" fg:x="27" fg:w="11"/><text x="9.1904%" y="351.50">allo..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (11 samples, 3.64%)</title><rect x="8.9404%" y="325" width="3.6424%" height="15" fill="rgb(253,215,40)" fg:x="27" fg:w="11"/><text x="9.1904%" y="335.50">&lt;T a..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.33%)</title><rect x="12.2517%" y="309" width="0.3311%" height="15" fill="rgb(211,81,21)" fg:x="37" fg:w="1"/><text x="12.5017%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.33%)</title><rect x="12.2517%" y="293" width="0.3311%" height="15" fill="rgb(208,190,38)" fg:x="37" fg:w="1"/><text x="12.5017%" y="303.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.33%)</title><rect x="12.2517%" y="277" width="0.3311%" height="15" fill="rgb(235,213,38)" fg:x="37" fg:w="1"/><text x="12.5017%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.33%)</title><rect x="12.5828%" y="389" width="0.3311%" height="15" fill="rgb(237,122,38)" fg:x="38" fg:w="1"/><text x="12.8328%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;zmq::RawContext&gt; (1 samples, 0.33%)</title><rect x="12.5828%" y="373" width="0.3311%" height="15" fill="rgb(244,218,35)" fg:x="38" fg:w="1"/><text x="12.8328%" y="383.50"></text></g><g><title>&lt;zmq::RawContext as core::ops::drop::Drop&gt;::drop (1 samples, 0.33%)</title><rect x="12.5828%" y="357" width="0.3311%" height="15" fill="rgb(240,68,47)" fg:x="38" fg:w="1"/><text x="12.8328%" y="367.50"></text></g><g><title>zmq::RawContext::term (1 samples, 0.33%)</title><rect x="12.5828%" y="341" width="0.3311%" height="15" fill="rgb(210,16,53)" fg:x="38" fg:w="1"/><text x="12.8328%" y="351.50"></text></g><g><title>zmq_ctx_term (1 samples, 0.33%)</title><rect x="12.5828%" y="325" width="0.3311%" height="15" fill="rgb(235,124,12)" fg:x="38" fg:w="1"/><text x="12.8328%" y="335.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.33%)</title><rect x="12.5828%" y="309" width="0.3311%" height="15" fill="rgb(224,169,11)" fg:x="38" fg:w="1"/><text x="12.8328%" y="319.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.33%)</title><rect x="12.5828%" y="293" width="0.3311%" height="15" fill="rgb(250,166,2)" fg:x="38" fg:w="1"/><text x="12.8328%" y="303.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.33%)</title><rect x="12.5828%" y="277" width="0.3311%" height="15" fill="rgb(242,216,29)" fg:x="38" fg:w="1"/><text x="12.8328%" y="287.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.33%)</title><rect x="12.5828%" y="261" width="0.3311%" height="15" fill="rgb(230,116,27)" fg:x="38" fg:w="1"/><text x="12.8328%" y="271.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.33%)</title><rect x="12.5828%" y="245" width="0.3311%" height="15" fill="rgb(228,99,48)" fg:x="38" fg:w="1"/><text x="12.8328%" y="255.50"></text></g><g><title>__close (1 samples, 0.33%)</title><rect x="12.5828%" y="229" width="0.3311%" height="15" fill="rgb(253,11,6)" fg:x="38" fg:w="1"/><text x="12.8328%" y="239.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.33%)</title><rect x="12.5828%" y="213" width="0.3311%" height="15" fill="rgb(247,143,39)" fg:x="38" fg:w="1"/><text x="12.8328%" y="223.50"></text></g><g><title>do_syscall_64 (1 samples, 0.33%)</title><rect x="12.5828%" y="197" width="0.3311%" height="15" fill="rgb(236,97,10)" fg:x="38" fg:w="1"/><text x="12.8328%" y="207.50"></text></g><g><title>__x64_sys_close (1 samples, 0.33%)</title><rect x="12.5828%" y="181" width="0.3311%" height="15" fill="rgb(233,208,19)" fg:x="38" fg:w="1"/><text x="12.8328%" y="191.50"></text></g><g><title>filp_close (1 samples, 0.33%)</title><rect x="12.5828%" y="165" width="0.3311%" height="15" fill="rgb(216,164,2)" fg:x="38" fg:w="1"/><text x="12.8328%" y="175.50"></text></g><g><title>fput_many (1 samples, 0.33%)</title><rect x="12.5828%" y="149" width="0.3311%" height="15" fill="rgb(220,129,5)" fg:x="38" fg:w="1"/><text x="12.8328%" y="159.50"></text></g><g><title>colmet_node::backends::BackendsManager::get_sleep_time (1 samples, 0.33%)</title><rect x="12.9139%" y="389" width="0.3311%" height="15" fill="rgb(242,17,10)" fg:x="39" fg:w="1"/><text x="13.1639%" y="399.50"></text></g><g><title>colmet_node::backends::BackendsManager::sort_waiting_metrics (1 samples, 0.33%)</title><rect x="12.9139%" y="373" width="0.3311%" height="15" fill="rgb(242,107,0)" fg:x="39" fg:w="1"/><text x="13.1639%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.33%)</title><rect x="13.2450%" y="373" width="0.3311%" height="15" fill="rgb(251,28,31)" fg:x="40" fg:w="1"/><text x="13.4950%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.33%)</title><rect x="13.2450%" y="357" width="0.3311%" height="15" fill="rgb(233,223,10)" fg:x="40" fg:w="1"/><text x="13.4950%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.33%)</title><rect x="13.2450%" y="341" width="0.3311%" height="15" fill="rgb(215,21,27)" fg:x="40" fg:w="1"/><text x="13.4950%" y="351.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.33%)</title><rect x="13.2450%" y="325" width="0.3311%" height="15" fill="rgb(232,23,21)" fg:x="40" fg:w="1"/><text x="13.4950%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.33%)</title><rect x="13.2450%" y="309" width="0.3311%" height="15" fill="rgb(244,5,23)" fg:x="40" fg:w="1"/><text x="13.4950%" y="319.50"></text></g><g><title>_int_free (1 samples, 0.33%)</title><rect x="13.2450%" y="293" width="0.3311%" height="15" fill="rgb(226,81,46)" fg:x="40" fg:w="1"/><text x="13.4950%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.66%)</title><rect x="13.9073%" y="213" width="0.6623%" height="15" fill="rgb(247,70,30)" fg:x="42" fg:w="2"/><text x="14.1573%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.66%)</title><rect x="13.9073%" y="197" width="0.6623%" height="15" fill="rgb(212,68,19)" fg:x="42" fg:w="2"/><text x="14.1573%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.66%)</title><rect x="13.9073%" y="181" width="0.6623%" height="15" fill="rgb(240,187,13)" fg:x="42" fg:w="2"/><text x="14.1573%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.66%)</title><rect x="13.9073%" y="165" width="0.6623%" height="15" fill="rgb(223,113,26)" fg:x="42" fg:w="2"/><text x="14.1573%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.66%)</title><rect x="13.9073%" y="149" width="0.6623%" height="15" fill="rgb(206,192,2)" fg:x="42" fg:w="2"/><text x="14.1573%" y="159.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.66%)</title><rect x="13.9073%" y="133" width="0.6623%" height="15" fill="rgb(241,108,4)" fg:x="42" fg:w="2"/><text x="14.1573%" y="143.50"></text></g><g><title>__rdl_alloc (2 samples, 0.66%)</title><rect x="13.9073%" y="117" width="0.6623%" height="15" fill="rgb(247,173,49)" fg:x="42" fg:w="2"/><text x="14.1573%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.66%)</title><rect x="13.9073%" y="101" width="0.6623%" height="15" fill="rgb(224,114,35)" fg:x="42" fg:w="2"/><text x="14.1573%" y="111.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.66%)</title><rect x="13.9073%" y="85" width="0.6623%" height="15" fill="rgb(245,159,27)" fg:x="42" fg:w="2"/><text x="14.1573%" y="95.50"></text></g><g><title>tcache_get (1 samples, 0.33%)</title><rect x="14.2384%" y="69" width="0.3311%" height="15" fill="rgb(245,172,44)" fg:x="43" fg:w="1"/><text x="14.4884%" y="79.50"></text></g><g><title>&lt;colmet_node::backends::metric::Metric as core::clone::Clone&gt;::clone (5 samples, 1.66%)</title><rect x="13.5762%" y="309" width="1.6556%" height="15" fill="rgb(236,23,11)" fg:x="41" fg:w="5"/><text x="13.8262%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (4 samples, 1.32%)</title><rect x="13.9073%" y="293" width="1.3245%" height="15" fill="rgb(205,117,38)" fg:x="42" fg:w="4"/><text x="14.1573%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 1.32%)</title><rect x="13.9073%" y="277" width="1.3245%" height="15" fill="rgb(237,72,25)" fg:x="42" fg:w="4"/><text x="14.1573%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 1.32%)</title><rect x="13.9073%" y="261" width="1.3245%" height="15" fill="rgb(244,70,9)" fg:x="42" fg:w="4"/><text x="14.1573%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 1.32%)</title><rect x="13.9073%" y="245" width="1.3245%" height="15" fill="rgb(217,125,39)" fg:x="42" fg:w="4"/><text x="14.1573%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 1.32%)</title><rect x="13.9073%" y="229" width="1.3245%" height="15" fill="rgb(235,36,10)" fg:x="42" fg:w="4"/><text x="14.1573%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.66%)</title><rect x="14.5695%" y="213" width="0.6623%" height="15" fill="rgb(251,123,47)" fg:x="44" fg:w="2"/><text x="14.8195%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.66%)</title><rect x="14.5695%" y="197" width="0.6623%" height="15" fill="rgb(221,13,13)" fg:x="44" fg:w="2"/><text x="14.8195%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.66%)</title><rect x="14.5695%" y="181" width="0.6623%" height="15" fill="rgb(238,131,9)" fg:x="44" fg:w="2"/><text x="14.8195%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 1.99%)</title><rect x="13.5762%" y="373" width="1.9868%" height="15" fill="rgb(211,50,8)" fg:x="41" fg:w="6"/><text x="13.8262%" y="383.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 1.99%)</title><rect x="13.5762%" y="357" width="1.9868%" height="15" fill="rgb(245,182,24)" fg:x="41" fg:w="6"/><text x="13.8262%" y="367.50">a..</text></g><g><title>alloc::slice::hack::to_vec (6 samples, 1.99%)</title><rect x="13.5762%" y="341" width="1.9868%" height="15" fill="rgb(242,14,37)" fg:x="41" fg:w="6"/><text x="13.8262%" y="351.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 1.99%)</title><rect x="13.5762%" y="325" width="1.9868%" height="15" fill="rgb(246,228,12)" fg:x="41" fg:w="6"/><text x="13.8262%" y="335.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.33%)</title><rect x="15.2318%" y="309" width="0.3311%" height="15" fill="rgb(213,55,15)" fg:x="46" fg:w="1"/><text x="15.4818%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.33%)</title><rect x="15.2318%" y="293" width="0.3311%" height="15" fill="rgb(209,9,3)" fg:x="46" fg:w="1"/><text x="15.4818%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.33%)</title><rect x="15.2318%" y="277" width="0.3311%" height="15" fill="rgb(230,59,30)" fg:x="46" fg:w="1"/><text x="15.4818%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.33%)</title><rect x="15.2318%" y="261" width="0.3311%" height="15" fill="rgb(209,121,21)" fg:x="46" fg:w="1"/><text x="15.4818%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.33%)</title><rect x="15.2318%" y="245" width="0.3311%" height="15" fill="rgb(220,109,13)" fg:x="46" fg:w="1"/><text x="15.4818%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.33%)</title><rect x="15.2318%" y="229" width="0.3311%" height="15" fill="rgb(232,18,1)" fg:x="46" fg:w="1"/><text x="15.4818%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.33%)</title><rect x="15.2318%" y="213" width="0.3311%" height="15" fill="rgb(215,41,42)" fg:x="46" fg:w="1"/><text x="15.4818%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.33%)</title><rect x="15.2318%" y="197" width="0.3311%" height="15" fill="rgb(224,123,36)" fg:x="46" fg:w="1"/><text x="15.4818%" y="207.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.33%)</title><rect x="15.2318%" y="181" width="0.3311%" height="15" fill="rgb(240,125,3)" fg:x="46" fg:w="1"/><text x="15.4818%" y="191.50"></text></g><g><title>tcache_get (1 samples, 0.33%)</title><rect x="15.2318%" y="165" width="0.3311%" height="15" fill="rgb(205,98,50)" fg:x="46" fg:w="1"/><text x="15.4818%" y="175.50"></text></g><g><title>&lt;colmet_node::backends::METRICS_VERSION as core::ops::deref::Deref&gt;::deref (1 samples, 0.33%)</title><rect x="15.5629%" y="373" width="0.3311%" height="15" fill="rgb(205,185,37)" fg:x="47" fg:w="1"/><text x="15.8129%" y="383.50"></text></g><g><title>&lt;colmet_node::backends::METRICS_VERSION as core::ops::deref::Deref&gt;::deref::__stability (1 samples, 0.33%)</title><rect x="15.5629%" y="357" width="0.3311%" height="15" fill="rgb(238,207,15)" fg:x="47" fg:w="1"/><text x="15.8129%" y="367.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (1 samples, 0.33%)</title><rect x="15.5629%" y="341" width="0.3311%" height="15" fill="rgb(213,199,42)" fg:x="47" fg:w="1"/><text x="15.8129%" y="351.50"></text></g><g><title>&lt;colmet_node::backends::memory::MemoryBackend as colmet_node::backends::Backend&gt;::return_values (1 samples, 0.33%)</title><rect x="15.8940%" y="373" width="0.3311%" height="15" fill="rgb(235,201,11)" fg:x="48" fg:w="1"/><text x="16.1440%" y="383.50"></text></g><g><title>colmet_node::backends::memory::get_metric_values (1 samples, 0.33%)</title><rect x="15.8940%" y="357" width="0.3311%" height="15" fill="rgb(207,46,11)" fg:x="48" fg:w="1"/><text x="16.1440%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.33%)</title><rect x="15.8940%" y="341" width="0.3311%" height="15" fill="rgb(241,35,35)" fg:x="48" fg:w="1"/><text x="16.1440%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.33%)</title><rect x="15.8940%" y="325" width="0.3311%" height="15" fill="rgb(243,32,47)" fg:x="48" fg:w="1"/><text x="16.1440%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.33%)</title><rect x="15.8940%" y="309" width="0.3311%" height="15" fill="rgb(247,202,23)" fg:x="48" fg:w="1"/><text x="16.1440%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.33%)</title><rect x="15.8940%" y="293" width="0.3311%" height="15" fill="rgb(219,102,11)" fg:x="48" fg:w="1"/><text x="16.1440%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.33%)</title><rect x="15.8940%" y="277" width="0.3311%" height="15" fill="rgb(243,110,44)" fg:x="48" fg:w="1"/><text x="16.1440%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.33%)</title><rect x="15.8940%" y="261" width="0.3311%" height="15" fill="rgb(222,74,54)" fg:x="48" fg:w="1"/><text x="16.1440%" y="271.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.33%)</title><rect x="15.8940%" y="245" width="0.3311%" height="15" fill="rgb(216,99,12)" fg:x="48" fg:w="1"/><text x="16.1440%" y="255.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (1 samples, 0.33%)</title><rect x="15.8940%" y="229" width="0.3311%" height="15" fill="rgb(226,22,26)" fg:x="48" fg:w="1"/><text x="16.1440%" y="239.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.33%)</title><rect x="15.8940%" y="213" width="0.3311%" height="15" fill="rgb(217,163,10)" fg:x="48" fg:w="1"/><text x="16.1440%" y="223.50"></text></g><g><title>colmet_node::backends::BackendsManager::get_metrics_to_collect_now (1 samples, 0.33%)</title><rect x="16.2252%" y="373" width="0.3311%" height="15" fill="rgb(213,25,53)" fg:x="49" fg:w="1"/><text x="16.4752%" y="383.50"></text></g><g><title>colmet_node::backends::BackendsManager::make_measure (13 samples, 4.30%)</title><rect x="13.2450%" y="389" width="4.3046%" height="15" fill="rgb(252,105,26)" fg:x="40" fg:w="13"/><text x="13.4950%" y="399.50">colme..</text></g><g><title>core::ptr::drop_in_place&lt;colmet_node::backends::metric::Metric&gt; (3 samples, 0.99%)</title><rect x="16.5563%" y="373" width="0.9934%" height="15" fill="rgb(220,39,43)" fg:x="50" fg:w="3"/><text x="16.8063%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3 samples, 0.99%)</title><rect x="16.5563%" y="357" width="0.9934%" height="15" fill="rgb(229,68,48)" fg:x="50" fg:w="3"/><text x="16.8063%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 0.99%)</title><rect x="16.5563%" y="341" width="0.9934%" height="15" fill="rgb(252,8,32)" fg:x="50" fg:w="3"/><text x="16.8063%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3 samples, 0.99%)</title><rect x="16.5563%" y="325" width="0.9934%" height="15" fill="rgb(223,20,43)" fg:x="50" fg:w="3"/><text x="16.8063%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.99%)</title><rect x="16.5563%" y="309" width="0.9934%" height="15" fill="rgb(229,81,49)" fg:x="50" fg:w="3"/><text x="16.8063%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (3 samples, 0.99%)</title><rect x="16.5563%" y="293" width="0.9934%" height="15" fill="rgb(236,28,36)" fg:x="50" fg:w="3"/><text x="16.8063%" y="303.50"></text></g><g><title>core::time::Duration::from_nanos (2 samples, 0.66%)</title><rect x="17.5497%" y="373" width="0.6623%" height="15" fill="rgb(249,185,26)" fg:x="53" fg:w="2"/><text x="17.7997%" y="383.50"></text></g><g><title>hrtimer_active (1 samples, 0.33%)</title><rect x="26.1589%" y="213" width="0.3311%" height="15" fill="rgb(249,174,33)" fg:x="79" fg:w="1"/><text x="26.4089%" y="223.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.33%)</title><rect x="26.4901%" y="197" width="0.3311%" height="15" fill="rgb(233,201,37)" fg:x="80" fg:w="1"/><text x="26.7401%" y="207.50"></text></g><g><title>clockevents_program_event (7 samples, 2.32%)</title><rect x="26.8212%" y="197" width="2.3179%" height="15" fill="rgb(221,78,26)" fg:x="81" fg:w="7"/><text x="27.0712%" y="207.50">c..</text></g><g><title>lapic_next_deadline (6 samples, 1.99%)</title><rect x="27.1523%" y="181" width="1.9868%" height="15" fill="rgb(250,127,30)" fg:x="82" fg:w="6"/><text x="27.4023%" y="191.50">l..</text></g><g><title>native_write_msr (4 samples, 1.32%)</title><rect x="27.8146%" y="165" width="1.3245%" height="15" fill="rgb(230,49,44)" fg:x="84" fg:w="4"/><text x="28.0646%" y="175.50"></text></g><g><title>enqueue_hrtimer (1 samples, 0.33%)</title><rect x="29.1391%" y="197" width="0.3311%" height="15" fill="rgb(229,67,23)" fg:x="88" fg:w="1"/><text x="29.3891%" y="207.50"></text></g><g><title>timerqueue_add (1 samples, 0.33%)</title><rect x="29.1391%" y="181" width="0.3311%" height="15" fill="rgb(249,83,47)" fg:x="88" fg:w="1"/><text x="29.3891%" y="191.50"></text></g><g><title>rb_insert_color (1 samples, 0.33%)</title><rect x="29.1391%" y="165" width="0.3311%" height="15" fill="rgb(215,43,3)" fg:x="88" fg:w="1"/><text x="29.3891%" y="175.50"></text></g><g><title>get_nohz_timer_target (2 samples, 0.66%)</title><rect x="29.4702%" y="197" width="0.6623%" height="15" fill="rgb(238,154,13)" fg:x="89" fg:w="2"/><text x="29.7202%" y="207.50"></text></g><g><title>hrtimer_start_range_ns (12 samples, 3.97%)</title><rect x="26.4901%" y="213" width="3.9735%" height="15" fill="rgb(219,56,2)" fg:x="80" fg:w="12"/><text x="26.7401%" y="223.50">hrti..</text></g><g><title>ktime_get (1 samples, 0.33%)</title><rect x="30.1325%" y="197" width="0.3311%" height="15" fill="rgb(233,0,4)" fg:x="91" fg:w="1"/><text x="30.3825%" y="207.50"></text></g><g><title>read_tsc (1 samples, 0.33%)</title><rect x="30.1325%" y="181" width="0.3311%" height="15" fill="rgb(235,30,7)" fg:x="91" fg:w="1"/><text x="30.3825%" y="191.50"></text></g><g><title>__perf_event_task_sched_out (4 samples, 1.32%)</title><rect x="33.1126%" y="181" width="1.3245%" height="15" fill="rgb(250,79,13)" fg:x="100" fg:w="4"/><text x="33.3626%" y="191.50"></text></g><g><title>x86_pmu_disable (1 samples, 0.33%)</title><rect x="34.1060%" y="165" width="0.3311%" height="15" fill="rgb(211,146,34)" fg:x="103" fg:w="1"/><text x="34.3560%" y="175.50"></text></g><g><title>__x86_retpoline_rax (1 samples, 0.33%)</title><rect x="34.4371%" y="181" width="0.3311%" height="15" fill="rgb(228,22,38)" fg:x="104" fg:w="1"/><text x="34.6871%" y="191.50"></text></g><g><title>clear_buddies (1 samples, 0.33%)</title><rect x="35.0993%" y="149" width="0.3311%" height="15" fill="rgb(235,168,5)" fg:x="106" fg:w="1"/><text x="35.3493%" y="159.50"></text></g><g><title>update_cfs_group (4 samples, 1.32%)</title><rect x="35.4305%" y="149" width="1.3245%" height="15" fill="rgb(221,155,16)" fg:x="107" fg:w="4"/><text x="35.6805%" y="159.50"></text></g><g><title>cpuacct_charge (6 samples, 1.99%)</title><rect x="37.7483%" y="133" width="1.9868%" height="15" fill="rgb(215,215,53)" fg:x="114" fg:w="6"/><text x="37.9983%" y="143.50">c..</text></g><g><title>update_curr (11 samples, 3.64%)</title><rect x="36.7550%" y="149" width="3.6424%" height="15" fill="rgb(223,4,10)" fg:x="111" fg:w="11"/><text x="37.0050%" y="159.50">upda..</text></g><g><title>update_min_vruntime (2 samples, 0.66%)</title><rect x="39.7351%" y="133" width="0.6623%" height="15" fill="rgb(234,103,6)" fg:x="120" fg:w="2"/><text x="39.9851%" y="143.50"></text></g><g><title>__update_load_avg_cfs_rq (2 samples, 0.66%)</title><rect x="40.7285%" y="133" width="0.6623%" height="15" fill="rgb(227,97,0)" fg:x="123" fg:w="2"/><text x="40.9785%" y="143.50"></text></g><g><title>dequeue_task_fair (21 samples, 6.95%)</title><rect x="34.7682%" y="181" width="6.9536%" height="15" fill="rgb(234,150,53)" fg:x="105" fg:w="21"/><text x="35.0182%" y="191.50">dequeue_t..</text></g><g><title>dequeue_entity (20 samples, 6.62%)</title><rect x="35.0993%" y="165" width="6.6225%" height="15" fill="rgb(228,201,54)" fg:x="106" fg:w="20"/><text x="35.3493%" y="175.50">dequeue_e..</text></g><g><title>update_load_avg (4 samples, 1.32%)</title><rect x="40.3974%" y="149" width="1.3245%" height="15" fill="rgb(222,22,37)" fg:x="122" fg:w="4"/><text x="40.6474%" y="159.50"></text></g><g><title>__update_load_avg_se (1 samples, 0.33%)</title><rect x="41.3907%" y="133" width="0.3311%" height="15" fill="rgb(237,53,32)" fg:x="125" fg:w="1"/><text x="41.6407%" y="143.50"></text></g><g><title>__perf_event_task_sched_in (32 samples, 10.60%)</title><rect x="42.3841%" y="165" width="10.5960%" height="15" fill="rgb(233,25,53)" fg:x="128" fg:w="32"/><text x="42.6341%" y="175.50">__perf_event_ta..</text></g><g><title>__intel_pmu_enable_all.constprop.0 (32 samples, 10.60%)</title><rect x="42.3841%" y="149" width="10.5960%" height="15" fill="rgb(210,40,34)" fg:x="128" fg:w="32"/><text x="42.6341%" y="159.50">__intel_pmu_ena..</text></g><g><title>native_write_msr (32 samples, 10.60%)</title><rect x="42.3841%" y="133" width="10.5960%" height="15" fill="rgb(241,220,44)" fg:x="128" fg:w="32"/><text x="42.6341%" y="143.50">native_write_msr</text></g><g><title>finish_task_switch (35 samples, 11.59%)</title><rect x="41.7219%" y="181" width="11.5894%" height="15" fill="rgb(235,28,35)" fg:x="126" fg:w="35"/><text x="41.9719%" y="191.50">finish_task_switch</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.33%)</title><rect x="52.9801%" y="165" width="0.3311%" height="15" fill="rgb(210,56,17)" fg:x="160" fg:w="1"/><text x="53.2301%" y="175.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.33%)</title><rect x="52.9801%" y="149" width="0.3311%" height="15" fill="rgb(224,130,29)" fg:x="160" fg:w="1"/><text x="53.2301%" y="159.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.33%)</title><rect x="52.9801%" y="133" width="0.3311%" height="15" fill="rgb(235,212,8)" fg:x="160" fg:w="1"/><text x="53.2301%" y="143.50"></text></g><g><title>do_softirq_own_stack (1 samples, 0.33%)</title><rect x="52.9801%" y="117" width="0.3311%" height="15" fill="rgb(223,33,50)" fg:x="160" fg:w="1"/><text x="53.2301%" y="127.50"></text></g><g><title>asm_call_sysvec_on_stack (1 samples, 0.33%)</title><rect x="52.9801%" y="101" width="0.3311%" height="15" fill="rgb(219,149,13)" fg:x="160" fg:w="1"/><text x="53.2301%" y="111.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.33%)</title><rect x="52.9801%" y="85" width="0.3311%" height="15" fill="rgb(250,156,29)" fg:x="160" fg:w="1"/><text x="53.2301%" y="95.50"></text></g><g><title>run_rebalance_domains (1 samples, 0.33%)</title><rect x="52.9801%" y="69" width="0.3311%" height="15" fill="rgb(216,193,19)" fg:x="160" fg:w="1"/><text x="53.2301%" y="79.50"></text></g><g><title>update_blocked_averages (1 samples, 0.33%)</title><rect x="52.9801%" y="53" width="0.3311%" height="15" fill="rgb(216,135,14)" fg:x="160" fg:w="1"/><text x="53.2301%" y="63.50"></text></g><g><title>update_rq_clock (1 samples, 0.33%)</title><rect x="52.9801%" y="37" width="0.3311%" height="15" fill="rgb(241,47,5)" fg:x="160" fg:w="1"/><text x="53.2301%" y="47.50"></text></g><g><title>_raw_spin_lock_irqsave (2 samples, 0.66%)</title><rect x="54.3046%" y="133" width="0.6623%" height="15" fill="rgb(233,42,35)" fg:x="164" fg:w="2"/><text x="54.5546%" y="143.50"></text></g><g><title>idle_cpu (4 samples, 1.32%)</title><rect x="54.9669%" y="133" width="1.3245%" height="15" fill="rgb(231,13,6)" fg:x="166" fg:w="4"/><text x="55.2169%" y="143.50"></text></g><g><title>update_blocked_averages (1 samples, 0.33%)</title><rect x="56.2914%" y="133" width="0.3311%" height="15" fill="rgb(207,181,40)" fg:x="170" fg:w="1"/><text x="56.5414%" y="143.50"></text></g><g><title>_nohz_idle_balance (10 samples, 3.31%)</title><rect x="53.9735%" y="149" width="3.3113%" height="15" fill="rgb(254,173,49)" fg:x="163" fg:w="10"/><text x="54.2235%" y="159.50">_no..</text></g><g><title>update_rq_clock (2 samples, 0.66%)</title><rect x="56.6225%" y="133" width="0.6623%" height="15" fill="rgb(221,1,38)" fg:x="171" fg:w="2"/><text x="56.8725%" y="143.50"></text></g><g><title>pick_next_task_fair (13 samples, 4.30%)</title><rect x="53.3113%" y="181" width="4.3046%" height="15" fill="rgb(206,124,46)" fg:x="161" fg:w="13"/><text x="53.5613%" y="191.50">pick_..</text></g><g><title>newidle_balance (12 samples, 3.97%)</title><rect x="53.6424%" y="165" width="3.9735%" height="15" fill="rgb(249,21,11)" fg:x="162" fg:w="12"/><text x="53.8924%" y="175.50">newi..</text></g><g><title>load_balance (1 samples, 0.33%)</title><rect x="57.2848%" y="149" width="0.3311%" height="15" fill="rgb(222,201,40)" fg:x="173" fg:w="1"/><text x="57.5348%" y="159.50"></text></g><g><title>find_busiest_group (1 samples, 0.33%)</title><rect x="57.2848%" y="133" width="0.3311%" height="15" fill="rgb(235,61,29)" fg:x="173" fg:w="1"/><text x="57.5348%" y="143.50"></text></g><g><title>update_sd_lb_stats.constprop.0 (1 samples, 0.33%)</title><rect x="57.2848%" y="117" width="0.3311%" height="15" fill="rgb(219,207,3)" fg:x="173" fg:w="1"/><text x="57.5348%" y="127.50"></text></g><g><title>update_blocked_averages (1 samples, 0.33%)</title><rect x="57.2848%" y="101" width="0.3311%" height="15" fill="rgb(222,56,46)" fg:x="173" fg:w="1"/><text x="57.5348%" y="111.50"></text></g><g><title>__update_load_avg_cfs_rq (1 samples, 0.33%)</title><rect x="57.2848%" y="85" width="0.3311%" height="15" fill="rgb(239,76,54)" fg:x="173" fg:w="1"/><text x="57.5348%" y="95.50"></text></g><g><title>pick_next_task_idle (3 samples, 0.99%)</title><rect x="57.6159%" y="181" width="0.9934%" height="15" fill="rgb(231,124,27)" fg:x="174" fg:w="3"/><text x="57.8659%" y="191.50"></text></g><g><title>__update_idle_core (3 samples, 0.99%)</title><rect x="57.6159%" y="165" width="0.9934%" height="15" fill="rgb(249,195,6)" fg:x="174" fg:w="3"/><text x="57.8659%" y="175.50"></text></g><g><title>psi_task_change (2 samples, 0.66%)</title><rect x="58.6093%" y="181" width="0.6623%" height="15" fill="rgb(237,174,47)" fg:x="177" fg:w="2"/><text x="58.8593%" y="191.50"></text></g><g><title>psi_group_change (2 samples, 0.66%)</title><rect x="58.6093%" y="165" width="0.6623%" height="15" fill="rgb(206,201,31)" fg:x="177" fg:w="2"/><text x="58.8593%" y="175.50"></text></g><g><title>psi_task_switch (1 samples, 0.33%)</title><rect x="59.2715%" y="181" width="0.3311%" height="15" fill="rgb(231,57,52)" fg:x="179" fg:w="1"/><text x="59.5215%" y="191.50"></text></g><g><title>common_nsleep (117 samples, 38.74%)</title><rect x="23.5099%" y="261" width="38.7417%" height="15" fill="rgb(248,177,22)" fg:x="71" fg:w="117"/><text x="23.7599%" y="271.50">common_nsleep</text></g><g><title>hrtimer_nanosleep (115 samples, 38.08%)</title><rect x="24.1722%" y="245" width="38.0795%" height="15" fill="rgb(215,211,37)" fg:x="73" fg:w="115"/><text x="24.4222%" y="255.50">hrtimer_nanosleep</text></g><g><title>do_nanosleep (115 samples, 38.08%)</title><rect x="24.1722%" y="229" width="38.0795%" height="15" fill="rgb(241,128,51)" fg:x="73" fg:w="115"/><text x="24.4222%" y="239.50">do_nanosleep</text></g><g><title>schedule (96 samples, 31.79%)</title><rect x="30.4636%" y="213" width="31.7881%" height="15" fill="rgb(227,165,31)" fg:x="92" fg:w="96"/><text x="30.7136%" y="223.50">schedule</text></g><g><title>__schedule (93 samples, 30.79%)</title><rect x="31.4570%" y="197" width="30.7947%" height="15" fill="rgb(228,167,24)" fg:x="95" fg:w="93"/><text x="31.7070%" y="207.50">__schedule</text></g><g><title>put_prev_task_fair (8 samples, 2.65%)</title><rect x="59.6026%" y="181" width="2.6490%" height="15" fill="rgb(228,143,12)" fg:x="180" fg:w="8"/><text x="59.8526%" y="191.50">pu..</text></g><g><title>put_prev_entity (5 samples, 1.66%)</title><rect x="60.5960%" y="165" width="1.6556%" height="15" fill="rgb(249,149,8)" fg:x="183" fg:w="5"/><text x="60.8460%" y="175.50"></text></g><g><title>check_cfs_rq_runtime (2 samples, 0.66%)</title><rect x="61.5894%" y="149" width="0.6623%" height="15" fill="rgb(243,35,44)" fg:x="186" fg:w="2"/><text x="61.8394%" y="159.50"></text></g><g><title>do_syscall_64 (125 samples, 41.39%)</title><rect x="21.1921%" y="293" width="41.3907%" height="15" fill="rgb(246,89,9)" fg:x="64" fg:w="125"/><text x="21.4421%" y="303.50">do_syscall_64</text></g><g><title>__x64_sys_clock_nanosleep (123 samples, 40.73%)</title><rect x="21.8543%" y="277" width="40.7285%" height="15" fill="rgb(233,213,13)" fg:x="66" fg:w="123"/><text x="22.1043%" y="287.50">__x64_sys_clock_nanosleep</text></g><g><title>get_timespec64 (1 samples, 0.33%)</title><rect x="62.2517%" y="261" width="0.3311%" height="15" fill="rgb(233,141,41)" fg:x="188" fg:w="1"/><text x="62.5017%" y="271.50"></text></g><g><title>_copy_from_user (1 samples, 0.33%)</title><rect x="62.2517%" y="245" width="0.3311%" height="15" fill="rgb(239,167,4)" fg:x="188" fg:w="1"/><text x="62.5017%" y="255.50"></text></g><g><title>copy_user_generic_unrolled (1 samples, 0.33%)</title><rect x="62.2517%" y="229" width="0.3311%" height="15" fill="rgb(209,217,16)" fg:x="188" fg:w="1"/><text x="62.5017%" y="239.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (134 samples, 44.37%)</title><rect x="20.8609%" y="309" width="44.3709%" height="15" fill="rgb(219,88,35)" fg:x="63" fg:w="134"/><text x="21.1109%" y="319.50">entry_SYSCALL_64_after_hwframe</text></g><g><title>syscall_exit_to_user_mode (8 samples, 2.65%)</title><rect x="62.5828%" y="293" width="2.6490%" height="15" fill="rgb(220,193,23)" fg:x="189" fg:w="8"/><text x="62.8328%" y="303.50">sy..</text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.33%)</title><rect x="64.9007%" y="277" width="0.3311%" height="15" fill="rgb(230,90,52)" fg:x="196" fg:w="1"/><text x="65.1507%" y="287.50"></text></g><g><title>std::thread::sleep (148 samples, 49.01%)</title><rect x="18.2119%" y="373" width="49.0066%" height="15" fill="rgb(252,106,19)" fg:x="55" fg:w="148"/><text x="18.4619%" y="383.50">std::thread::sleep</text></g><g><title>std::sys::unix::thread::Thread::sleep (148 samples, 49.01%)</title><rect x="18.2119%" y="357" width="49.0066%" height="15" fill="rgb(206,74,20)" fg:x="55" fg:w="148"/><text x="18.4619%" y="367.50">std::sys::unix::thread::Thread::sleep</text></g><g><title>__GI___nanosleep (145 samples, 48.01%)</title><rect x="19.2053%" y="341" width="48.0132%" height="15" fill="rgb(230,138,44)" fg:x="58" fg:w="145"/><text x="19.4553%" y="351.50">__GI___nanosleep</text></g><g><title>__GI___clock_nanosleep (145 samples, 48.01%)</title><rect x="19.2053%" y="325" width="48.0132%" height="15" fill="rgb(235,182,43)" fg:x="58" fg:w="145"/><text x="19.4553%" y="335.50">__GI___clock_nanosleep</text></g><g><title>syscall_return_via_sysret (6 samples, 1.99%)</title><rect x="65.2318%" y="309" width="1.9868%" height="15" fill="rgb(242,16,51)" fg:x="197" fg:w="6"/><text x="65.4818%" y="319.50">s..</text></g><g><title>colmet_node::sleep_to_round_timestamp (151 samples, 50.00%)</title><rect x="17.5497%" y="389" width="50.0000%" height="15" fill="rgb(248,9,4)" fg:x="53" fg:w="151"/><text x="17.7997%" y="399.50">colmet_node::sleep_to_round_timestamp</text></g><g><title>std::time::SystemTime::duration_since (1 samples, 0.33%)</title><rect x="67.2185%" y="373" width="0.3311%" height="15" fill="rgb(210,31,22)" fg:x="203" fg:w="1"/><text x="67.4685%" y="383.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (1 samples, 0.33%)</title><rect x="67.2185%" y="357" width="0.3311%" height="15" fill="rgb(239,54,39)" fg:x="203" fg:w="1"/><text x="67.4685%" y="367.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.33%)</title><rect x="67.2185%" y="341" width="0.3311%" height="15" fill="rgb(230,99,41)" fg:x="203" fg:w="1"/><text x="67.4685%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (1 samples, 0.33%)</title><rect x="67.2185%" y="325" width="0.3311%" height="15" fill="rgb(253,106,12)" fg:x="203" fg:w="1"/><text x="67.4685%" y="335.50"></text></g><g><title>core::cmp::PartialOrd::ge (1 samples, 0.33%)</title><rect x="67.2185%" y="309" width="0.3311%" height="15" fill="rgb(213,46,41)" fg:x="203" fg:w="1"/><text x="67.4685%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;zmq::message::Message&gt; (2 samples, 0.66%)</title><rect x="67.5497%" y="373" width="0.6623%" height="15" fill="rgb(215,133,35)" fg:x="204" fg:w="2"/><text x="67.7997%" y="383.50"></text></g><g><title>&lt;zmq::message::Message as core::ops::drop::Drop&gt;::drop (2 samples, 0.66%)</title><rect x="67.5497%" y="357" width="0.6623%" height="15" fill="rgb(213,28,5)" fg:x="204" fg:w="2"/><text x="67.7997%" y="367.50"></text></g><g><title>log::max_level (1 samples, 0.33%)</title><rect x="68.2119%" y="373" width="0.3311%" height="15" fill="rgb(215,77,49)" fg:x="206" fg:w="1"/><text x="68.4619%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.33%)</title><rect x="68.2119%" y="357" width="0.3311%" height="15" fill="rgb(248,100,22)" fg:x="206" fg:w="1"/><text x="68.4619%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.33%)</title><rect x="68.2119%" y="341" width="0.3311%" height="15" fill="rgb(208,67,9)" fg:x="206" fg:w="1"/><text x="68.4619%" y="351.50"></text></g><g><title>zmq::errno_to_error (4 samples, 1.32%)</title><rect x="68.5430%" y="357" width="1.3245%" height="15" fill="rgb(219,133,21)" fg:x="207" fg:w="4"/><text x="68.7930%" y="367.50"></text></g><g><title>zmq::Error::from_raw (3 samples, 0.99%)</title><rect x="68.8742%" y="341" width="0.9934%" height="15" fill="rgb(246,46,29)" fg:x="208" fg:w="3"/><text x="69.1242%" y="351.50"></text></g><g><title>__fget_light (3 samples, 0.99%)</title><rect x="77.8146%" y="197" width="0.9934%" height="15" fill="rgb(246,185,52)" fg:x="235" fg:w="3"/><text x="78.0646%" y="207.50"></text></g><g><title>__fget_files (2 samples, 0.66%)</title><rect x="78.1457%" y="181" width="0.6623%" height="15" fill="rgb(252,136,11)" fg:x="236" fg:w="2"/><text x="78.3957%" y="191.50"></text></g><g><title>__x86_retpoline_rax (1 samples, 0.33%)</title><rect x="78.8079%" y="197" width="0.3311%" height="15" fill="rgb(219,138,53)" fg:x="238" fg:w="1"/><text x="79.0579%" y="207.50"></text></g><g><title>eventfd_poll (3 samples, 0.99%)</title><rect x="79.1391%" y="197" width="0.9934%" height="15" fill="rgb(211,51,23)" fg:x="239" fg:w="3"/><text x="79.3891%" y="207.50"></text></g><g><title>fput_many (1 samples, 0.33%)</title><rect x="80.1325%" y="197" width="0.3311%" height="15" fill="rgb(247,221,28)" fg:x="242" fg:w="1"/><text x="80.3825%" y="207.50"></text></g><g><title>do_syscall_64 (17 samples, 5.63%)</title><rect x="75.1656%" y="245" width="5.6291%" height="15" fill="rgb(251,222,45)" fg:x="227" fg:w="17"/><text x="75.4156%" y="255.50">do_sysc..</text></g><g><title>__x64_sys_poll (16 samples, 5.30%)</title><rect x="75.4967%" y="229" width="5.2980%" height="15" fill="rgb(217,162,53)" fg:x="228" fg:w="16"/><text x="75.7467%" y="239.50">__x64_..</text></g><g><title>do_sys_poll (14 samples, 4.64%)</title><rect x="76.1589%" y="213" width="4.6358%" height="15" fill="rgb(229,93,14)" fg:x="230" fg:w="14"/><text x="76.4089%" y="223.50">do_sy..</text></g><g><title>poll_freewait (1 samples, 0.33%)</title><rect x="80.4636%" y="197" width="0.3311%" height="15" fill="rgb(209,67,49)" fg:x="243" fg:w="1"/><text x="80.7136%" y="207.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (23 samples, 7.62%)</title><rect x="74.8344%" y="261" width="7.6159%" height="15" fill="rgb(213,87,29)" fg:x="226" fg:w="23"/><text x="75.0844%" y="271.50">entry_SYSC..</text></g><g><title>syscall_exit_to_user_mode (5 samples, 1.66%)</title><rect x="80.7947%" y="245" width="1.6556%" height="15" fill="rgb(205,151,52)" fg:x="244" fg:w="5"/><text x="81.0447%" y="255.50"></text></g><g><title>__GI___poll (28 samples, 9.27%)</title><rect x="74.1722%" y="277" width="9.2715%" height="15" fill="rgb(253,215,39)" fg:x="224" fg:w="28"/><text x="74.4222%" y="287.50">__GI___poll</text></g><g><title>syscall_return_via_sysret (3 samples, 0.99%)</title><rect x="82.4503%" y="261" width="0.9934%" height="15" fill="rgb(221,220,41)" fg:x="249" fg:w="3"/><text x="82.7003%" y="271.50"></text></g><g><title>[libzmq.so.5.2.4] (31 samples, 10.26%)</title><rect x="73.5099%" y="309" width="10.2649%" height="15" fill="rgb(218,133,21)" fg:x="222" fg:w="31"/><text x="73.7599%" y="319.50">[libzmq.so.5.2...</text></g><g><title>[libzmq.so.5.2.4] (29 samples, 9.60%)</title><rect x="74.1722%" y="293" width="9.6026%" height="15" fill="rgb(221,193,43)" fg:x="224" fg:w="29"/><text x="74.4222%" y="303.50">[libzmq.so.5.2..</text></g><g><title>__errno_location@plt (1 samples, 0.33%)</title><rect x="83.4437%" y="277" width="0.3311%" height="15" fill="rgb(240,128,52)" fg:x="252" fg:w="1"/><text x="83.6937%" y="287.50"></text></g><g><title>zmq::Socket::recv (49 samples, 16.23%)</title><rect x="68.5430%" y="373" width="16.2252%" height="15" fill="rgb(253,114,12)" fg:x="207" fg:w="49"/><text x="68.7930%" y="383.50">zmq::Socket::recv</text></g><g><title>zmq_msg_recv (45 samples, 14.90%)</title><rect x="69.8675%" y="357" width="14.9007%" height="15" fill="rgb(215,223,47)" fg:x="211" fg:w="45"/><text x="70.1175%" y="367.50">zmq_msg_recv</text></g><g><title>[libzmq.so.5.2.4] (44 samples, 14.57%)</title><rect x="70.1987%" y="341" width="14.5695%" height="15" fill="rgb(248,225,23)" fg:x="212" fg:w="44"/><text x="70.4487%" y="351.50">[libzmq.so.5.2.4]</text></g><g><title>[libzmq.so.5.2.4] (39 samples, 12.91%)</title><rect x="71.8543%" y="325" width="12.9139%" height="15" fill="rgb(250,108,0)" fg:x="217" fg:w="39"/><text x="72.1043%" y="335.50">[libzmq.so.5.2.4]</text></g><g><title>__errno_location (3 samples, 0.99%)</title><rect x="83.7748%" y="309" width="0.9934%" height="15" fill="rgb(228,208,7)" fg:x="253" fg:w="3"/><text x="84.0248%" y="319.50"></text></g><g><title>[libzmq.so.5.2.4] (2 samples, 0.66%)</title><rect x="84.7682%" y="325" width="0.6623%" height="15" fill="rgb(244,45,10)" fg:x="256" fg:w="2"/><text x="85.0182%" y="335.50"></text></g><g><title>colmet_node::zeromq::ZmqSender::receive_config (56 samples, 18.54%)</title><rect x="67.5497%" y="389" width="18.5430%" height="15" fill="rgb(207,125,25)" fg:x="204" fg:w="56"/><text x="67.7997%" y="399.50">colmet_node::zeromq::ZmqSende..</text></g><g><title>zmq::message::Message::new (4 samples, 1.32%)</title><rect x="84.7682%" y="373" width="1.3245%" height="15" fill="rgb(210,195,18)" fg:x="256" fg:w="4"/><text x="85.0182%" y="383.50"></text></g><g><title>zmq::message::Message::alloc (4 samples, 1.32%)</title><rect x="84.7682%" y="357" width="1.3245%" height="15" fill="rgb(249,80,12)" fg:x="256" fg:w="4"/><text x="85.0182%" y="367.50"></text></g><g><title>zmq::message::Message::new::{{closure}} (4 samples, 1.32%)</title><rect x="84.7682%" y="341" width="1.3245%" height="15" fill="rgb(221,65,9)" fg:x="256" fg:w="4"/><text x="85.0182%" y="351.50"></text></g><g><title>zmq_msg_init (2 samples, 0.66%)</title><rect x="85.4305%" y="325" width="0.6623%" height="15" fill="rgb(235,49,36)" fg:x="258" fg:w="2"/><text x="85.6805%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.33%)</title><rect x="86.0927%" y="389" width="0.3311%" height="15" fill="rgb(225,32,20)" fg:x="260" fg:w="1"/><text x="86.3427%" y="399.50"></text></g><g><title>std::time::SystemTime::duration_since (1 samples, 0.33%)</title><rect x="86.7550%" y="373" width="0.3311%" height="15" fill="rgb(215,141,46)" fg:x="262" fg:w="1"/><text x="87.0050%" y="383.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (1 samples, 0.33%)</title><rect x="86.7550%" y="357" width="0.3311%" height="15" fill="rgb(250,160,47)" fg:x="262" fg:w="1"/><text x="87.0050%" y="367.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.33%)</title><rect x="86.7550%" y="341" width="0.3311%" height="15" fill="rgb(216,222,40)" fg:x="262" fg:w="1"/><text x="87.0050%" y="351.50"></text></g><g><title>std::time::SystemTime::elapsed (3 samples, 0.99%)</title><rect x="86.4238%" y="389" width="0.9934%" height="15" fill="rgb(234,217,39)" fg:x="261" fg:w="3"/><text x="86.6738%" y="399.50"></text></g><g><title>std::time::SystemTime::now (1 samples, 0.33%)</title><rect x="87.0861%" y="373" width="0.3311%" height="15" fill="rgb(207,178,40)" fg:x="263" fg:w="1"/><text x="87.3361%" y="383.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (1 samples, 0.33%)</title><rect x="87.0861%" y="357" width="0.3311%" height="15" fill="rgb(221,136,13)" fg:x="263" fg:w="1"/><text x="87.3361%" y="367.50"></text></g><g><title>std::sys::unix::time::inner::now (1 samples, 0.33%)</title><rect x="87.0861%" y="341" width="0.3311%" height="15" fill="rgb(249,199,10)" fg:x="263" fg:w="1"/><text x="87.3361%" y="351.50"></text></g><g><title>colmet_node::main (242 samples, 80.13%)</title><rect x="8.2781%" y="405" width="80.1325%" height="15" fill="rgb(249,222,13)" fg:x="25" fg:w="242"/><text x="8.5281%" y="415.50">colmet_node::main</text></g><g><title>std::time::SystemTime::now (3 samples, 0.99%)</title><rect x="87.4172%" y="389" width="0.9934%" height="15" fill="rgb(244,185,38)" fg:x="264" fg:w="3"/><text x="87.6672%" y="399.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (3 samples, 0.99%)</title><rect x="87.4172%" y="373" width="0.9934%" height="15" fill="rgb(236,202,9)" fg:x="264" fg:w="3"/><text x="87.6672%" y="383.50"></text></g><g><title>std::sys::unix::time::inner::now (3 samples, 0.99%)</title><rect x="87.4172%" y="357" width="0.9934%" height="15" fill="rgb(250,229,37)" fg:x="264" fg:w="3"/><text x="87.6672%" y="367.50"></text></g><g><title>__GI___clock_gettime (3 samples, 0.99%)</title><rect x="87.4172%" y="341" width="0.9934%" height="15" fill="rgb(206,174,23)" fg:x="264" fg:w="3"/><text x="87.6672%" y="351.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.33%)</title><rect x="88.0795%" y="325" width="0.3311%" height="15" fill="rgb(211,33,43)" fg:x="266" fg:w="1"/><text x="88.3295%" y="335.50"></text></g><g><title>zmq_errno (1 samples, 0.33%)</title><rect x="88.4106%" y="405" width="0.3311%" height="15" fill="rgb(245,58,50)" fg:x="267" fg:w="1"/><text x="88.6606%" y="415.50"></text></g><g><title>[unknown] (251 samples, 83.11%)</title><rect x="6.2914%" y="421" width="83.1126%" height="15" fill="rgb(244,68,36)" fg:x="19" fg:w="251"/><text x="6.5414%" y="431.50">[unknown]</text></g><g><title>zmq_msg_recv (2 samples, 0.66%)</title><rect x="88.7417%" y="405" width="0.6623%" height="15" fill="rgb(232,229,15)" fg:x="268" fg:w="2"/><text x="88.9917%" y="415.50"></text></g><g><title>__mmdrop (1 samples, 0.33%)</title><rect x="89.4040%" y="357" width="0.3311%" height="15" fill="rgb(254,30,23)" fg:x="270" fg:w="1"/><text x="89.6540%" y="367.50"></text></g><g><title>pgd_free (1 samples, 0.33%)</title><rect x="89.4040%" y="341" width="0.3311%" height="15" fill="rgb(235,160,14)" fg:x="270" fg:w="1"/><text x="89.6540%" y="351.50"></text></g><g><title>__list_del_entry_valid (1 samples, 0.33%)</title><rect x="89.4040%" y="325" width="0.3311%" height="15" fill="rgb(212,155,44)" fg:x="270" fg:w="1"/><text x="89.6540%" y="335.50"></text></g><g><title>__perf_event_task_sched_in (15 samples, 4.97%)</title><rect x="89.7351%" y="357" width="4.9669%" height="15" fill="rgb(226,2,50)" fg:x="271" fg:w="15"/><text x="89.9851%" y="367.50">__perf..</text></g><g><title>__intel_pmu_enable_all.constprop.0 (15 samples, 4.97%)</title><rect x="89.7351%" y="341" width="4.9669%" height="15" fill="rgb(234,177,6)" fg:x="271" fg:w="15"/><text x="89.9851%" y="351.50">__inte..</text></g><g><title>native_write_msr (15 samples, 4.97%)</title><rect x="89.7351%" y="325" width="4.9669%" height="15" fill="rgb(217,24,9)" fg:x="271" fg:w="15"/><text x="89.9851%" y="335.50">native..</text></g><g><title>ret_from_fork (17 samples, 5.63%)</title><rect x="89.4040%" y="405" width="5.6291%" height="15" fill="rgb(220,13,46)" fg:x="270" fg:w="17"/><text x="89.6540%" y="415.50">ret_fro..</text></g><g><title>schedule_tail (17 samples, 5.63%)</title><rect x="89.4040%" y="389" width="5.6291%" height="15" fill="rgb(239,221,27)" fg:x="270" fg:w="17"/><text x="89.6540%" y="399.50">schedul..</text></g><g><title>finish_task_switch (17 samples, 5.63%)</title><rect x="89.4040%" y="373" width="5.6291%" height="15" fill="rgb(222,198,25)" fg:x="270" fg:w="17"/><text x="89.6540%" y="383.50">finish_..</text></g><g><title>asm_sysvec_call_function_single (1 samples, 0.33%)</title><rect x="94.7020%" y="357" width="0.3311%" height="15" fill="rgb(211,99,13)" fg:x="286" fg:w="1"/><text x="94.9520%" y="367.50"></text></g><g><title>sysvec_call_function_single (1 samples, 0.33%)</title><rect x="94.7020%" y="341" width="0.3311%" height="15" fill="rgb(232,111,31)" fg:x="286" fg:w="1"/><text x="94.9520%" y="351.50"></text></g><g><title>asm_call_sysvec_on_stack (1 samples, 0.33%)</title><rect x="94.7020%" y="325" width="0.3311%" height="15" fill="rgb(245,82,37)" fg:x="286" fg:w="1"/><text x="94.9520%" y="335.50"></text></g><g><title>__sysvec_call_function_single (1 samples, 0.33%)</title><rect x="94.7020%" y="309" width="0.3311%" height="15" fill="rgb(227,149,46)" fg:x="286" fg:w="1"/><text x="94.9520%" y="319.50"></text></g><g><title>flush_smp_call_function_queue (1 samples, 0.33%)</title><rect x="94.7020%" y="293" width="0.3311%" height="15" fill="rgb(218,36,50)" fg:x="286" fg:w="1"/><text x="94.9520%" y="303.50"></text></g><g><title>flush_tlb_func_common.constprop.0 (1 samples, 0.33%)</title><rect x="94.7020%" y="277" width="0.3311%" height="15" fill="rgb(226,80,48)" fg:x="286" fg:w="1"/><text x="94.9520%" y="287.50"></text></g><g><title>__GI___clone (18 samples, 5.96%)</title><rect x="89.4040%" y="421" width="5.9603%" height="15" fill="rgb(238,224,15)" fg:x="270" fg:w="18"/><text x="89.6540%" y="431.50">__GI___c..</text></g><g><title>start_thread (1 samples, 0.33%)</title><rect x="95.0331%" y="405" width="0.3311%" height="15" fill="rgb(241,136,10)" fg:x="287" fg:w="1"/><text x="95.2831%" y="415.50"></text></g><g><title>asm_sysvec_call_function_single (1 samples, 0.33%)</title><rect x="95.0331%" y="389" width="0.3311%" height="15" fill="rgb(208,32,45)" fg:x="287" fg:w="1"/><text x="95.2831%" y="399.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.33%)</title><rect x="95.0331%" y="373" width="0.3311%" height="15" fill="rgb(207,135,9)" fg:x="287" fg:w="1"/><text x="95.2831%" y="383.50"></text></g><g><title>_start (1 samples, 0.33%)</title><rect x="95.3642%" y="421" width="0.3311%" height="15" fill="rgb(206,86,44)" fg:x="288" fg:w="1"/><text x="95.6142%" y="431.50"></text></g><g><title>_dl_start (1 samples, 0.33%)</title><rect x="95.3642%" y="405" width="0.3311%" height="15" fill="rgb(245,177,15)" fg:x="288" fg:w="1"/><text x="95.6142%" y="415.50"></text></g><g><title>_dl_start_final (1 samples, 0.33%)</title><rect x="95.3642%" y="389" width="0.3311%" height="15" fill="rgb(206,64,50)" fg:x="288" fg:w="1"/><text x="95.6142%" y="399.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.33%)</title><rect x="95.3642%" y="373" width="0.3311%" height="15" fill="rgb(234,36,40)" fg:x="288" fg:w="1"/><text x="95.6142%" y="383.50"></text></g><g><title>dl_main (1 samples, 0.33%)</title><rect x="95.3642%" y="357" width="0.3311%" height="15" fill="rgb(213,64,8)" fg:x="288" fg:w="1"/><text x="95.6142%" y="367.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.33%)</title><rect x="95.3642%" y="341" width="0.3311%" height="15" fill="rgb(210,75,36)" fg:x="288" fg:w="1"/><text x="95.6142%" y="351.50"></text></g><g><title>elf_dynamic_do_Rela (1 samples, 0.33%)</title><rect x="95.3642%" y="325" width="0.3311%" height="15" fill="rgb(229,88,21)" fg:x="288" fg:w="1"/><text x="95.6142%" y="335.50"></text></g><g><title>elf_machine_rela (1 samples, 0.33%)</title><rect x="95.3642%" y="309" width="0.3311%" height="15" fill="rgb(252,204,47)" fg:x="288" fg:w="1"/><text x="95.6142%" y="319.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.33%)</title><rect x="95.3642%" y="293" width="0.3311%" height="15" fill="rgb(208,77,27)" fg:x="288" fg:w="1"/><text x="95.6142%" y="303.50"></text></g><g><title>do_lookup_x (1 samples, 0.33%)</title><rect x="95.3642%" y="277" width="0.3311%" height="15" fill="rgb(221,76,26)" fg:x="288" fg:w="1"/><text x="95.6142%" y="287.50"></text></g><g><title>check_match (1 samples, 0.33%)</title><rect x="95.3642%" y="261" width="0.3311%" height="15" fill="rgb(225,139,18)" fg:x="288" fg:w="1"/><text x="95.6142%" y="271.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.33%)</title><rect x="95.6954%" y="389" width="0.3311%" height="15" fill="rgb(230,137,11)" fg:x="289" fg:w="1"/><text x="95.9454%" y="399.50"></text></g><g><title>do_execveat_common (1 samples, 0.33%)</title><rect x="95.6954%" y="373" width="0.3311%" height="15" fill="rgb(212,28,1)" fg:x="289" fg:w="1"/><text x="95.9454%" y="383.50"></text></g><g><title>bprm_execve (1 samples, 0.33%)</title><rect x="95.6954%" y="357" width="0.3311%" height="15" fill="rgb(248,164,17)" fg:x="289" fg:w="1"/><text x="95.9454%" y="367.50"></text></g><g><title>load_elf_binary (1 samples, 0.33%)</title><rect x="95.6954%" y="341" width="0.3311%" height="15" fill="rgb(222,171,42)" fg:x="289" fg:w="1"/><text x="95.9454%" y="351.50"></text></g><g><title>__clear_user (1 samples, 0.33%)</title><rect x="95.6954%" y="325" width="0.3311%" height="15" fill="rgb(243,84,45)" fg:x="289" fg:w="1"/><text x="95.9454%" y="335.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.33%)</title><rect x="95.6954%" y="309" width="0.3311%" height="15" fill="rgb(252,49,23)" fg:x="289" fg:w="1"/><text x="95.9454%" y="319.50"></text></g><g><title>exc_page_fault (1 samples, 0.33%)</title><rect x="95.6954%" y="293" width="0.3311%" height="15" fill="rgb(215,19,7)" fg:x="289" fg:w="1"/><text x="95.9454%" y="303.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.33%)</title><rect x="95.6954%" y="277" width="0.3311%" height="15" fill="rgb(238,81,41)" fg:x="289" fg:w="1"/><text x="95.9454%" y="287.50"></text></g><g><title>handle_mm_fault (1 samples, 0.33%)</title><rect x="95.6954%" y="261" width="0.3311%" height="15" fill="rgb(210,199,37)" fg:x="289" fg:w="1"/><text x="95.9454%" y="271.50"></text></g><g><title>__do_fault (1 samples, 0.33%)</title><rect x="95.6954%" y="245" width="0.3311%" height="15" fill="rgb(244,192,49)" fg:x="289" fg:w="1"/><text x="95.9454%" y="255.50"></text></g><g><title>filemap_fault (1 samples, 0.33%)</title><rect x="95.6954%" y="229" width="0.3311%" height="15" fill="rgb(226,211,11)" fg:x="289" fg:w="1"/><text x="95.9454%" y="239.50"></text></g><g><title>wait_on_page_bit_common (1 samples, 0.33%)</title><rect x="95.6954%" y="213" width="0.3311%" height="15" fill="rgb(236,162,54)" fg:x="289" fg:w="1"/><text x="95.9454%" y="223.50"></text></g><g><title>io_schedule (1 samples, 0.33%)</title><rect x="95.6954%" y="197" width="0.3311%" height="15" fill="rgb(220,229,9)" fg:x="289" fg:w="1"/><text x="95.9454%" y="207.50"></text></g><g><title>schedule (1 samples, 0.33%)</title><rect x="95.6954%" y="181" width="0.3311%" height="15" fill="rgb(250,87,22)" fg:x="289" fg:w="1"/><text x="95.9454%" y="191.50"></text></g><g><title>__schedule (1 samples, 0.33%)</title><rect x="95.6954%" y="165" width="0.3311%" height="15" fill="rgb(239,43,17)" fg:x="289" fg:w="1"/><text x="95.9454%" y="175.50"></text></g><g><title>dequeue_task_fair (1 samples, 0.33%)</title><rect x="95.6954%" y="149" width="0.3311%" height="15" fill="rgb(231,177,25)" fg:x="289" fg:w="1"/><text x="95.9454%" y="159.50"></text></g><g><title>dequeue_entity (1 samples, 0.33%)</title><rect x="95.6954%" y="133" width="0.3311%" height="15" fill="rgb(219,179,1)" fg:x="289" fg:w="1"/><text x="95.9454%" y="143.50"></text></g><g><title>update_curr (1 samples, 0.33%)</title><rect x="95.6954%" y="117" width="0.3311%" height="15" fill="rgb(238,219,53)" fg:x="289" fg:w="1"/><text x="95.9454%" y="127.50"></text></g><g><title>__calc_delta (1 samples, 0.33%)</title><rect x="95.6954%" y="101" width="0.3311%" height="15" fill="rgb(232,167,36)" fg:x="289" fg:w="1"/><text x="95.9454%" y="111.50"></text></g><g><title>mm_update_next_owner (1 samples, 0.33%)</title><rect x="96.0265%" y="341" width="0.3311%" height="15" fill="rgb(244,19,51)" fg:x="290" fg:w="1"/><text x="96.2765%" y="351.50"></text></g><g><title>remove_vma (1 samples, 0.33%)</title><rect x="96.3576%" y="309" width="0.3311%" height="15" fill="rgb(224,6,22)" fg:x="291" fg:w="1"/><text x="96.6076%" y="319.50"></text></g><g><title>kmem_cache_free (1 samples, 0.33%)</title><rect x="96.3576%" y="293" width="0.3311%" height="15" fill="rgb(224,145,5)" fg:x="291" fg:w="1"/><text x="96.6076%" y="303.50"></text></g><g><title>__slab_free (1 samples, 0.33%)</title><rect x="96.3576%" y="277" width="0.3311%" height="15" fill="rgb(234,130,49)" fg:x="291" fg:w="1"/><text x="96.6076%" y="287.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 1.32%)</title><rect x="95.6954%" y="421" width="1.3245%" height="15" fill="rgb(254,6,2)" fg:x="289" fg:w="4"/><text x="95.9454%" y="431.50"></text></g><g><title>do_syscall_64 (4 samples, 1.32%)</title><rect x="95.6954%" y="405" width="1.3245%" height="15" fill="rgb(208,96,46)" fg:x="289" fg:w="4"/><text x="95.9454%" y="415.50"></text></g><g><title>__x64_sys_exit_group (3 samples, 0.99%)</title><rect x="96.0265%" y="389" width="0.9934%" height="15" fill="rgb(239,3,39)" fg:x="290" fg:w="3"/><text x="96.2765%" y="399.50"></text></g><g><title>do_group_exit (3 samples, 0.99%)</title><rect x="96.0265%" y="373" width="0.9934%" height="15" fill="rgb(233,210,1)" fg:x="290" fg:w="3"/><text x="96.2765%" y="383.50"></text></g><g><title>do_exit (3 samples, 0.99%)</title><rect x="96.0265%" y="357" width="0.9934%" height="15" fill="rgb(244,137,37)" fg:x="290" fg:w="3"/><text x="96.2765%" y="367.50"></text></g><g><title>mmput (2 samples, 0.66%)</title><rect x="96.3576%" y="341" width="0.6623%" height="15" fill="rgb(240,136,2)" fg:x="291" fg:w="2"/><text x="96.6076%" y="351.50"></text></g><g><title>exit_mmap (2 samples, 0.66%)</title><rect x="96.3576%" y="325" width="0.6623%" height="15" fill="rgb(239,18,37)" fg:x="291" fg:w="2"/><text x="96.6076%" y="335.50"></text></g><g><title>unmap_vmas (1 samples, 0.33%)</title><rect x="96.6887%" y="309" width="0.3311%" height="15" fill="rgb(218,185,22)" fg:x="292" fg:w="1"/><text x="96.9387%" y="319.50"></text></g><g><title>unmap_page_range (1 samples, 0.33%)</title><rect x="96.6887%" y="293" width="0.3311%" height="15" fill="rgb(225,218,4)" fg:x="292" fg:w="1"/><text x="96.9387%" y="303.50"></text></g><g><title>colmet-node (292 samples, 96.69%)</title><rect x="1.3245%" y="437" width="96.6887%" height="15" fill="rgb(230,182,32)" fg:x="4" fg:w="292"/><text x="1.5745%" y="447.50">colmet-node</text></g><g><title>entry_SYSCALL_64_safe_stack (3 samples, 0.99%)</title><rect x="97.0199%" y="421" width="0.9934%" height="15" fill="rgb(242,56,43)" fg:x="293" fg:w="3"/><text x="97.2699%" y="431.50"></text></g><g><title>all (302 samples, 100%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(233,99,24)" fg:x="0" fg:w="302"/><text x="0.2500%" y="463.50"></text></g><g><title>perf_5.10 (6 samples, 1.99%)</title><rect x="98.0132%" y="437" width="1.9868%" height="15" fill="rgb(234,209,42)" fg:x="296" fg:w="6"/><text x="98.2632%" y="447.50">p..</text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 1.99%)</title><rect x="98.0132%" y="421" width="1.9868%" height="15" fill="rgb(227,7,12)" fg:x="296" fg:w="6"/><text x="98.2632%" y="431.50">e..</text></g><g><title>do_syscall_64 (6 samples, 1.99%)</title><rect x="98.0132%" y="405" width="1.9868%" height="15" fill="rgb(245,203,43)" fg:x="296" fg:w="6"/><text x="98.2632%" y="415.50">d..</text></g><g><title>__x64_sys_execve (6 samples, 1.99%)</title><rect x="98.0132%" y="389" width="1.9868%" height="15" fill="rgb(238,205,33)" fg:x="296" fg:w="6"/><text x="98.2632%" y="399.50">_..</text></g><g><title>do_execveat_common (6 samples, 1.99%)</title><rect x="98.0132%" y="373" width="1.9868%" height="15" fill="rgb(231,56,7)" fg:x="296" fg:w="6"/><text x="98.2632%" y="383.50">d..</text></g><g><title>bprm_execve (6 samples, 1.99%)</title><rect x="98.0132%" y="357" width="1.9868%" height="15" fill="rgb(244,186,29)" fg:x="296" fg:w="6"/><text x="98.2632%" y="367.50">b..</text></g><g><title>load_elf_binary (6 samples, 1.99%)</title><rect x="98.0132%" y="341" width="1.9868%" height="15" fill="rgb(234,111,31)" fg:x="296" fg:w="6"/><text x="98.2632%" y="351.50">l..</text></g><g><title>begin_new_exec (6 samples, 1.99%)</title><rect x="98.0132%" y="325" width="1.9868%" height="15" fill="rgb(241,149,10)" fg:x="296" fg:w="6"/><text x="98.2632%" y="335.50">b..</text></g><g><title>perf_event_exec (6 samples, 1.99%)</title><rect x="98.0132%" y="309" width="1.9868%" height="15" fill="rgb(249,206,44)" fg:x="296" fg:w="6"/><text x="98.2632%" y="319.50">p..</text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 1.66%)</title><rect x="98.3444%" y="293" width="1.6556%" height="15" fill="rgb(251,153,30)" fg:x="297" fg:w="5"/><text x="98.5944%" y="303.50"></text></g><g><title>native_write_msr (5 samples, 1.66%)</title><rect x="98.3444%" y="277" width="1.6556%" height="15" fill="rgb(239,152,38)" fg:x="297" fg:w="5"/><text x="98.5944%" y="287.50"></text></g></svg></svg>