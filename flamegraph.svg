<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="565.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="2732"><g><title>__sock_create (1 samples, 0.04%)</title><rect x="0.0000%" y="325" width="0.0366%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>inet_create (1 samples, 0.04%)</title><rect x="0.0000%" y="309" width="0.0366%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>__GI___socket (3 samples, 0.11%)</title><rect x="0.0000%" y="405" width="0.1098%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="3"/><text x="0.2500%" y="415.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3 samples, 0.11%)</title><rect x="0.0000%" y="389" width="0.1098%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="3"/><text x="0.2500%" y="399.50"></text></g><g><title>do_syscall_64 (3 samples, 0.11%)</title><rect x="0.0000%" y="373" width="0.1098%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="3"/><text x="0.2500%" y="383.50"></text></g><g><title>__x64_sys_socket (3 samples, 0.11%)</title><rect x="0.0000%" y="357" width="0.1098%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="3"/><text x="0.2500%" y="367.50"></text></g><g><title>__sys_socket (3 samples, 0.11%)</title><rect x="0.0000%" y="341" width="0.1098%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="3"/><text x="0.2500%" y="351.50"></text></g><g><title>sock_alloc_file (2 samples, 0.07%)</title><rect x="0.0366%" y="325" width="0.0732%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="2"/><text x="0.2866%" y="335.50"></text></g><g><title>alloc_file_pseudo (2 samples, 0.07%)</title><rect x="0.0366%" y="309" width="0.0732%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="2"/><text x="0.2866%" y="319.50"></text></g><g><title>alloc_file (2 samples, 0.07%)</title><rect x="0.0366%" y="293" width="0.0732%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="2"/><text x="0.2866%" y="303.50"></text></g><g><title>alloc_empty_file (2 samples, 0.07%)</title><rect x="0.0366%" y="277" width="0.0732%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="2"/><text x="0.2866%" y="287.50"></text></g><g><title>__alloc_file (1 samples, 0.04%)</title><rect x="0.0732%" y="261" width="0.0366%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="1"/><text x="0.3232%" y="271.50"></text></g><g><title>security_file_alloc (1 samples, 0.04%)</title><rect x="0.0732%" y="245" width="0.0366%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="1"/><text x="0.3232%" y="255.50"></text></g><g><title>apparmor_file_alloc_security (1 samples, 0.04%)</title><rect x="0.0732%" y="229" width="0.0366%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="1"/><text x="0.3232%" y="239.50"></text></g><g><title>[libzmq.so.5.2.4] (4 samples, 0.15%)</title><rect x="0.0000%" y="421" width="0.1464%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="4"/><text x="0.2500%" y="431.50"></text></g><g><title>fcntl_compat (1 samples, 0.04%)</title><rect x="0.1098%" y="405" width="0.0366%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="1"/><text x="0.3598%" y="415.50"></text></g><g><title>__GI___libc_fcntl64 (1 samples, 0.04%)</title><rect x="0.1098%" y="389" width="0.0366%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="1"/><text x="0.3598%" y="399.50"></text></g><g><title>__fcntl64_nocancel_adjusted (1 samples, 0.04%)</title><rect x="0.1098%" y="373" width="0.0366%" height="15" fill="rgb(210,31,41)" fg:x="3" fg:w="1"/><text x="0.3598%" y="383.50"></text></g><g><title>syscall_return_via_sysret (1 samples, 0.04%)</title><rect x="0.1098%" y="357" width="0.0366%" height="15" fill="rgb(221,200,47)" fg:x="3" fg:w="1"/><text x="0.3598%" y="367.50"></text></g><g><title>__GI_epoll_ctl (3 samples, 0.11%)</title><rect x="0.1464%" y="421" width="0.1098%" height="15" fill="rgb(226,26,5)" fg:x="4" fg:w="3"/><text x="0.3964%" y="431.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3 samples, 0.11%)</title><rect x="0.1464%" y="405" width="0.1098%" height="15" fill="rgb(249,33,26)" fg:x="4" fg:w="3"/><text x="0.3964%" y="415.50"></text></g><g><title>do_syscall_64 (3 samples, 0.11%)</title><rect x="0.1464%" y="389" width="0.1098%" height="15" fill="rgb(235,183,28)" fg:x="4" fg:w="3"/><text x="0.3964%" y="399.50"></text></g><g><title>__x64_sys_epoll_ctl (3 samples, 0.11%)</title><rect x="0.1464%" y="373" width="0.1098%" height="15" fill="rgb(221,5,38)" fg:x="4" fg:w="3"/><text x="0.3964%" y="383.50"></text></g><g><title>do_epoll_ctl (2 samples, 0.07%)</title><rect x="0.1830%" y="357" width="0.0732%" height="15" fill="rgb(247,18,42)" fg:x="5" fg:w="2"/><text x="0.4330%" y="367.50"></text></g><g><title>kmem_cache_alloc (1 samples, 0.04%)</title><rect x="0.2196%" y="341" width="0.0366%" height="15" fill="rgb(241,131,45)" fg:x="6" fg:w="1"/><text x="0.4696%" y="351.50"></text></g><g><title>memcg_slab_post_alloc_hook (1 samples, 0.04%)</title><rect x="0.2196%" y="325" width="0.0366%" height="15" fill="rgb(249,31,29)" fg:x="6" fg:w="1"/><text x="0.4696%" y="335.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.04%)</title><rect x="0.2196%" y="309" width="0.0366%" height="15" fill="rgb(225,111,53)" fg:x="6" fg:w="1"/><text x="0.4696%" y="319.50"></text></g><g><title>__mod_memcg_state.part.0 (1 samples, 0.04%)</title><rect x="0.2196%" y="293" width="0.0366%" height="15" fill="rgb(238,160,17)" fg:x="6" fg:w="1"/><text x="0.4696%" y="303.50"></text></g><g><title>secure_tcp_ts_off (1 samples, 0.04%)</title><rect x="0.2928%" y="293" width="0.0366%" height="15" fill="rgb(214,148,48)" fg:x="8" fg:w="1"/><text x="0.5428%" y="303.50"></text></g><g><title>siphash_1u64 (1 samples, 0.04%)</title><rect x="0.2928%" y="277" width="0.0366%" height="15" fill="rgb(232,36,49)" fg:x="8" fg:w="1"/><text x="0.5428%" y="287.50"></text></g><g><title>__ip_local_out (1 samples, 0.04%)</title><rect x="0.3294%" y="245" width="0.0366%" height="15" fill="rgb(209,103,24)" fg:x="9" fg:w="1"/><text x="0.5794%" y="255.50"></text></g><g><title>nf_hook_slow (1 samples, 0.04%)</title><rect x="0.3294%" y="229" width="0.0366%" height="15" fill="rgb(229,88,8)" fg:x="9" fg:w="1"/><text x="0.5794%" y="239.50"></text></g><g><title>nf_conntrack_in (1 samples, 0.04%)</title><rect x="0.3294%" y="213" width="0.0366%" height="15" fill="rgb(213,181,19)" fg:x="9" fg:w="1"/><text x="0.5794%" y="223.50"></text></g><g><title>__nf_conntrack_find_get (1 samples, 0.04%)</title><rect x="0.3294%" y="197" width="0.0366%" height="15" fill="rgb(254,191,54)" fg:x="9" fg:w="1"/><text x="0.5794%" y="207.50"></text></g><g><title>ip_finish_output2 (1 samples, 0.04%)</title><rect x="0.3660%" y="245" width="0.0366%" height="15" fill="rgb(241,83,37)" fg:x="10" fg:w="1"/><text x="0.6160%" y="255.50"></text></g><g><title>__local_bh_enable_ip (1 samples, 0.04%)</title><rect x="0.3660%" y="229" width="0.0366%" height="15" fill="rgb(233,36,39)" fg:x="10" fg:w="1"/><text x="0.6160%" y="239.50"></text></g><g><title>do_softirq (1 samples, 0.04%)</title><rect x="0.3660%" y="213" width="0.0366%" height="15" fill="rgb(226,3,54)" fg:x="10" fg:w="1"/><text x="0.6160%" y="223.50"></text></g><g><title>do_softirq_own_stack (1 samples, 0.04%)</title><rect x="0.3660%" y="197" width="0.0366%" height="15" fill="rgb(245,192,40)" fg:x="10" fg:w="1"/><text x="0.6160%" y="207.50"></text></g><g><title>asm_call_sysvec_on_stack (1 samples, 0.04%)</title><rect x="0.3660%" y="181" width="0.0366%" height="15" fill="rgb(238,167,29)" fg:x="10" fg:w="1"/><text x="0.6160%" y="191.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="0.3660%" y="165" width="0.0366%" height="15" fill="rgb(232,182,51)" fg:x="10" fg:w="1"/><text x="0.6160%" y="175.50"></text></g><g><title>net_rx_action (1 samples, 0.04%)</title><rect x="0.3660%" y="149" width="0.0366%" height="15" fill="rgb(231,60,39)" fg:x="10" fg:w="1"/><text x="0.6160%" y="159.50"></text></g><g><title>process_backlog (1 samples, 0.04%)</title><rect x="0.3660%" y="133" width="0.0366%" height="15" fill="rgb(208,69,12)" fg:x="10" fg:w="1"/><text x="0.6160%" y="143.50"></text></g><g><title>__netif_receive_skb_one_core (1 samples, 0.04%)</title><rect x="0.3660%" y="117" width="0.0366%" height="15" fill="rgb(235,93,37)" fg:x="10" fg:w="1"/><text x="0.6160%" y="127.50"></text></g><g><title>ip_local_deliver_finish (1 samples, 0.04%)</title><rect x="0.3660%" y="101" width="0.0366%" height="15" fill="rgb(213,116,39)" fg:x="10" fg:w="1"/><text x="0.6160%" y="111.50"></text></g><g><title>ip_protocol_deliver_rcu (1 samples, 0.04%)</title><rect x="0.3660%" y="85" width="0.0366%" height="15" fill="rgb(222,207,29)" fg:x="10" fg:w="1"/><text x="0.6160%" y="95.50"></text></g><g><title>tcp_v4_rcv (1 samples, 0.04%)</title><rect x="0.3660%" y="69" width="0.0366%" height="15" fill="rgb(206,96,30)" fg:x="10" fg:w="1"/><text x="0.6160%" y="79.50"></text></g><g><title>tcp_v4_fill_cb (1 samples, 0.04%)</title><rect x="0.3660%" y="53" width="0.0366%" height="15" fill="rgb(218,138,4)" fg:x="10" fg:w="1"/><text x="0.6160%" y="63.50"></text></g><g><title>__tcp_transmit_skb (4 samples, 0.15%)</title><rect x="0.3294%" y="277" width="0.1464%" height="15" fill="rgb(250,191,14)" fg:x="9" fg:w="4"/><text x="0.5794%" y="287.50"></text></g><g><title>__ip_queue_xmit (4 samples, 0.15%)</title><rect x="0.3294%" y="261" width="0.1464%" height="15" fill="rgb(239,60,40)" fg:x="9" fg:w="4"/><text x="0.5794%" y="271.50"></text></g><g><title>ip_output (2 samples, 0.07%)</title><rect x="0.4026%" y="245" width="0.0732%" height="15" fill="rgb(206,27,48)" fg:x="11" fg:w="2"/><text x="0.6526%" y="255.50"></text></g><g><title>nf_hook_slow (2 samples, 0.07%)</title><rect x="0.4026%" y="229" width="0.0732%" height="15" fill="rgb(225,35,8)" fg:x="11" fg:w="2"/><text x="0.6526%" y="239.50"></text></g><g><title>nf_confirm (2 samples, 0.07%)</title><rect x="0.4026%" y="213" width="0.0732%" height="15" fill="rgb(250,213,24)" fg:x="11" fg:w="2"/><text x="0.6526%" y="223.50"></text></g><g><title>__nf_conntrack_confirm (2 samples, 0.07%)</title><rect x="0.4026%" y="197" width="0.0732%" height="15" fill="rgb(247,123,22)" fg:x="11" fg:w="2"/><text x="0.6526%" y="207.50"></text></g><g><title>nf_conntrack_double_lock.constprop.0 (2 samples, 0.07%)</title><rect x="0.4026%" y="181" width="0.0732%" height="15" fill="rgb(231,138,38)" fg:x="11" fg:w="2"/><text x="0.6526%" y="191.50"></text></g><g><title>nf_conntrack_lock (2 samples, 0.07%)</title><rect x="0.4026%" y="165" width="0.0732%" height="15" fill="rgb(231,145,46)" fg:x="11" fg:w="2"/><text x="0.6526%" y="175.50"></text></g><g><title>_raw_spin_lock (2 samples, 0.07%)</title><rect x="0.4026%" y="149" width="0.0732%" height="15" fill="rgb(251,118,11)" fg:x="11" fg:w="2"/><text x="0.6526%" y="159.50"></text></g><g><title>__libc_connect (7 samples, 0.26%)</title><rect x="0.2562%" y="421" width="0.2562%" height="15" fill="rgb(217,147,25)" fg:x="7" fg:w="7"/><text x="0.5062%" y="431.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.22%)</title><rect x="0.2928%" y="405" width="0.2196%" height="15" fill="rgb(247,81,37)" fg:x="8" fg:w="6"/><text x="0.5428%" y="415.50"></text></g><g><title>do_syscall_64 (6 samples, 0.22%)</title><rect x="0.2928%" y="389" width="0.2196%" height="15" fill="rgb(209,12,38)" fg:x="8" fg:w="6"/><text x="0.5428%" y="399.50"></text></g><g><title>__x64_sys_connect (6 samples, 0.22%)</title><rect x="0.2928%" y="373" width="0.2196%" height="15" fill="rgb(227,1,9)" fg:x="8" fg:w="6"/><text x="0.5428%" y="383.50"></text></g><g><title>__sys_connect (6 samples, 0.22%)</title><rect x="0.2928%" y="357" width="0.2196%" height="15" fill="rgb(248,47,43)" fg:x="8" fg:w="6"/><text x="0.5428%" y="367.50"></text></g><g><title>inet_stream_connect (6 samples, 0.22%)</title><rect x="0.2928%" y="341" width="0.2196%" height="15" fill="rgb(221,10,30)" fg:x="8" fg:w="6"/><text x="0.5428%" y="351.50"></text></g><g><title>__inet_stream_connect (6 samples, 0.22%)</title><rect x="0.2928%" y="325" width="0.2196%" height="15" fill="rgb(210,229,1)" fg:x="8" fg:w="6"/><text x="0.5428%" y="335.50"></text></g><g><title>tcp_v4_connect (6 samples, 0.22%)</title><rect x="0.2928%" y="309" width="0.2196%" height="15" fill="rgb(222,148,37)" fg:x="8" fg:w="6"/><text x="0.5428%" y="319.50"></text></g><g><title>tcp_connect (5 samples, 0.18%)</title><rect x="0.3294%" y="293" width="0.1830%" height="15" fill="rgb(234,67,33)" fg:x="9" fg:w="5"/><text x="0.5794%" y="303.50"></text></g><g><title>inet_sk_rebuild_header (1 samples, 0.04%)</title><rect x="0.4758%" y="277" width="0.0366%" height="15" fill="rgb(247,98,35)" fg:x="13" fg:w="1"/><text x="0.7258%" y="287.50"></text></g><g><title>[libzmq.so.5.2.4] (15 samples, 0.55%)</title><rect x="0.0000%" y="437" width="0.5490%" height="15" fill="rgb(247,138,52)" fg:x="0" fg:w="15"/><text x="0.2500%" y="447.50"></text></g><g><title>operator new (1 samples, 0.04%)</title><rect x="0.5124%" y="421" width="0.0366%" height="15" fill="rgb(213,79,30)" fg:x="14" fg:w="1"/><text x="0.7624%" y="431.50"></text></g><g><title>operator new (1 samples, 0.04%)</title><rect x="0.5124%" y="405" width="0.0366%" height="15" fill="rgb(246,177,23)" fg:x="14" fg:w="1"/><text x="0.7624%" y="415.50"></text></g><g><title>malloc@plt (1 samples, 0.04%)</title><rect x="0.5124%" y="389" width="0.0366%" height="15" fill="rgb(230,62,27)" fg:x="14" fg:w="1"/><text x="0.7624%" y="399.50"></text></g><g><title>__close (1 samples, 0.04%)</title><rect x="0.5490%" y="437" width="0.0366%" height="15" fill="rgb(216,154,8)" fg:x="15" fg:w="1"/><text x="0.7990%" y="447.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="0.5490%" y="421" width="0.0366%" height="15" fill="rgb(244,35,45)" fg:x="15" fg:w="1"/><text x="0.7990%" y="431.50"></text></g><g><title>do_syscall_64 (1 samples, 0.04%)</title><rect x="0.5490%" y="405" width="0.0366%" height="15" fill="rgb(251,115,12)" fg:x="15" fg:w="1"/><text x="0.7990%" y="415.50"></text></g><g><title>__x64_sys_close (1 samples, 0.04%)</title><rect x="0.5490%" y="389" width="0.0366%" height="15" fill="rgb(240,54,50)" fg:x="15" fg:w="1"/><text x="0.7990%" y="399.50"></text></g><g><title>filp_close (1 samples, 0.04%)</title><rect x="0.5490%" y="373" width="0.0366%" height="15" fill="rgb(233,84,52)" fg:x="15" fg:w="1"/><text x="0.7990%" y="383.50"></text></g><g><title>fput_many (1 samples, 0.04%)</title><rect x="0.5490%" y="357" width="0.0366%" height="15" fill="rgb(207,117,47)" fg:x="15" fg:w="1"/><text x="0.7990%" y="367.50"></text></g><g><title>[libzmq.so.5.2.4] (17 samples, 0.62%)</title><rect x="0.0000%" y="469" width="0.6223%" height="15" fill="rgb(249,43,39)" fg:x="0" fg:w="17"/><text x="0.2500%" y="479.50"></text></g><g><title>[libzmq.so.5.2.4] (17 samples, 0.62%)</title><rect x="0.0000%" y="453" width="0.6223%" height="15" fill="rgb(209,38,44)" fg:x="0" fg:w="17"/><text x="0.2500%" y="463.50"></text></g><g><title>getsockopt@plt (1 samples, 0.04%)</title><rect x="0.5857%" y="437" width="0.0366%" height="15" fill="rgb(236,212,23)" fg:x="16" fg:w="1"/><text x="0.8357%" y="447.50"></text></g><g><title>hrtimer_init_sleeper (1 samples, 0.04%)</title><rect x="0.6223%" y="373" width="0.0366%" height="15" fill="rgb(242,79,21)" fg:x="17" fg:w="1"/><text x="0.8723%" y="383.50"></text></g><g><title>__hrtimer_init (1 samples, 0.04%)</title><rect x="0.6223%" y="357" width="0.0366%" height="15" fill="rgb(211,96,35)" fg:x="17" fg:w="1"/><text x="0.8723%" y="367.50"></text></g><g><title>[unknown] (24 samples, 0.88%)</title><rect x="0.0000%" y="501" width="0.8785%" height="15" fill="rgb(253,215,40)" fg:x="0" fg:w="24"/><text x="0.2500%" y="511.50"></text></g><g><title>[libzmq.so.5.2.4] (24 samples, 0.88%)</title><rect x="0.0000%" y="485" width="0.8785%" height="15" fill="rgb(211,81,21)" fg:x="0" fg:w="24"/><text x="0.2500%" y="495.50"></text></g><g><title>epoll_wait (7 samples, 0.26%)</title><rect x="0.6223%" y="469" width="0.2562%" height="15" fill="rgb(208,190,38)" fg:x="17" fg:w="7"/><text x="0.8723%" y="479.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (7 samples, 0.26%)</title><rect x="0.6223%" y="453" width="0.2562%" height="15" fill="rgb(235,213,38)" fg:x="17" fg:w="7"/><text x="0.8723%" y="463.50"></text></g><g><title>do_syscall_64 (7 samples, 0.26%)</title><rect x="0.6223%" y="437" width="0.2562%" height="15" fill="rgb(237,122,38)" fg:x="17" fg:w="7"/><text x="0.8723%" y="447.50"></text></g><g><title>__x64_sys_epoll_wait (7 samples, 0.26%)</title><rect x="0.6223%" y="421" width="0.2562%" height="15" fill="rgb(244,218,35)" fg:x="17" fg:w="7"/><text x="0.8723%" y="431.50"></text></g><g><title>do_epoll_wait (7 samples, 0.26%)</title><rect x="0.6223%" y="405" width="0.2562%" height="15" fill="rgb(240,68,47)" fg:x="17" fg:w="7"/><text x="0.8723%" y="415.50"></text></g><g><title>schedule_hrtimeout_range_clock (7 samples, 0.26%)</title><rect x="0.6223%" y="389" width="0.2562%" height="15" fill="rgb(210,16,53)" fg:x="17" fg:w="7"/><text x="0.8723%" y="399.50"></text></g><g><title>schedule (6 samples, 0.22%)</title><rect x="0.6589%" y="373" width="0.2196%" height="15" fill="rgb(235,124,12)" fg:x="18" fg:w="6"/><text x="0.9089%" y="383.50"></text></g><g><title>__schedule (6 samples, 0.22%)</title><rect x="0.6589%" y="357" width="0.2196%" height="15" fill="rgb(224,169,11)" fg:x="18" fg:w="6"/><text x="0.9089%" y="367.50"></text></g><g><title>finish_task_switch (6 samples, 0.22%)</title><rect x="0.6589%" y="341" width="0.2196%" height="15" fill="rgb(250,166,2)" fg:x="18" fg:w="6"/><text x="0.9089%" y="351.50"></text></g><g><title>__perf_event_task_sched_in (6 samples, 0.22%)</title><rect x="0.6589%" y="325" width="0.2196%" height="15" fill="rgb(242,216,29)" fg:x="18" fg:w="6"/><text x="0.9089%" y="335.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (6 samples, 0.22%)</title><rect x="0.6589%" y="309" width="0.2196%" height="15" fill="rgb(230,116,27)" fg:x="18" fg:w="6"/><text x="0.9089%" y="319.50"></text></g><g><title>native_write_msr (6 samples, 0.22%)</title><rect x="0.6589%" y="293" width="0.2196%" height="15" fill="rgb(228,99,48)" fg:x="18" fg:w="6"/><text x="0.9089%" y="303.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.04%)</title><rect x="0.8785%" y="373" width="0.0366%" height="15" fill="rgb(253,11,6)" fg:x="24" fg:w="1"/><text x="1.1285%" y="383.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.04%)</title><rect x="0.8785%" y="357" width="0.0366%" height="15" fill="rgb(247,143,39)" fg:x="24" fg:w="1"/><text x="1.1285%" y="367.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.04%)</title><rect x="0.8785%" y="341" width="0.0366%" height="15" fill="rgb(236,97,10)" fg:x="24" fg:w="1"/><text x="1.1285%" y="351.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.04%)</title><rect x="0.8785%" y="325" width="0.0366%" height="15" fill="rgb(233,208,19)" fg:x="24" fg:w="1"/><text x="1.1285%" y="335.50"></text></g><g><title>_dl_runtime_resolve_xsavec (1 samples, 0.04%)</title><rect x="0.8785%" y="309" width="0.0366%" height="15" fill="rgb(216,164,2)" fg:x="24" fg:w="1"/><text x="1.1285%" y="319.50"></text></g><g><title>_dl_fixup (1 samples, 0.04%)</title><rect x="0.8785%" y="293" width="0.0366%" height="15" fill="rgb(220,129,5)" fg:x="24" fg:w="1"/><text x="1.1285%" y="303.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.04%)</title><rect x="0.8785%" y="277" width="0.0366%" height="15" fill="rgb(242,17,10)" fg:x="24" fg:w="1"/><text x="1.1285%" y="287.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.04%)</title><rect x="0.8785%" y="261" width="0.0366%" height="15" fill="rgb(242,107,0)" fg:x="24" fg:w="1"/><text x="1.1285%" y="271.50"></text></g><g><title>exc_page_fault (1 samples, 0.04%)</title><rect x="0.8785%" y="245" width="0.0366%" height="15" fill="rgb(251,28,31)" fg:x="24" fg:w="1"/><text x="1.1285%" y="255.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.04%)</title><rect x="0.8785%" y="229" width="0.0366%" height="15" fill="rgb(233,223,10)" fg:x="24" fg:w="1"/><text x="1.1285%" y="239.50"></text></g><g><title>handle_mm_fault (1 samples, 0.04%)</title><rect x="0.8785%" y="213" width="0.0366%" height="15" fill="rgb(215,21,27)" fg:x="24" fg:w="1"/><text x="1.1285%" y="223.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.04%)</title><rect x="0.8785%" y="197" width="0.0366%" height="15" fill="rgb(232,23,21)" fg:x="24" fg:w="1"/><text x="1.1285%" y="207.50"></text></g><g><title>[libzmq.so.5.2.4] (2 samples, 0.07%)</title><rect x="0.8785%" y="389" width="0.0732%" height="15" fill="rgb(244,5,23)" fg:x="24" fg:w="2"/><text x="1.1285%" y="399.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (1 samples, 0.04%)</title><rect x="0.9151%" y="373" width="0.0366%" height="15" fill="rgb(226,81,46)" fg:x="25" fg:w="1"/><text x="1.1651%" y="383.50"></text></g><g><title>__GI_epoll_ctl (1 samples, 0.04%)</title><rect x="0.9517%" y="389" width="0.0366%" height="15" fill="rgb(247,70,30)" fg:x="26" fg:w="1"/><text x="1.2017%" y="399.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="0.9517%" y="373" width="0.0366%" height="15" fill="rgb(212,68,19)" fg:x="26" fg:w="1"/><text x="1.2017%" y="383.50"></text></g><g><title>do_syscall_64 (1 samples, 0.04%)</title><rect x="0.9517%" y="357" width="0.0366%" height="15" fill="rgb(240,187,13)" fg:x="26" fg:w="1"/><text x="1.2017%" y="367.50"></text></g><g><title>__x64_sys_epoll_ctl (1 samples, 0.04%)</title><rect x="0.9517%" y="341" width="0.0366%" height="15" fill="rgb(223,113,26)" fg:x="26" fg:w="1"/><text x="1.2017%" y="351.50"></text></g><g><title>do_epoll_ctl (1 samples, 0.04%)</title><rect x="0.9517%" y="325" width="0.0366%" height="15" fill="rgb(206,192,2)" fg:x="26" fg:w="1"/><text x="1.2017%" y="335.50"></text></g><g><title>tcp_connect (1 samples, 0.04%)</title><rect x="0.9883%" y="261" width="0.0366%" height="15" fill="rgb(241,108,4)" fg:x="27" fg:w="1"/><text x="1.2383%" y="271.50"></text></g><g><title>__tcp_transmit_skb (1 samples, 0.04%)</title><rect x="0.9883%" y="245" width="0.0366%" height="15" fill="rgb(247,173,49)" fg:x="27" fg:w="1"/><text x="1.2383%" y="255.50"></text></g><g><title>tcp_rate_skb_sent (1 samples, 0.04%)</title><rect x="0.9883%" y="229" width="0.0366%" height="15" fill="rgb(224,114,35)" fg:x="27" fg:w="1"/><text x="1.2383%" y="239.50"></text></g><g><title>[libzmq.so.5.2.4] (5 samples, 0.18%)</title><rect x="0.8785%" y="437" width="0.1830%" height="15" fill="rgb(245,159,27)" fg:x="24" fg:w="5"/><text x="1.1285%" y="447.50"></text></g><g><title>[libzmq.so.5.2.4] (5 samples, 0.18%)</title><rect x="0.8785%" y="421" width="0.1830%" height="15" fill="rgb(245,172,44)" fg:x="24" fg:w="5"/><text x="1.1285%" y="431.50"></text></g><g><title>[libzmq.so.5.2.4] (5 samples, 0.18%)</title><rect x="0.8785%" y="405" width="0.1830%" height="15" fill="rgb(236,23,11)" fg:x="24" fg:w="5"/><text x="1.1285%" y="415.50"></text></g><g><title>__libc_connect (2 samples, 0.07%)</title><rect x="0.9883%" y="389" width="0.0732%" height="15" fill="rgb(205,117,38)" fg:x="27" fg:w="2"/><text x="1.2383%" y="399.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.07%)</title><rect x="0.9883%" y="373" width="0.0732%" height="15" fill="rgb(237,72,25)" fg:x="27" fg:w="2"/><text x="1.2383%" y="383.50"></text></g><g><title>do_syscall_64 (2 samples, 0.07%)</title><rect x="0.9883%" y="357" width="0.0732%" height="15" fill="rgb(244,70,9)" fg:x="27" fg:w="2"/><text x="1.2383%" y="367.50"></text></g><g><title>__x64_sys_connect (2 samples, 0.07%)</title><rect x="0.9883%" y="341" width="0.0732%" height="15" fill="rgb(217,125,39)" fg:x="27" fg:w="2"/><text x="1.2383%" y="351.50"></text></g><g><title>__sys_connect (2 samples, 0.07%)</title><rect x="0.9883%" y="325" width="0.0732%" height="15" fill="rgb(235,36,10)" fg:x="27" fg:w="2"/><text x="1.2383%" y="335.50"></text></g><g><title>inet_stream_connect (2 samples, 0.07%)</title><rect x="0.9883%" y="309" width="0.0732%" height="15" fill="rgb(251,123,47)" fg:x="27" fg:w="2"/><text x="1.2383%" y="319.50"></text></g><g><title>__inet_stream_connect (2 samples, 0.07%)</title><rect x="0.9883%" y="293" width="0.0732%" height="15" fill="rgb(221,13,13)" fg:x="27" fg:w="2"/><text x="1.2383%" y="303.50"></text></g><g><title>tcp_v4_connect (2 samples, 0.07%)</title><rect x="0.9883%" y="277" width="0.0732%" height="15" fill="rgb(238,131,9)" fg:x="27" fg:w="2"/><text x="1.2383%" y="287.50"></text></g><g><title>tcp_fastopen_defer_connect (1 samples, 0.04%)</title><rect x="1.0249%" y="261" width="0.0366%" height="15" fill="rgb(211,50,8)" fg:x="28" fg:w="1"/><text x="1.2749%" y="271.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.07%)</title><rect x="1.0615%" y="421" width="0.0732%" height="15" fill="rgb(245,182,24)" fg:x="29" fg:w="2"/><text x="1.3115%" y="431.50"></text></g><g><title>do_syscall_64 (2 samples, 0.07%)</title><rect x="1.0615%" y="405" width="0.0732%" height="15" fill="rgb(242,14,37)" fg:x="29" fg:w="2"/><text x="1.3115%" y="415.50"></text></g><g><title>__x64_sys_epoll_wait (2 samples, 0.07%)</title><rect x="1.0615%" y="389" width="0.0732%" height="15" fill="rgb(246,228,12)" fg:x="29" fg:w="2"/><text x="1.3115%" y="399.50"></text></g><g><title>do_epoll_wait (2 samples, 0.07%)</title><rect x="1.0615%" y="373" width="0.0732%" height="15" fill="rgb(213,55,15)" fg:x="29" fg:w="2"/><text x="1.3115%" y="383.50"></text></g><g><title>schedule_hrtimeout_range_clock (1 samples, 0.04%)</title><rect x="1.0981%" y="357" width="0.0366%" height="15" fill="rgb(209,9,3)" fg:x="30" fg:w="1"/><text x="1.3481%" y="367.50"></text></g><g><title>schedule (1 samples, 0.04%)</title><rect x="1.0981%" y="341" width="0.0366%" height="15" fill="rgb(230,59,30)" fg:x="30" fg:w="1"/><text x="1.3481%" y="351.50"></text></g><g><title>__schedule (1 samples, 0.04%)</title><rect x="1.0981%" y="325" width="0.0366%" height="15" fill="rgb(209,121,21)" fg:x="30" fg:w="1"/><text x="1.3481%" y="335.50"></text></g><g><title>pick_next_task_fair (1 samples, 0.04%)</title><rect x="1.0981%" y="309" width="0.0366%" height="15" fill="rgb(220,109,13)" fg:x="30" fg:w="1"/><text x="1.3481%" y="319.50"></text></g><g><title>newidle_balance (1 samples, 0.04%)</title><rect x="1.0981%" y="293" width="0.0366%" height="15" fill="rgb(232,18,1)" fg:x="30" fg:w="1"/><text x="1.3481%" y="303.50"></text></g><g><title>_nohz_idle_balance (1 samples, 0.04%)</title><rect x="1.0981%" y="277" width="0.0366%" height="15" fill="rgb(215,41,42)" fg:x="30" fg:w="1"/><text x="1.3481%" y="287.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.04%)</title><rect x="1.0981%" y="261" width="0.0366%" height="15" fill="rgb(224,123,36)" fg:x="30" fg:w="1"/><text x="1.3481%" y="271.50"></text></g><g><title>__GI___clone (8 samples, 0.29%)</title><rect x="0.8785%" y="501" width="0.2928%" height="15" fill="rgb(240,125,3)" fg:x="24" fg:w="8"/><text x="1.1285%" y="511.50"></text></g><g><title>start_thread (8 samples, 0.29%)</title><rect x="0.8785%" y="485" width="0.2928%" height="15" fill="rgb(205,98,50)" fg:x="24" fg:w="8"/><text x="1.1285%" y="495.50"></text></g><g><title>[libzmq.so.5.2.4] (8 samples, 0.29%)</title><rect x="0.8785%" y="469" width="0.2928%" height="15" fill="rgb(205,185,37)" fg:x="24" fg:w="8"/><text x="1.1285%" y="479.50"></text></g><g><title>[libzmq.so.5.2.4] (8 samples, 0.29%)</title><rect x="0.8785%" y="453" width="0.2928%" height="15" fill="rgb(238,207,15)" fg:x="24" fg:w="8"/><text x="1.1285%" y="463.50"></text></g><g><title>epoll_wait (3 samples, 0.11%)</title><rect x="1.0615%" y="437" width="0.1098%" height="15" fill="rgb(213,199,42)" fg:x="29" fg:w="3"/><text x="1.3115%" y="447.50"></text></g><g><title>syscall_return_via_sysret (1 samples, 0.04%)</title><rect x="1.1347%" y="421" width="0.0366%" height="15" fill="rgb(235,201,11)" fg:x="31" fg:w="1"/><text x="1.3847%" y="431.50"></text></g><g><title>__ip_local_out (1 samples, 0.04%)</title><rect x="1.1713%" y="341" width="0.0366%" height="15" fill="rgb(207,46,11)" fg:x="32" fg:w="1"/><text x="1.4213%" y="351.50"></text></g><g><title>nf_hook_slow (1 samples, 0.04%)</title><rect x="1.1713%" y="325" width="0.0366%" height="15" fill="rgb(241,35,35)" fg:x="32" fg:w="1"/><text x="1.4213%" y="335.50"></text></g><g><title>nf_conntrack_in (1 samples, 0.04%)</title><rect x="1.1713%" y="309" width="0.0366%" height="15" fill="rgb(243,32,47)" fg:x="32" fg:w="1"/><text x="1.4213%" y="319.50"></text></g><g><title>nf_conntrack_tcp_packet (1 samples, 0.04%)</title><rect x="1.1713%" y="293" width="0.0366%" height="15" fill="rgb(247,202,23)" fg:x="32" fg:w="1"/><text x="1.4213%" y="303.50"></text></g><g><title>tcp_new (1 samples, 0.04%)</title><rect x="1.1713%" y="277" width="0.0366%" height="15" fill="rgb(219,102,11)" fg:x="32" fg:w="1"/><text x="1.4213%" y="287.50"></text></g><g><title>tcp_options (1 samples, 0.04%)</title><rect x="1.1713%" y="261" width="0.0366%" height="15" fill="rgb(243,110,44)" fg:x="32" fg:w="1"/><text x="1.4213%" y="271.50"></text></g><g><title>ZMQbg/IO/0 (34 samples, 1.24%)</title><rect x="0.0000%" y="517" width="1.2445%" height="15" fill="rgb(222,74,54)" fg:x="0" fg:w="34"/><text x="0.2500%" y="527.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.07%)</title><rect x="1.1713%" y="501" width="0.0732%" height="15" fill="rgb(216,99,12)" fg:x="32" fg:w="2"/><text x="1.4213%" y="511.50"></text></g><g><title>do_syscall_64 (2 samples, 0.07%)</title><rect x="1.1713%" y="485" width="0.0732%" height="15" fill="rgb(226,22,26)" fg:x="32" fg:w="2"/><text x="1.4213%" y="495.50"></text></g><g><title>__x64_sys_connect (2 samples, 0.07%)</title><rect x="1.1713%" y="469" width="0.0732%" height="15" fill="rgb(217,163,10)" fg:x="32" fg:w="2"/><text x="1.4213%" y="479.50"></text></g><g><title>__sys_connect (2 samples, 0.07%)</title><rect x="1.1713%" y="453" width="0.0732%" height="15" fill="rgb(213,25,53)" fg:x="32" fg:w="2"/><text x="1.4213%" y="463.50"></text></g><g><title>inet_stream_connect (2 samples, 0.07%)</title><rect x="1.1713%" y="437" width="0.0732%" height="15" fill="rgb(252,105,26)" fg:x="32" fg:w="2"/><text x="1.4213%" y="447.50"></text></g><g><title>__inet_stream_connect (2 samples, 0.07%)</title><rect x="1.1713%" y="421" width="0.0732%" height="15" fill="rgb(220,39,43)" fg:x="32" fg:w="2"/><text x="1.4213%" y="431.50"></text></g><g><title>tcp_v4_connect (2 samples, 0.07%)</title><rect x="1.1713%" y="405" width="0.0732%" height="15" fill="rgb(229,68,48)" fg:x="32" fg:w="2"/><text x="1.4213%" y="415.50"></text></g><g><title>tcp_connect (2 samples, 0.07%)</title><rect x="1.1713%" y="389" width="0.0732%" height="15" fill="rgb(252,8,32)" fg:x="32" fg:w="2"/><text x="1.4213%" y="399.50"></text></g><g><title>__tcp_transmit_skb (2 samples, 0.07%)</title><rect x="1.1713%" y="373" width="0.0732%" height="15" fill="rgb(223,20,43)" fg:x="32" fg:w="2"/><text x="1.4213%" y="383.50"></text></g><g><title>__ip_queue_xmit (2 samples, 0.07%)</title><rect x="1.1713%" y="357" width="0.0732%" height="15" fill="rgb(229,81,49)" fg:x="32" fg:w="2"/><text x="1.4213%" y="367.50"></text></g><g><title>ip_finish_output2 (1 samples, 0.04%)</title><rect x="1.2079%" y="341" width="0.0366%" height="15" fill="rgb(236,28,36)" fg:x="33" fg:w="1"/><text x="1.4579%" y="351.50"></text></g><g><title>__local_bh_enable_ip (1 samples, 0.04%)</title><rect x="1.2079%" y="325" width="0.0366%" height="15" fill="rgb(249,185,26)" fg:x="33" fg:w="1"/><text x="1.4579%" y="335.50"></text></g><g><title>do_softirq (1 samples, 0.04%)</title><rect x="1.2079%" y="309" width="0.0366%" height="15" fill="rgb(249,174,33)" fg:x="33" fg:w="1"/><text x="1.4579%" y="319.50"></text></g><g><title>do_softirq_own_stack (1 samples, 0.04%)</title><rect x="1.2079%" y="293" width="0.0366%" height="15" fill="rgb(233,201,37)" fg:x="33" fg:w="1"/><text x="1.4579%" y="303.50"></text></g><g><title>asm_call_sysvec_on_stack (1 samples, 0.04%)</title><rect x="1.2079%" y="277" width="0.0366%" height="15" fill="rgb(221,78,26)" fg:x="33" fg:w="1"/><text x="1.4579%" y="287.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="1.2079%" y="261" width="0.0366%" height="15" fill="rgb(250,127,30)" fg:x="33" fg:w="1"/><text x="1.4579%" y="271.50"></text></g><g><title>net_rx_action (1 samples, 0.04%)</title><rect x="1.2079%" y="245" width="0.0366%" height="15" fill="rgb(230,49,44)" fg:x="33" fg:w="1"/><text x="1.4579%" y="255.50"></text></g><g><title>process_backlog (1 samples, 0.04%)</title><rect x="1.2079%" y="229" width="0.0366%" height="15" fill="rgb(229,67,23)" fg:x="33" fg:w="1"/><text x="1.4579%" y="239.50"></text></g><g><title>__netif_receive_skb_one_core (1 samples, 0.04%)</title><rect x="1.2079%" y="213" width="0.0366%" height="15" fill="rgb(249,83,47)" fg:x="33" fg:w="1"/><text x="1.4579%" y="223.50"></text></g><g><title>ip_local_deliver_finish (1 samples, 0.04%)</title><rect x="1.2079%" y="197" width="0.0366%" height="15" fill="rgb(215,43,3)" fg:x="33" fg:w="1"/><text x="1.4579%" y="207.50"></text></g><g><title>ip_protocol_deliver_rcu (1 samples, 0.04%)</title><rect x="1.2079%" y="181" width="0.0366%" height="15" fill="rgb(238,154,13)" fg:x="33" fg:w="1"/><text x="1.4579%" y="191.50"></text></g><g><title>tcp_v4_rcv (1 samples, 0.04%)</title><rect x="1.2079%" y="165" width="0.0366%" height="15" fill="rgb(219,56,2)" fg:x="33" fg:w="1"/><text x="1.4579%" y="175.50"></text></g><g><title>tcp_v4_send_reset (1 samples, 0.04%)</title><rect x="1.2079%" y="149" width="0.0366%" height="15" fill="rgb(233,0,4)" fg:x="33" fg:w="1"/><text x="1.4579%" y="159.50"></text></g><g><title>ip_send_unicast_reply (1 samples, 0.04%)</title><rect x="1.2079%" y="133" width="0.0366%" height="15" fill="rgb(235,30,7)" fg:x="33" fg:w="1"/><text x="1.4579%" y="143.50"></text></g><g><title>ip_push_pending_frames (1 samples, 0.04%)</title><rect x="1.2079%" y="117" width="0.0366%" height="15" fill="rgb(250,79,13)" fg:x="33" fg:w="1"/><text x="1.4579%" y="127.50"></text></g><g><title>__ip_local_out (1 samples, 0.04%)</title><rect x="1.2079%" y="101" width="0.0366%" height="15" fill="rgb(211,146,34)" fg:x="33" fg:w="1"/><text x="1.4579%" y="111.50"></text></g><g><title>nf_hook_slow (1 samples, 0.04%)</title><rect x="1.2079%" y="85" width="0.0366%" height="15" fill="rgb(228,22,38)" fg:x="33" fg:w="1"/><text x="1.4579%" y="95.50"></text></g><g><title>nf_conntrack_in (1 samples, 0.04%)</title><rect x="1.2079%" y="69" width="0.0366%" height="15" fill="rgb(235,168,5)" fg:x="33" fg:w="1"/><text x="1.4579%" y="79.50"></text></g><g><title>nf_conntrack_tcp_packet (1 samples, 0.04%)</title><rect x="1.2079%" y="53" width="0.0366%" height="15" fill="rgb(221,155,16)" fg:x="33" fg:w="1"/><text x="1.4579%" y="63.50"></text></g><g><title>nf_ct_kill_acct (1 samples, 0.04%)</title><rect x="1.2079%" y="37" width="0.0366%" height="15" fill="rgb(215,215,53)" fg:x="33" fg:w="1"/><text x="1.4579%" y="47.50"></text></g><g><title>ZMQbg/Reaper (1 samples, 0.04%)</title><rect x="1.2445%" y="517" width="0.0366%" height="15" fill="rgb(223,4,10)" fg:x="34" fg:w="1"/><text x="1.4945%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="1.2445%" y="501" width="0.0366%" height="15" fill="rgb(234,103,6)" fg:x="34" fg:w="1"/><text x="1.4945%" y="511.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.04%)</title><rect x="1.2445%" y="485" width="0.0366%" height="15" fill="rgb(227,97,0)" fg:x="34" fg:w="1"/><text x="1.4945%" y="495.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.04%)</title><rect x="1.2445%" y="469" width="0.0366%" height="15" fill="rgb(234,150,53)" fg:x="34" fg:w="1"/><text x="1.4945%" y="479.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.04%)</title><rect x="1.2445%" y="453" width="0.0366%" height="15" fill="rgb(228,201,54)" fg:x="34" fg:w="1"/><text x="1.4945%" y="463.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.04%)</title><rect x="1.2445%" y="437" width="0.0366%" height="15" fill="rgb(222,22,37)" fg:x="34" fg:w="1"/><text x="1.4945%" y="447.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.04%)</title><rect x="1.2445%" y="421" width="0.0366%" height="15" fill="rgb(237,53,32)" fg:x="34" fg:w="1"/><text x="1.4945%" y="431.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.04%)</title><rect x="1.2445%" y="405" width="0.0366%" height="15" fill="rgb(233,25,53)" fg:x="34" fg:w="1"/><text x="1.4945%" y="415.50"></text></g><g><title>exc_page_fault (1 samples, 0.04%)</title><rect x="1.2445%" y="389" width="0.0366%" height="15" fill="rgb(210,40,34)" fg:x="34" fg:w="1"/><text x="1.4945%" y="399.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.04%)</title><rect x="1.2445%" y="373" width="0.0366%" height="15" fill="rgb(241,220,44)" fg:x="34" fg:w="1"/><text x="1.4945%" y="383.50"></text></g><g><title>handle_mm_fault (1 samples, 0.04%)</title><rect x="1.2445%" y="357" width="0.0366%" height="15" fill="rgb(235,28,35)" fg:x="34" fg:w="1"/><text x="1.4945%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.07%)</title><rect x="1.2811%" y="501" width="0.0732%" height="15" fill="rgb(210,56,17)" fg:x="35" fg:w="2"/><text x="1.5311%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.15%)</title><rect x="1.3543%" y="469" width="0.1464%" height="15" fill="rgb(224,130,29)" fg:x="37" fg:w="4"/><text x="1.6043%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.07%)</title><rect x="1.5007%" y="325" width="0.0732%" height="15" fill="rgb(235,212,8)" fg:x="41" fg:w="2"/><text x="1.7507%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.07%)</title><rect x="1.5007%" y="309" width="0.0732%" height="15" fill="rgb(223,33,50)" fg:x="41" fg:w="2"/><text x="1.7507%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.07%)</title><rect x="1.5007%" y="293" width="0.0732%" height="15" fill="rgb(219,149,13)" fg:x="41" fg:w="2"/><text x="1.7507%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.07%)</title><rect x="1.5007%" y="277" width="0.0732%" height="15" fill="rgb(250,156,29)" fg:x="41" fg:w="2"/><text x="1.7507%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.07%)</title><rect x="1.5007%" y="261" width="0.0732%" height="15" fill="rgb(216,193,19)" fg:x="41" fg:w="2"/><text x="1.7507%" y="271.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.07%)</title><rect x="1.5007%" y="245" width="0.0732%" height="15" fill="rgb(216,135,14)" fg:x="41" fg:w="2"/><text x="1.7507%" y="255.50"></text></g><g><title>__rdl_alloc (2 samples, 0.07%)</title><rect x="1.5007%" y="229" width="0.0732%" height="15" fill="rgb(241,47,5)" fg:x="41" fg:w="2"/><text x="1.7507%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.07%)</title><rect x="1.5007%" y="213" width="0.0732%" height="15" fill="rgb(233,42,35)" fg:x="41" fg:w="2"/><text x="1.7507%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.26%)</title><rect x="1.3543%" y="485" width="0.2562%" height="15" fill="rgb(231,13,6)" fg:x="37" fg:w="7"/><text x="1.6043%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.11%)</title><rect x="1.5007%" y="469" width="0.1098%" height="15" fill="rgb(207,181,40)" fg:x="41" fg:w="3"/><text x="1.7507%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.11%)</title><rect x="1.5007%" y="453" width="0.1098%" height="15" fill="rgb(254,173,49)" fg:x="41" fg:w="3"/><text x="1.7507%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.11%)</title><rect x="1.5007%" y="437" width="0.1098%" height="15" fill="rgb(221,1,38)" fg:x="41" fg:w="3"/><text x="1.7507%" y="447.50"></text></g><g><title>&lt;colmet_node::backends::metric::Metric as core::clone::Clone&gt;::clone (3 samples, 0.11%)</title><rect x="1.5007%" y="421" width="0.1098%" height="15" fill="rgb(206,124,46)" fg:x="41" fg:w="3"/><text x="1.7507%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.11%)</title><rect x="1.5007%" y="405" width="0.1098%" height="15" fill="rgb(249,21,11)" fg:x="41" fg:w="3"/><text x="1.7507%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.11%)</title><rect x="1.5007%" y="389" width="0.1098%" height="15" fill="rgb(222,201,40)" fg:x="41" fg:w="3"/><text x="1.7507%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.11%)</title><rect x="1.5007%" y="373" width="0.1098%" height="15" fill="rgb(235,61,29)" fg:x="41" fg:w="3"/><text x="1.7507%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.11%)</title><rect x="1.5007%" y="357" width="0.1098%" height="15" fill="rgb(219,207,3)" fg:x="41" fg:w="3"/><text x="1.7507%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.11%)</title><rect x="1.5007%" y="341" width="0.1098%" height="15" fill="rgb(222,56,46)" fg:x="41" fg:w="3"/><text x="1.7507%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.04%)</title><rect x="1.5739%" y="325" width="0.0366%" height="15" fill="rgb(239,76,54)" fg:x="43" fg:w="1"/><text x="1.8239%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="1.5739%" y="309" width="0.0366%" height="15" fill="rgb(231,124,27)" fg:x="43" fg:w="1"/><text x="1.8239%" y="319.50"></text></g><g><title>[libzmq.so.5.2.4] (25 samples, 0.92%)</title><rect x="1.6105%" y="485" width="0.9151%" height="15" fill="rgb(249,195,6)" fg:x="44" fg:w="25"/><text x="1.8605%" y="495.50"></text></g><g><title>__GI___clock_gettime (2 samples, 0.07%)</title><rect x="2.5256%" y="485" width="0.0732%" height="15" fill="rgb(237,174,47)" fg:x="69" fg:w="2"/><text x="2.7756%" y="495.50"></text></g><g><title>__GI___libc_free (7 samples, 0.26%)</title><rect x="2.5988%" y="485" width="0.2562%" height="15" fill="rgb(206,201,31)" fg:x="71" fg:w="7"/><text x="2.8488%" y="495.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.04%)</title><rect x="2.8551%" y="485" width="0.0366%" height="15" fill="rgb(231,57,52)" fg:x="78" fg:w="1"/><text x="3.1051%" y="495.50"></text></g><g><title>__GI___nanosleep (5 samples, 0.18%)</title><rect x="2.8917%" y="485" width="0.1830%" height="15" fill="rgb(248,177,22)" fg:x="79" fg:w="5"/><text x="3.1417%" y="495.50"></text></g><g><title>_int_free (9 samples, 0.33%)</title><rect x="3.0747%" y="485" width="0.3294%" height="15" fill="rgb(215,211,37)" fg:x="84" fg:w="9"/><text x="3.3247%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="3.6969%" y="469" width="0.0366%" height="15" fill="rgb(241,128,51)" fg:x="101" fg:w="1"/><text x="3.9469%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="3.6969%" y="453" width="0.0366%" height="15" fill="rgb(227,165,31)" fg:x="101" fg:w="1"/><text x="3.9469%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="3.6969%" y="437" width="0.0366%" height="15" fill="rgb(228,167,24)" fg:x="101" fg:w="1"/><text x="3.9469%" y="447.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.04%)</title><rect x="3.6969%" y="421" width="0.0366%" height="15" fill="rgb(228,143,12)" fg:x="101" fg:w="1"/><text x="3.9469%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.04%)</title><rect x="3.6969%" y="405" width="0.0366%" height="15" fill="rgb(249,149,8)" fg:x="101" fg:w="1"/><text x="3.9469%" y="415.50"></text></g><g><title>colmet_node::backends::BackendsManager::get_metrics_to_collect_now (1 samples, 0.04%)</title><rect x="3.7335%" y="469" width="0.0366%" height="15" fill="rgb(243,35,44)" fg:x="102" fg:w="1"/><text x="3.9835%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="3.7335%" y="453" width="0.0366%" height="15" fill="rgb(246,89,9)" fg:x="102" fg:w="1"/><text x="3.9835%" y="463.50"></text></g><g><title>[[heap]] (67 samples, 2.45%)</title><rect x="1.3543%" y="501" width="2.4524%" height="15" fill="rgb(233,213,13)" fg:x="37" fg:w="67"/><text x="1.6043%" y="511.50">[[..</text></g><g><title>colmet_node::backends::BackendsManager::make_measure (11 samples, 0.40%)</title><rect x="3.4041%" y="485" width="0.4026%" height="15" fill="rgb(233,141,41)" fg:x="93" fg:w="11"/><text x="3.6541%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,std::collections::hash::map::HashMap&lt;i32,alloc::vec::Vec&lt;colmet_node::backends::metric::Metric&gt;&gt;&gt;&gt; (1 samples, 0.04%)</title><rect x="3.7701%" y="469" width="0.0366%" height="15" fill="rgb(239,167,4)" fg:x="103" fg:w="1"/><text x="4.0201%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,std::collections::hash::map::HashMap&lt;i32,alloc::vec::Vec&lt;colmet_node::backends::metric::Metric&gt;&gt;,std::collections::hash::map::RandomState&gt;&gt; (1 samples, 0.04%)</title><rect x="3.7701%" y="453" width="0.0366%" height="15" fill="rgb(209,217,16)" fg:x="103" fg:w="1"/><text x="4.0201%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,std::collections::hash::map::HashMap&lt;i32,alloc::vec::Vec&lt;colmet_node::backends::metric::Metric&gt;&gt;)&gt;&gt; (1 samples, 0.04%)</title><rect x="3.7701%" y="437" width="0.0366%" height="15" fill="rgb(219,88,35)" fg:x="103" fg:w="1"/><text x="4.0201%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.07%)</title><rect x="3.8067%" y="485" width="0.0732%" height="15" fill="rgb(220,193,23)" fg:x="104" fg:w="2"/><text x="4.0567%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.15%)</title><rect x="3.8799%" y="485" width="0.1464%" height="15" fill="rgb(230,90,52)" fg:x="106" fg:w="4"/><text x="4.1299%" y="495.50"></text></g><g><title>[libzmq.so.5.2.4] (4 samples, 0.15%)</title><rect x="4.0264%" y="485" width="0.1464%" height="15" fill="rgb(252,106,19)" fg:x="110" fg:w="4"/><text x="4.2764%" y="495.50"></text></g><g><title>__GI___clock_gettime (4 samples, 0.15%)</title><rect x="4.1728%" y="485" width="0.1464%" height="15" fill="rgb(206,74,20)" fg:x="114" fg:w="4"/><text x="4.4228%" y="495.50"></text></g><g><title>__GI___clock_nanosleep (27 samples, 0.99%)</title><rect x="4.3192%" y="485" width="0.9883%" height="15" fill="rgb(230,138,44)" fg:x="118" fg:w="27"/><text x="4.5692%" y="495.50"></text></g><g><title>entry_SYSCALL_64 (27 samples, 0.99%)</title><rect x="4.3192%" y="469" width="0.9883%" height="15" fill="rgb(235,182,43)" fg:x="118" fg:w="27"/><text x="4.5692%" y="479.50"></text></g><g><title>__GI___libc_free (5 samples, 0.18%)</title><rect x="5.3075%" y="485" width="0.1830%" height="15" fill="rgb(242,16,51)" fg:x="145" fg:w="5"/><text x="5.5575%" y="495.50"></text></g><g><title>_int_free (3 samples, 0.11%)</title><rect x="5.4905%" y="485" width="0.1098%" height="15" fill="rgb(248,9,4)" fg:x="150" fg:w="3"/><text x="5.7405%" y="495.50"></text></g><g><title>[[stack]] (54 samples, 1.98%)</title><rect x="3.8067%" y="501" width="1.9766%" height="15" fill="rgb(210,31,22)" fg:x="104" fg:w="54"/><text x="4.0567%" y="511.50">[..</text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (5 samples, 0.18%)</title><rect x="5.6003%" y="485" width="0.1830%" height="15" fill="rgb(239,54,39)" fg:x="153" fg:w="5"/><text x="5.8503%" y="495.50"></text></g><g><title>[anon] (1 samples, 0.04%)</title><rect x="5.7833%" y="501" width="0.0366%" height="15" fill="rgb(230,99,41)" fg:x="158" fg:w="1"/><text x="6.0333%" y="511.50"></text></g><g><title>__run_exit_handlers (1 samples, 0.04%)</title><rect x="5.7833%" y="485" width="0.0366%" height="15" fill="rgb(253,106,12)" fg:x="158" fg:w="1"/><text x="6.0333%" y="495.50"></text></g><g><title>__do_global_dtors_aux (1 samples, 0.04%)</title><rect x="5.7833%" y="469" width="0.0366%" height="15" fill="rgb(213,46,41)" fg:x="158" fg:w="1"/><text x="6.0333%" y="479.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.04%)</title><rect x="5.7833%" y="453" width="0.0366%" height="15" fill="rgb(215,133,35)" fg:x="158" fg:w="1"/><text x="6.0333%" y="463.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.04%)</title><rect x="5.7833%" y="437" width="0.0366%" height="15" fill="rgb(213,28,5)" fg:x="158" fg:w="1"/><text x="6.0333%" y="447.50"></text></g><g><title>[libzmq.so.5.2.4] (11 samples, 0.40%)</title><rect x="5.8199%" y="501" width="0.4026%" height="15" fill="rgb(215,77,49)" fg:x="159" fg:w="11"/><text x="6.0699%" y="511.50"></text></g><g><title>[libzmq.so.5.2.4] (11 samples, 0.40%)</title><rect x="5.8199%" y="485" width="0.4026%" height="15" fill="rgb(248,100,22)" fg:x="159" fg:w="11"/><text x="6.0699%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.04%)</title><rect x="6.2225%" y="485" width="0.0366%" height="15" fill="rgb(208,67,9)" fg:x="170" fg:w="1"/><text x="6.4725%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.29%)</title><rect x="6.2592%" y="485" width="0.2928%" height="15" fill="rgb(219,133,21)" fg:x="171" fg:w="8"/><text x="6.5092%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::is_empty_singleton (8 samples, 0.29%)</title><rect x="6.2592%" y="469" width="0.2928%" height="15" fill="rgb(246,46,29)" fg:x="171" fg:w="8"/><text x="6.5092%" y="479.50"></text></g><g><title>[libzmq.so.5.2.4] (19 samples, 0.70%)</title><rect x="6.5520%" y="485" width="0.6955%" height="15" fill="rgb(246,185,52)" fg:x="179" fg:w="19"/><text x="6.8020%" y="495.50"></text></g><g><title>__GI___clock_gettime (6 samples, 0.22%)</title><rect x="7.2474%" y="485" width="0.2196%" height="15" fill="rgb(252,136,11)" fg:x="198" fg:w="6"/><text x="7.4974%" y="495.50"></text></g><g><title>__GI___libc_free (1 samples, 0.04%)</title><rect x="7.4671%" y="485" width="0.0366%" height="15" fill="rgb(219,138,53)" fg:x="204" fg:w="1"/><text x="7.7171%" y="495.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.26%)</title><rect x="7.5037%" y="485" width="0.2562%" height="15" fill="rgb(211,51,23)" fg:x="205" fg:w="7"/><text x="7.7537%" y="495.50"></text></g><g><title>__GI___nanosleep (2 samples, 0.07%)</title><rect x="7.7599%" y="485" width="0.0732%" height="15" fill="rgb(247,221,28)" fg:x="212" fg:w="2"/><text x="8.0099%" y="495.50"></text></g><g><title>__GI___poll (33 samples, 1.21%)</title><rect x="7.8331%" y="485" width="1.2079%" height="15" fill="rgb(251,222,45)" fg:x="214" fg:w="33"/><text x="8.0831%" y="495.50"></text></g><g><title>entry_SYSCALL_64 (32 samples, 1.17%)</title><rect x="7.8697%" y="469" width="1.1713%" height="15" fill="rgb(217,162,53)" fg:x="215" fg:w="32"/><text x="8.1197%" y="479.50"></text></g><g><title>__memset_avx2_unaligned_erms (2 samples, 0.07%)</title><rect x="9.0410%" y="485" width="0.0732%" height="15" fill="rgb(229,93,14)" fg:x="247" fg:w="2"/><text x="9.2910%" y="495.50"></text></g><g><title>__vdso_clock_gettime (4 samples, 0.15%)</title><rect x="9.1142%" y="485" width="0.1464%" height="15" fill="rgb(209,67,49)" fg:x="249" fg:w="4"/><text x="9.3642%" y="495.50"></text></g><g><title>_int_free (2 samples, 0.07%)</title><rect x="9.2606%" y="485" width="0.0732%" height="15" fill="rgb(213,87,29)" fg:x="253" fg:w="2"/><text x="9.5106%" y="495.50"></text></g><g><title>checked_request2size (1 samples, 0.04%)</title><rect x="10.3587%" y="245" width="0.0366%" height="15" fill="rgb(205,151,52)" fg:x="283" fg:w="1"/><text x="10.6087%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (26 samples, 0.95%)</title><rect x="9.7731%" y="389" width="0.9517%" height="15" fill="rgb(253,215,39)" fg:x="267" fg:w="26"/><text x="10.0231%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (26 samples, 0.95%)</title><rect x="9.7731%" y="373" width="0.9517%" height="15" fill="rgb(221,220,41)" fg:x="267" fg:w="26"/><text x="10.0231%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (26 samples, 0.95%)</title><rect x="9.7731%" y="357" width="0.9517%" height="15" fill="rgb(218,133,21)" fg:x="267" fg:w="26"/><text x="10.0231%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (26 samples, 0.95%)</title><rect x="9.7731%" y="341" width="0.9517%" height="15" fill="rgb(221,193,43)" fg:x="267" fg:w="26"/><text x="10.0231%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (26 samples, 0.95%)</title><rect x="9.7731%" y="325" width="0.9517%" height="15" fill="rgb(240,128,52)" fg:x="267" fg:w="26"/><text x="10.0231%" y="335.50"></text></g><g><title>alloc::alloc::alloc (26 samples, 0.95%)</title><rect x="9.7731%" y="309" width="0.9517%" height="15" fill="rgb(253,114,12)" fg:x="267" fg:w="26"/><text x="10.0231%" y="319.50"></text></g><g><title>__rdl_alloc (26 samples, 0.95%)</title><rect x="9.7731%" y="293" width="0.9517%" height="15" fill="rgb(215,223,47)" fg:x="267" fg:w="26"/><text x="10.0231%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (26 samples, 0.95%)</title><rect x="9.7731%" y="277" width="0.9517%" height="15" fill="rgb(248,225,23)" fg:x="267" fg:w="26"/><text x="10.0231%" y="287.50"></text></g><g><title>__GI___libc_malloc (26 samples, 0.95%)</title><rect x="9.7731%" y="261" width="0.9517%" height="15" fill="rgb(250,108,0)" fg:x="267" fg:w="26"/><text x="10.0231%" y="271.50"></text></g><g><title>tcache_get (9 samples, 0.33%)</title><rect x="10.3953%" y="245" width="0.3294%" height="15" fill="rgb(228,208,7)" fg:x="284" fg:w="9"/><text x="10.6453%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (32 samples, 1.17%)</title><rect x="9.7365%" y="469" width="1.1713%" height="15" fill="rgb(244,45,10)" fg:x="266" fg:w="32"/><text x="9.9865%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (31 samples, 1.13%)</title><rect x="9.7731%" y="453" width="1.1347%" height="15" fill="rgb(207,125,25)" fg:x="267" fg:w="31"/><text x="10.0231%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (31 samples, 1.13%)</title><rect x="9.7731%" y="437" width="1.1347%" height="15" fill="rgb(210,195,18)" fg:x="267" fg:w="31"/><text x="10.0231%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (31 samples, 1.13%)</title><rect x="9.7731%" y="421" width="1.1347%" height="15" fill="rgb(249,80,12)" fg:x="267" fg:w="31"/><text x="10.0231%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (31 samples, 1.13%)</title><rect x="9.7731%" y="405" width="1.1347%" height="15" fill="rgb(221,65,9)" fg:x="267" fg:w="31"/><text x="10.0231%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (5 samples, 0.18%)</title><rect x="10.7247%" y="389" width="0.1830%" height="15" fill="rgb(235,49,36)" fg:x="293" fg:w="5"/><text x="10.9747%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.18%)</title><rect x="10.7247%" y="373" width="0.1830%" height="15" fill="rgb(225,32,20)" fg:x="293" fg:w="5"/><text x="10.9747%" y="383.50"></text></g><g><title>__memmove_avx_unaligned_erms (5 samples, 0.18%)</title><rect x="10.7247%" y="357" width="0.1830%" height="15" fill="rgb(215,141,46)" fg:x="293" fg:w="5"/><text x="10.9747%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.07%)</title><rect x="10.9078%" y="453" width="0.0732%" height="15" fill="rgb(250,160,47)" fg:x="298" fg:w="2"/><text x="11.1578%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="10.9810%" y="357" width="0.0366%" height="15" fill="rgb(216,222,40)" fg:x="300" fg:w="1"/><text x="11.2310%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="10.9810%" y="341" width="0.0366%" height="15" fill="rgb(234,217,39)" fg:x="300" fg:w="1"/><text x="11.2310%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.04%)</title><rect x="10.9810%" y="325" width="0.0366%" height="15" fill="rgb(207,178,40)" fg:x="300" fg:w="1"/><text x="11.2310%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="10.9810%" y="309" width="0.0366%" height="15" fill="rgb(221,136,13)" fg:x="300" fg:w="1"/><text x="11.2310%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="10.9810%" y="293" width="0.0366%" height="15" fill="rgb(249,199,10)" fg:x="300" fg:w="1"/><text x="11.2310%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="10.9810%" y="277" width="0.0366%" height="15" fill="rgb(249,222,13)" fg:x="300" fg:w="1"/><text x="11.2310%" y="287.50"></text></g><g><title>__rdl_alloc (1 samples, 0.04%)</title><rect x="10.9810%" y="261" width="0.0366%" height="15" fill="rgb(244,185,38)" fg:x="300" fg:w="1"/><text x="11.2310%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.04%)</title><rect x="10.9810%" y="245" width="0.0366%" height="15" fill="rgb(236,202,9)" fg:x="300" fg:w="1"/><text x="11.2310%" y="255.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.04%)</title><rect x="10.9810%" y="229" width="0.0366%" height="15" fill="rgb(250,229,37)" fg:x="300" fg:w="1"/><text x="11.2310%" y="239.50"></text></g><g><title>&lt;colmet_node::backends::metric::Metric as core::clone::Clone&gt;::clone (5 samples, 0.18%)</title><rect x="10.9810%" y="453" width="0.1830%" height="15" fill="rgb(206,174,23)" fg:x="300" fg:w="5"/><text x="11.2310%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (5 samples, 0.18%)</title><rect x="10.9810%" y="437" width="0.1830%" height="15" fill="rgb(211,33,43)" fg:x="300" fg:w="5"/><text x="11.2310%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.18%)</title><rect x="10.9810%" y="421" width="0.1830%" height="15" fill="rgb(245,58,50)" fg:x="300" fg:w="5"/><text x="11.2310%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.18%)</title><rect x="10.9810%" y="405" width="0.1830%" height="15" fill="rgb(244,68,36)" fg:x="300" fg:w="5"/><text x="11.2310%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.18%)</title><rect x="10.9810%" y="389" width="0.1830%" height="15" fill="rgb(232,229,15)" fg:x="300" fg:w="5"/><text x="11.2310%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.18%)</title><rect x="10.9810%" y="373" width="0.1830%" height="15" fill="rgb(254,30,23)" fg:x="300" fg:w="5"/><text x="11.2310%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4 samples, 0.15%)</title><rect x="11.0176%" y="357" width="0.1464%" height="15" fill="rgb(235,160,14)" fg:x="301" fg:w="4"/><text x="11.2676%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.15%)</title><rect x="11.0176%" y="341" width="0.1464%" height="15" fill="rgb(212,155,44)" fg:x="301" fg:w="4"/><text x="11.2676%" y="351.50"></text></g><g><title>__memmove_avx_unaligned_erms (4 samples, 0.15%)</title><rect x="11.0176%" y="325" width="0.1464%" height="15" fill="rgb(226,2,50)" fg:x="301" fg:w="4"/><text x="11.2676%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="11.3470%" y="405" width="0.0366%" height="15" fill="rgb(234,177,6)" fg:x="310" fg:w="1"/><text x="11.5970%" y="415.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (1 samples, 0.04%)</title><rect x="11.3470%" y="389" width="0.0366%" height="15" fill="rgb(217,24,9)" fg:x="310" fg:w="1"/><text x="11.5970%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (1 samples, 0.04%)</title><rect x="11.3470%" y="373" width="0.0366%" height="15" fill="rgb(220,13,46)" fg:x="310" fg:w="1"/><text x="11.5970%" y="383.50"></text></g><g><title>colmet_node::backends::BackendsManager::sort_waiting_metrics (7 samples, 0.26%)</title><rect x="11.1640%" y="453" width="0.2562%" height="15" fill="rgb(239,221,27)" fg:x="305" fg:w="7"/><text x="11.4140%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key (2 samples, 0.07%)</title><rect x="11.3470%" y="437" width="0.0732%" height="15" fill="rgb(222,198,25)" fg:x="310" fg:w="2"/><text x="11.5970%" y="447.50"></text></g><g><title>alloc::slice::merge_sort (2 samples, 0.07%)</title><rect x="11.3470%" y="421" width="0.0732%" height="15" fill="rgb(211,99,13)" fg:x="310" fg:w="2"/><text x="11.5970%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.04%)</title><rect x="11.3836%" y="405" width="0.0366%" height="15" fill="rgb(232,111,31)" fg:x="311" fg:w="1"/><text x="11.6336%" y="415.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="11.3836%" y="389" width="0.0366%" height="15" fill="rgb(245,82,37)" fg:x="311" fg:w="1"/><text x="11.6336%" y="399.50"></text></g><g><title>__GI___libc_free (4 samples, 0.15%)</title><rect x="11.4202%" y="309" width="0.1464%" height="15" fill="rgb(227,149,46)" fg:x="312" fg:w="4"/><text x="11.6702%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;colmet_node::backends::metric::Metric&gt; (6 samples, 0.22%)</title><rect x="11.4202%" y="453" width="0.2196%" height="15" fill="rgb(218,36,50)" fg:x="312" fg:w="6"/><text x="11.6702%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (6 samples, 0.22%)</title><rect x="11.4202%" y="437" width="0.2196%" height="15" fill="rgb(226,80,48)" fg:x="312" fg:w="6"/><text x="11.6702%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (6 samples, 0.22%)</title><rect x="11.4202%" y="421" width="0.2196%" height="15" fill="rgb(238,224,15)" fg:x="312" fg:w="6"/><text x="11.6702%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (6 samples, 0.22%)</title><rect x="11.4202%" y="405" width="0.2196%" height="15" fill="rgb(241,136,10)" fg:x="312" fg:w="6"/><text x="11.6702%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.22%)</title><rect x="11.4202%" y="389" width="0.2196%" height="15" fill="rgb(208,32,45)" fg:x="312" fg:w="6"/><text x="11.6702%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.22%)</title><rect x="11.4202%" y="373" width="0.2196%" height="15" fill="rgb(207,135,9)" fg:x="312" fg:w="6"/><text x="11.6702%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.22%)</title><rect x="11.4202%" y="357" width="0.2196%" height="15" fill="rgb(206,86,44)" fg:x="312" fg:w="6"/><text x="11.6702%" y="367.50"></text></g><g><title>__rdl_dealloc (6 samples, 0.22%)</title><rect x="11.4202%" y="341" width="0.2196%" height="15" fill="rgb(245,177,15)" fg:x="312" fg:w="6"/><text x="11.6702%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (6 samples, 0.22%)</title><rect x="11.4202%" y="325" width="0.2196%" height="15" fill="rgb(206,64,50)" fg:x="312" fg:w="6"/><text x="11.6702%" y="335.50"></text></g><g><title>_int_free (2 samples, 0.07%)</title><rect x="11.5666%" y="309" width="0.0732%" height="15" fill="rgb(234,36,40)" fg:x="316" fg:w="2"/><text x="11.8166%" y="319.50"></text></g><g><title>colmet_node::backends::BackendsManager::get_sleep_time (25 samples, 0.92%)</title><rect x="10.9078%" y="469" width="0.9151%" height="15" fill="rgb(213,64,8)" fg:x="298" fg:w="25"/><text x="11.1578%" y="479.50"></text></g><g><title>log::max_level (5 samples, 0.18%)</title><rect x="11.6398%" y="453" width="0.1830%" height="15" fill="rgb(210,75,36)" fg:x="318" fg:w="5"/><text x="11.8898%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (5 samples, 0.18%)</title><rect x="11.6398%" y="437" width="0.1830%" height="15" fill="rgb(229,88,21)" fg:x="318" fg:w="5"/><text x="11.8898%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (5 samples, 0.18%)</title><rect x="11.6398%" y="421" width="0.1830%" height="15" fill="rgb(252,204,47)" fg:x="318" fg:w="5"/><text x="11.8898%" y="431.50"></text></g><g><title>__GI___libc_free (4 samples, 0.15%)</title><rect x="12.1889%" y="373" width="0.1464%" height="15" fill="rgb(208,77,27)" fg:x="333" fg:w="4"/><text x="12.4389%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.44%)</title><rect x="12.1157%" y="453" width="0.4392%" height="15" fill="rgb(221,76,26)" fg:x="331" fg:w="12"/><text x="12.3657%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (10 samples, 0.37%)</title><rect x="12.1889%" y="437" width="0.3660%" height="15" fill="rgb(225,139,18)" fg:x="333" fg:w="10"/><text x="12.4389%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (10 samples, 0.37%)</title><rect x="12.1889%" y="421" width="0.3660%" height="15" fill="rgb(230,137,11)" fg:x="333" fg:w="10"/><text x="12.4389%" y="431.50"></text></g><g><title>__rdl_dealloc (10 samples, 0.37%)</title><rect x="12.1889%" y="405" width="0.3660%" height="15" fill="rgb(212,28,1)" fg:x="333" fg:w="10"/><text x="12.4389%" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (10 samples, 0.37%)</title><rect x="12.1889%" y="389" width="0.3660%" height="15" fill="rgb(248,164,17)" fg:x="333" fg:w="10"/><text x="12.4389%" y="399.50"></text></g><g><title>_int_free (6 samples, 0.22%)</title><rect x="12.3353%" y="373" width="0.2196%" height="15" fill="rgb(222,171,42)" fg:x="337" fg:w="6"/><text x="12.5853%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (8 samples, 0.29%)</title><rect x="12.5549%" y="437" width="0.2928%" height="15" fill="rgb(243,84,45)" fg:x="343" fg:w="8"/><text x="12.8049%" y="447.50"></text></g><g><title>checked_request2size (3 samples, 0.11%)</title><rect x="13.7994%" y="149" width="0.1098%" height="15" fill="rgb(252,49,23)" fg:x="377" fg:w="3"/><text x="14.0494%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (28 samples, 1.02%)</title><rect x="13.3602%" y="293" width="1.0249%" height="15" fill="rgb(215,19,7)" fg:x="365" fg:w="28"/><text x="13.6102%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (28 samples, 1.02%)</title><rect x="13.3602%" y="277" width="1.0249%" height="15" fill="rgb(238,81,41)" fg:x="365" fg:w="28"/><text x="13.6102%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (28 samples, 1.02%)</title><rect x="13.3602%" y="261" width="1.0249%" height="15" fill="rgb(210,199,37)" fg:x="365" fg:w="28"/><text x="13.6102%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (27 samples, 0.99%)</title><rect x="13.3968%" y="245" width="0.9883%" height="15" fill="rgb(244,192,49)" fg:x="366" fg:w="27"/><text x="13.6468%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (27 samples, 0.99%)</title><rect x="13.3968%" y="229" width="0.9883%" height="15" fill="rgb(226,211,11)" fg:x="366" fg:w="27"/><text x="13.6468%" y="239.50"></text></g><g><title>alloc::alloc::alloc (25 samples, 0.92%)</title><rect x="13.4700%" y="213" width="0.9151%" height="15" fill="rgb(236,162,54)" fg:x="368" fg:w="25"/><text x="13.7200%" y="223.50"></text></g><g><title>__rdl_alloc (25 samples, 0.92%)</title><rect x="13.4700%" y="197" width="0.9151%" height="15" fill="rgb(220,229,9)" fg:x="368" fg:w="25"/><text x="13.7200%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (25 samples, 0.92%)</title><rect x="13.4700%" y="181" width="0.9151%" height="15" fill="rgb(250,87,22)" fg:x="368" fg:w="25"/><text x="13.7200%" y="191.50"></text></g><g><title>__GI___libc_malloc (24 samples, 0.88%)</title><rect x="13.5066%" y="165" width="0.8785%" height="15" fill="rgb(239,43,17)" fg:x="369" fg:w="24"/><text x="13.7566%" y="175.50"></text></g><g><title>tcache_get (13 samples, 0.48%)</title><rect x="13.9092%" y="149" width="0.4758%" height="15" fill="rgb(231,177,25)" fg:x="380" fg:w="13"/><text x="14.1592%" y="159.50"></text></g><g><title>&lt;colmet_node::backends::metric::Metric as core::clone::Clone&gt;::clone (50 samples, 1.83%)</title><rect x="12.8843%" y="389" width="1.8302%" height="15" fill="rgb(219,179,1)" fg:x="352" fg:w="50"/><text x="13.1343%" y="399.50">&lt;..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (40 samples, 1.46%)</title><rect x="13.2504%" y="373" width="1.4641%" height="15" fill="rgb(238,219,53)" fg:x="362" fg:w="40"/><text x="13.5004%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (37 samples, 1.35%)</title><rect x="13.3602%" y="357" width="1.3543%" height="15" fill="rgb(232,167,36)" fg:x="365" fg:w="37"/><text x="13.6102%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (37 samples, 1.35%)</title><rect x="13.3602%" y="341" width="1.3543%" height="15" fill="rgb(244,19,51)" fg:x="365" fg:w="37"/><text x="13.6102%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (37 samples, 1.35%)</title><rect x="13.3602%" y="325" width="1.3543%" height="15" fill="rgb(224,6,22)" fg:x="365" fg:w="37"/><text x="13.6102%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (37 samples, 1.35%)</title><rect x="13.3602%" y="309" width="1.3543%" height="15" fill="rgb(224,145,5)" fg:x="365" fg:w="37"/><text x="13.6102%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (9 samples, 0.33%)</title><rect x="14.3851%" y="293" width="0.3294%" height="15" fill="rgb(234,130,49)" fg:x="393" fg:w="9"/><text x="14.6351%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.33%)</title><rect x="14.3851%" y="277" width="0.3294%" height="15" fill="rgb(254,6,2)" fg:x="393" fg:w="9"/><text x="14.6351%" y="287.50"></text></g><g><title>__memmove_avx_unaligned_erms (9 samples, 0.33%)</title><rect x="14.3851%" y="261" width="0.3294%" height="15" fill="rgb(208,96,46)" fg:x="393" fg:w="9"/><text x="14.6351%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.26%)</title><rect x="14.7145%" y="389" width="0.2562%" height="15" fill="rgb(239,3,39)" fg:x="402" fg:w="7"/><text x="14.9645%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.22%)</title><rect x="14.7511%" y="373" width="0.2196%" height="15" fill="rgb(233,210,1)" fg:x="403" fg:w="6"/><text x="15.0011%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.22%)</title><rect x="14.7511%" y="357" width="0.2196%" height="15" fill="rgb(244,137,37)" fg:x="403" fg:w="6"/><text x="15.0011%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.22%)</title><rect x="14.7511%" y="341" width="0.2196%" height="15" fill="rgb(240,136,2)" fg:x="403" fg:w="6"/><text x="15.0011%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.22%)</title><rect x="14.7511%" y="325" width="0.2196%" height="15" fill="rgb(239,18,37)" fg:x="403" fg:w="6"/><text x="15.0011%" y="335.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.22%)</title><rect x="14.7511%" y="309" width="0.2196%" height="15" fill="rgb(218,185,22)" fg:x="403" fg:w="6"/><text x="15.0011%" y="319.50"></text></g><g><title>__rdl_alloc (6 samples, 0.22%)</title><rect x="14.7511%" y="293" width="0.2196%" height="15" fill="rgb(225,218,4)" fg:x="403" fg:w="6"/><text x="15.0011%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6 samples, 0.22%)</title><rect x="14.7511%" y="277" width="0.2196%" height="15" fill="rgb(230,182,32)" fg:x="403" fg:w="6"/><text x="15.0011%" y="287.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.22%)</title><rect x="14.7511%" y="261" width="0.2196%" height="15" fill="rgb(242,56,43)" fg:x="403" fg:w="6"/><text x="15.0011%" y="271.50"></text></g><g><title>tcache_get (6 samples, 0.22%)</title><rect x="14.7511%" y="245" width="0.2196%" height="15" fill="rgb(233,99,24)" fg:x="403" fg:w="6"/><text x="15.0011%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (69 samples, 2.53%)</title><rect x="12.5549%" y="453" width="2.5256%" height="15" fill="rgb(234,209,42)" fg:x="343" fg:w="69"/><text x="12.8049%" y="463.50">&lt;a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (61 samples, 2.23%)</title><rect x="12.8477%" y="437" width="2.2328%" height="15" fill="rgb(227,7,12)" fg:x="351" fg:w="61"/><text x="13.0977%" y="447.50">a..</text></g><g><title>alloc::slice::hack::to_vec (61 samples, 2.23%)</title><rect x="12.8477%" y="421" width="2.2328%" height="15" fill="rgb(245,203,43)" fg:x="351" fg:w="61"/><text x="13.0977%" y="431.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (61 samples, 2.23%)</title><rect x="12.8477%" y="405" width="2.2328%" height="15" fill="rgb(238,205,33)" fg:x="351" fg:w="61"/><text x="13.0977%" y="415.50">&lt;..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (3 samples, 0.11%)</title><rect x="14.9707%" y="389" width="0.1098%" height="15" fill="rgb(231,56,7)" fg:x="409" fg:w="3"/><text x="15.2207%" y="399.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.15%)</title><rect x="15.0805%" y="453" width="0.1464%" height="15" fill="rgb(244,186,29)" fg:x="412" fg:w="4"/><text x="15.3305%" y="463.50"></text></g><g><title>core::ptr::read (1 samples, 0.04%)</title><rect x="15.1903%" y="437" width="0.0366%" height="15" fill="rgb(234,111,31)" fg:x="415" fg:w="1"/><text x="15.4403%" y="447.50"></text></g><g><title>&lt;colmet_node::backends::METRICS_VERSION as core::ops::deref::Deref&gt;::deref (2 samples, 0.07%)</title><rect x="15.2269%" y="453" width="0.0732%" height="15" fill="rgb(241,149,10)" fg:x="416" fg:w="2"/><text x="15.4769%" y="463.50"></text></g><g><title>&lt;colmet_node::backends::METRICS_VERSION as core::ops::deref::Deref&gt;::deref::__stability (2 samples, 0.07%)</title><rect x="15.2269%" y="437" width="0.0732%" height="15" fill="rgb(249,206,44)" fg:x="416" fg:w="2"/><text x="15.4769%" y="447.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (2 samples, 0.07%)</title><rect x="15.2269%" y="421" width="0.0732%" height="15" fill="rgb(251,153,30)" fg:x="416" fg:w="2"/><text x="15.4769%" y="431.50"></text></g><g><title>std::sync::once::Once::call_once (2 samples, 0.07%)</title><rect x="15.2269%" y="405" width="0.0732%" height="15" fill="rgb(239,152,38)" fg:x="416" fg:w="2"/><text x="15.4769%" y="415.50"></text></g><g><title>std::sync::once::Once::is_completed (2 samples, 0.07%)</title><rect x="15.2269%" y="389" width="0.0732%" height="15" fill="rgb(249,139,47)" fg:x="416" fg:w="2"/><text x="15.4769%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (2 samples, 0.07%)</title><rect x="15.2269%" y="373" width="0.0732%" height="15" fill="rgb(244,64,35)" fg:x="416" fg:w="2"/><text x="15.4769%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.07%)</title><rect x="15.2269%" y="357" width="0.0732%" height="15" fill="rgb(216,46,15)" fg:x="416" fg:w="2"/><text x="15.4769%" y="367.50"></text></g><g><title>do_syscall_64 (1 samples, 0.04%)</title><rect x="15.3001%" y="245" width="0.0366%" height="15" fill="rgb(250,74,19)" fg:x="418" fg:w="1"/><text x="15.5501%" y="255.50"></text></g><g><title>ksys_read (1 samples, 0.04%)</title><rect x="15.3001%" y="229" width="0.0366%" height="15" fill="rgb(249,42,33)" fg:x="418" fg:w="1"/><text x="15.5501%" y="239.50"></text></g><g><title>vfs_read (1 samples, 0.04%)</title><rect x="15.3001%" y="213" width="0.0366%" height="15" fill="rgb(242,149,17)" fg:x="418" fg:w="1"/><text x="15.5501%" y="223.50"></text></g><g><title>new_sync_read (1 samples, 0.04%)</title><rect x="15.3001%" y="197" width="0.0366%" height="15" fill="rgb(244,29,21)" fg:x="418" fg:w="1"/><text x="15.5501%" y="207.50"></text></g><g><title>seq_read_iter (1 samples, 0.04%)</title><rect x="15.3001%" y="181" width="0.0366%" height="15" fill="rgb(220,130,37)" fg:x="418" fg:w="1"/><text x="15.5501%" y="191.50"></text></g><g><title>cpu_cfs_stat_show (1 samples, 0.04%)</title><rect x="15.3001%" y="165" width="0.0366%" height="15" fill="rgb(211,67,2)" fg:x="418" fg:w="1"/><text x="15.5501%" y="175.50"></text></g><g><title>seq_printf (1 samples, 0.04%)</title><rect x="15.3001%" y="149" width="0.0366%" height="15" fill="rgb(235,68,52)" fg:x="418" fg:w="1"/><text x="15.5501%" y="159.50"></text></g><g><title>vsnprintf (1 samples, 0.04%)</title><rect x="15.3001%" y="133" width="0.0366%" height="15" fill="rgb(246,142,3)" fg:x="418" fg:w="1"/><text x="15.5501%" y="143.50"></text></g><g><title>number (1 samples, 0.04%)</title><rect x="15.3001%" y="117" width="0.0366%" height="15" fill="rgb(241,25,7)" fg:x="418" fg:w="1"/><text x="15.5501%" y="127.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_string (2 samples, 0.07%)</title><rect x="15.3001%" y="421" width="0.0732%" height="15" fill="rgb(242,119,39)" fg:x="418" fg:w="2"/><text x="15.5501%" y="431.50"></text></g><g><title>std::io::default_read_to_string (2 samples, 0.07%)</title><rect x="15.3001%" y="405" width="0.0732%" height="15" fill="rgb(241,98,45)" fg:x="418" fg:w="2"/><text x="15.5501%" y="415.50"></text></g><g><title>std::io::append_to_string (2 samples, 0.07%)</title><rect x="15.3001%" y="389" width="0.0732%" height="15" fill="rgb(254,28,30)" fg:x="418" fg:w="2"/><text x="15.5501%" y="399.50"></text></g><g><title>std::io::default_read_to_string::{{closure}} (2 samples, 0.07%)</title><rect x="15.3001%" y="373" width="0.0732%" height="15" fill="rgb(241,142,54)" fg:x="418" fg:w="2"/><text x="15.5501%" y="383.50"></text></g><g><title>std::io::default_read_to_end (2 samples, 0.07%)</title><rect x="15.3001%" y="357" width="0.0732%" height="15" fill="rgb(222,85,15)" fg:x="418" fg:w="2"/><text x="15.5501%" y="367.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (2 samples, 0.07%)</title><rect x="15.3001%" y="341" width="0.0732%" height="15" fill="rgb(210,85,47)" fg:x="418" fg:w="2"/><text x="15.5501%" y="351.50"></text></g><g><title>std::sys::unix::fs::File::read_buf (2 samples, 0.07%)</title><rect x="15.3001%" y="325" width="0.0732%" height="15" fill="rgb(224,206,25)" fg:x="418" fg:w="2"/><text x="15.5501%" y="335.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (2 samples, 0.07%)</title><rect x="15.3001%" y="309" width="0.0732%" height="15" fill="rgb(243,201,19)" fg:x="418" fg:w="2"/><text x="15.5501%" y="319.50"></text></g><g><title>__libc_read (2 samples, 0.07%)</title><rect x="15.3001%" y="293" width="0.0732%" height="15" fill="rgb(236,59,4)" fg:x="418" fg:w="2"/><text x="15.5501%" y="303.50"></text></g><g><title>__libc_read (2 samples, 0.07%)</title><rect x="15.3001%" y="277" width="0.0732%" height="15" fill="rgb(254,179,45)" fg:x="418" fg:w="2"/><text x="15.5501%" y="287.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.07%)</title><rect x="15.3001%" y="261" width="0.0732%" height="15" fill="rgb(226,14,10)" fg:x="418" fg:w="2"/><text x="15.5501%" y="271.50"></text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.04%)</title><rect x="15.3367%" y="245" width="0.0366%" height="15" fill="rgb(244,27,41)" fg:x="419" fg:w="1"/><text x="15.5867%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.04%)</title><rect x="15.3734%" y="421" width="0.0366%" height="15" fill="rgb(235,35,32)" fg:x="420" fg:w="1"/><text x="15.6234%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.04%)</title><rect x="15.3734%" y="405" width="0.0366%" height="15" fill="rgb(218,68,31)" fg:x="420" fg:w="1"/><text x="15.6234%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.04%)</title><rect x="15.3734%" y="389" width="0.0366%" height="15" fill="rgb(207,120,37)" fg:x="420" fg:w="1"/><text x="15.6234%" y="399.50"></text></g><g><title>colmet_node::backends::cpu::get_metric_values (4 samples, 0.15%)</title><rect x="15.3001%" y="437" width="0.1464%" height="15" fill="rgb(227,98,0)" fg:x="418" fg:w="4"/><text x="15.5501%" y="447.50"></text></g><g><title>std::fs::File::open (1 samples, 0.04%)</title><rect x="15.4100%" y="421" width="0.0366%" height="15" fill="rgb(207,7,3)" fg:x="421" fg:w="1"/><text x="15.6600%" y="431.50"></text></g><g><title>std::fs::OpenOptions::open (1 samples, 0.04%)</title><rect x="15.4100%" y="405" width="0.0366%" height="15" fill="rgb(206,98,19)" fg:x="421" fg:w="1"/><text x="15.6600%" y="415.50"></text></g><g><title>std::fs::OpenOptions::_open (1 samples, 0.04%)</title><rect x="15.4100%" y="389" width="0.0366%" height="15" fill="rgb(217,5,26)" fg:x="421" fg:w="1"/><text x="15.6600%" y="399.50"></text></g><g><title>std::sys::unix::fs::File::open (1 samples, 0.04%)</title><rect x="15.4100%" y="373" width="0.0366%" height="15" fill="rgb(235,190,38)" fg:x="421" fg:w="1"/><text x="15.6600%" y="383.50"></text></g><g><title>std::sys::unix::fs::File::open_c (1 samples, 0.04%)</title><rect x="15.4100%" y="357" width="0.0366%" height="15" fill="rgb(247,86,24)" fg:x="421" fg:w="1"/><text x="15.6600%" y="367.50"></text></g><g><title>std::sys::unix::cvt_r (1 samples, 0.04%)</title><rect x="15.4100%" y="341" width="0.0366%" height="15" fill="rgb(205,101,16)" fg:x="421" fg:w="1"/><text x="15.6600%" y="351.50"></text></g><g><title>std::sys::unix::fs::File::open_c::{{closure}} (1 samples, 0.04%)</title><rect x="15.4100%" y="325" width="0.0366%" height="15" fill="rgb(246,168,33)" fg:x="421" fg:w="1"/><text x="15.6600%" y="335.50"></text></g><g><title>__libc_open64 (1 samples, 0.04%)</title><rect x="15.4100%" y="309" width="0.0366%" height="15" fill="rgb(231,114,1)" fg:x="421" fg:w="1"/><text x="15.6600%" y="319.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="15.4100%" y="293" width="0.0366%" height="15" fill="rgb(207,184,53)" fg:x="421" fg:w="1"/><text x="15.6600%" y="303.50"></text></g><g><title>do_syscall_64 (1 samples, 0.04%)</title><rect x="15.4100%" y="277" width="0.0366%" height="15" fill="rgb(224,95,51)" fg:x="421" fg:w="1"/><text x="15.6600%" y="287.50"></text></g><g><title>__x64_sys_openat (1 samples, 0.04%)</title><rect x="15.4100%" y="261" width="0.0366%" height="15" fill="rgb(212,188,45)" fg:x="421" fg:w="1"/><text x="15.6600%" y="271.50"></text></g><g><title>do_sys_openat2 (1 samples, 0.04%)</title><rect x="15.4100%" y="245" width="0.0366%" height="15" fill="rgb(223,154,38)" fg:x="421" fg:w="1"/><text x="15.6600%" y="255.50"></text></g><g><title>do_filp_open (1 samples, 0.04%)</title><rect x="15.4100%" y="229" width="0.0366%" height="15" fill="rgb(251,22,52)" fg:x="421" fg:w="1"/><text x="15.6600%" y="239.50"></text></g><g><title>path_openat (1 samples, 0.04%)</title><rect x="15.4100%" y="213" width="0.0366%" height="15" fill="rgb(229,209,22)" fg:x="421" fg:w="1"/><text x="15.6600%" y="223.50"></text></g><g><title>alloc_empty_file (1 samples, 0.04%)</title><rect x="15.4100%" y="197" width="0.0366%" height="15" fill="rgb(234,138,34)" fg:x="421" fg:w="1"/><text x="15.6600%" y="207.50"></text></g><g><title>__alloc_file (1 samples, 0.04%)</title><rect x="15.4100%" y="181" width="0.0366%" height="15" fill="rgb(212,95,11)" fg:x="421" fg:w="1"/><text x="15.6600%" y="191.50"></text></g><g><title>kmem_cache_alloc (1 samples, 0.04%)</title><rect x="15.4100%" y="165" width="0.0366%" height="15" fill="rgb(240,179,47)" fg:x="421" fg:w="1"/><text x="15.6600%" y="175.50"></text></g><g><title>slab_pre_alloc_hook.constprop.0 (1 samples, 0.04%)</title><rect x="15.4100%" y="149" width="0.0366%" height="15" fill="rgb(240,163,11)" fg:x="421" fg:w="1"/><text x="15.6600%" y="159.50"></text></g><g><title>get_obj_cgroup_from_current (1 samples, 0.04%)</title><rect x="15.4100%" y="133" width="0.0366%" height="15" fill="rgb(236,37,12)" fg:x="421" fg:w="1"/><text x="15.6600%" y="143.50"></text></g><g><title>&lt;colmet_node::backends::cpu::CpuBackend as colmet_node::backends::Backend&gt;::return_values (6 samples, 0.22%)</title><rect x="15.3001%" y="453" width="0.2196%" height="15" fill="rgb(232,164,16)" fg:x="418" fg:w="6"/><text x="15.5501%" y="463.50"></text></g><g><title>colmet_node::utils::wait_file (2 samples, 0.07%)</title><rect x="15.4466%" y="437" width="0.0732%" height="15" fill="rgb(244,205,15)" fg:x="422" fg:w="2"/><text x="15.6966%" y="447.50"></text></g><g><title>std::path::Path::exists (2 samples, 0.07%)</title><rect x="15.4466%" y="421" width="0.0732%" height="15" fill="rgb(223,117,47)" fg:x="422" fg:w="2"/><text x="15.6966%" y="431.50"></text></g><g><title>std::fs::metadata (2 samples, 0.07%)</title><rect x="15.4466%" y="405" width="0.0732%" height="15" fill="rgb(244,107,35)" fg:x="422" fg:w="2"/><text x="15.6966%" y="415.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.07%)</title><rect x="15.4466%" y="389" width="0.0732%" height="15" fill="rgb(205,140,8)" fg:x="422" fg:w="2"/><text x="15.6966%" y="399.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.07%)</title><rect x="15.4466%" y="373" width="0.0732%" height="15" fill="rgb(228,84,46)" fg:x="422" fg:w="2"/><text x="15.6966%" y="383.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.07%)</title><rect x="15.4466%" y="357" width="0.0732%" height="15" fill="rgb(254,188,9)" fg:x="422" fg:w="2"/><text x="15.6966%" y="367.50"></text></g><g><title>statx (2 samples, 0.07%)</title><rect x="15.4466%" y="341" width="0.0732%" height="15" fill="rgb(206,112,54)" fg:x="422" fg:w="2"/><text x="15.6966%" y="351.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.07%)</title><rect x="15.4466%" y="325" width="0.0732%" height="15" fill="rgb(216,84,49)" fg:x="422" fg:w="2"/><text x="15.6966%" y="335.50"></text></g><g><title>do_syscall_64 (2 samples, 0.07%)</title><rect x="15.4466%" y="309" width="0.0732%" height="15" fill="rgb(214,194,35)" fg:x="422" fg:w="2"/><text x="15.6966%" y="319.50"></text></g><g><title>__x64_sys_statx (2 samples, 0.07%)</title><rect x="15.4466%" y="293" width="0.0732%" height="15" fill="rgb(249,28,3)" fg:x="422" fg:w="2"/><text x="15.6966%" y="303.50"></text></g><g><title>do_statx (2 samples, 0.07%)</title><rect x="15.4466%" y="277" width="0.0732%" height="15" fill="rgb(222,56,52)" fg:x="422" fg:w="2"/><text x="15.6966%" y="287.50"></text></g><g><title>vfs_statx (2 samples, 0.07%)</title><rect x="15.4466%" y="261" width="0.0732%" height="15" fill="rgb(245,217,50)" fg:x="422" fg:w="2"/><text x="15.6966%" y="271.50"></text></g><g><title>filename_lookup (2 samples, 0.07%)</title><rect x="15.4466%" y="245" width="0.0732%" height="15" fill="rgb(213,201,24)" fg:x="422" fg:w="2"/><text x="15.6966%" y="255.50"></text></g><g><title>path_lookupat (2 samples, 0.07%)</title><rect x="15.4466%" y="229" width="0.0732%" height="15" fill="rgb(248,116,28)" fg:x="422" fg:w="2"/><text x="15.6966%" y="239.50"></text></g><g><title>link_path_walk.part.0 (2 samples, 0.07%)</title><rect x="15.4466%" y="213" width="0.0732%" height="15" fill="rgb(219,72,43)" fg:x="422" fg:w="2"/><text x="15.6966%" y="223.50"></text></g><g><title>walk_component (2 samples, 0.07%)</title><rect x="15.4466%" y="197" width="0.0732%" height="15" fill="rgb(209,138,14)" fg:x="422" fg:w="2"/><text x="15.6966%" y="207.50"></text></g><g><title>lookup_fast (2 samples, 0.07%)</title><rect x="15.4466%" y="181" width="0.0732%" height="15" fill="rgb(222,18,33)" fg:x="422" fg:w="2"/><text x="15.6966%" y="191.50"></text></g><g><title>__d_lookup (2 samples, 0.07%)</title><rect x="15.4466%" y="165" width="0.0732%" height="15" fill="rgb(213,199,7)" fg:x="422" fg:w="2"/><text x="15.6966%" y="175.50"></text></g><g><title>__f_unlock_pos (1 samples, 0.04%)</title><rect x="15.5198%" y="213" width="0.0366%" height="15" fill="rgb(250,110,10)" fg:x="424" fg:w="1"/><text x="15.7698%" y="223.50"></text></g><g><title>cpumask_next (1 samples, 0.04%)</title><rect x="15.6296%" y="149" width="0.0366%" height="15" fill="rgb(248,123,6)" fg:x="427" fg:w="1"/><text x="15.8796%" y="159.50"></text></g><g><title>_find_next_bit.constprop.0 (1 samples, 0.04%)</title><rect x="15.6296%" y="133" width="0.0366%" height="15" fill="rgb(206,91,31)" fg:x="427" fg:w="1"/><text x="15.8796%" y="143.50"></text></g><g><title>do_syscall_64 (5 samples, 0.18%)</title><rect x="15.5198%" y="245" width="0.1830%" height="15" fill="rgb(211,154,13)" fg:x="424" fg:w="5"/><text x="15.7698%" y="255.50"></text></g><g><title>ksys_read (5 samples, 0.18%)</title><rect x="15.5198%" y="229" width="0.1830%" height="15" fill="rgb(225,148,7)" fg:x="424" fg:w="5"/><text x="15.7698%" y="239.50"></text></g><g><title>vfs_read (4 samples, 0.15%)</title><rect x="15.5564%" y="213" width="0.1464%" height="15" fill="rgb(220,160,43)" fg:x="425" fg:w="4"/><text x="15.8064%" y="223.50"></text></g><g><title>new_sync_read (4 samples, 0.15%)</title><rect x="15.5564%" y="197" width="0.1464%" height="15" fill="rgb(213,52,39)" fg:x="425" fg:w="4"/><text x="15.8064%" y="207.50"></text></g><g><title>seq_read_iter (4 samples, 0.15%)</title><rect x="15.5564%" y="181" width="0.1464%" height="15" fill="rgb(243,137,7)" fg:x="425" fg:w="4"/><text x="15.8064%" y="191.50"></text></g><g><title>memcg_stat_show (4 samples, 0.15%)</title><rect x="15.5564%" y="165" width="0.1464%" height="15" fill="rgb(230,79,13)" fg:x="425" fg:w="4"/><text x="15.8064%" y="175.50"></text></g><g><title>seq_printf (1 samples, 0.04%)</title><rect x="15.6662%" y="149" width="0.0366%" height="15" fill="rgb(247,105,23)" fg:x="428" fg:w="1"/><text x="15.9162%" y="159.50"></text></g><g><title>vsnprintf (1 samples, 0.04%)</title><rect x="15.6662%" y="133" width="0.0366%" height="15" fill="rgb(223,179,41)" fg:x="428" fg:w="1"/><text x="15.9162%" y="143.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_string (6 samples, 0.22%)</title><rect x="15.5198%" y="421" width="0.2196%" height="15" fill="rgb(218,9,34)" fg:x="424" fg:w="6"/><text x="15.7698%" y="431.50"></text></g><g><title>std::io::default_read_to_string (6 samples, 0.22%)</title><rect x="15.5198%" y="405" width="0.2196%" height="15" fill="rgb(222,106,8)" fg:x="424" fg:w="6"/><text x="15.7698%" y="415.50"></text></g><g><title>std::io::append_to_string (6 samples, 0.22%)</title><rect x="15.5198%" y="389" width="0.2196%" height="15" fill="rgb(211,220,0)" fg:x="424" fg:w="6"/><text x="15.7698%" y="399.50"></text></g><g><title>std::io::default_read_to_string::{{closure}} (6 samples, 0.22%)</title><rect x="15.5198%" y="373" width="0.2196%" height="15" fill="rgb(229,52,16)" fg:x="424" fg:w="6"/><text x="15.7698%" y="383.50"></text></g><g><title>std::io::default_read_to_end (6 samples, 0.22%)</title><rect x="15.5198%" y="357" width="0.2196%" height="15" fill="rgb(212,155,18)" fg:x="424" fg:w="6"/><text x="15.7698%" y="367.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (6 samples, 0.22%)</title><rect x="15.5198%" y="341" width="0.2196%" height="15" fill="rgb(242,21,14)" fg:x="424" fg:w="6"/><text x="15.7698%" y="351.50"></text></g><g><title>std::sys::unix::fs::File::read_buf (6 samples, 0.22%)</title><rect x="15.5198%" y="325" width="0.2196%" height="15" fill="rgb(222,19,48)" fg:x="424" fg:w="6"/><text x="15.7698%" y="335.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (6 samples, 0.22%)</title><rect x="15.5198%" y="309" width="0.2196%" height="15" fill="rgb(232,45,27)" fg:x="424" fg:w="6"/><text x="15.7698%" y="319.50"></text></g><g><title>__libc_read (6 samples, 0.22%)</title><rect x="15.5198%" y="293" width="0.2196%" height="15" fill="rgb(249,103,42)" fg:x="424" fg:w="6"/><text x="15.7698%" y="303.50"></text></g><g><title>__libc_read (6 samples, 0.22%)</title><rect x="15.5198%" y="277" width="0.2196%" height="15" fill="rgb(246,81,33)" fg:x="424" fg:w="6"/><text x="15.7698%" y="287.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.22%)</title><rect x="15.5198%" y="261" width="0.2196%" height="15" fill="rgb(252,33,42)" fg:x="424" fg:w="6"/><text x="15.7698%" y="271.50"></text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.04%)</title><rect x="15.7028%" y="245" width="0.0366%" height="15" fill="rgb(209,212,41)" fg:x="429" fg:w="1"/><text x="15.9528%" y="255.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (2 samples, 0.07%)</title><rect x="15.7394%" y="421" width="0.0732%" height="15" fill="rgb(207,154,6)" fg:x="430" fg:w="2"/><text x="15.9894%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (2 samples, 0.07%)</title><rect x="15.7394%" y="405" width="0.0732%" height="15" fill="rgb(223,64,47)" fg:x="430" fg:w="2"/><text x="15.9894%" y="415.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (2 samples, 0.07%)</title><rect x="15.7394%" y="389" width="0.0732%" height="15" fill="rgb(211,161,38)" fg:x="430" fg:w="2"/><text x="15.9894%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (2 samples, 0.07%)</title><rect x="15.7394%" y="373" width="0.0732%" height="15" fill="rgb(219,138,40)" fg:x="430" fg:w="2"/><text x="15.9894%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.07%)</title><rect x="15.7394%" y="357" width="0.0732%" height="15" fill="rgb(241,228,46)" fg:x="430" fg:w="2"/><text x="15.9894%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.07%)</title><rect x="15.7394%" y="341" width="0.0732%" height="15" fill="rgb(223,209,38)" fg:x="430" fg:w="2"/><text x="15.9894%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.07%)</title><rect x="15.7394%" y="325" width="0.0732%" height="15" fill="rgb(236,164,45)" fg:x="430" fg:w="2"/><text x="15.9894%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.07%)</title><rect x="15.7394%" y="309" width="0.0732%" height="15" fill="rgb(231,15,5)" fg:x="430" fg:w="2"/><text x="15.9894%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.07%)</title><rect x="15.7394%" y="293" width="0.0732%" height="15" fill="rgb(252,35,15)" fg:x="430" fg:w="2"/><text x="15.9894%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.07%)</title><rect x="15.7394%" y="277" width="0.0732%" height="15" fill="rgb(248,181,18)" fg:x="430" fg:w="2"/><text x="15.9894%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.07%)</title><rect x="15.7394%" y="261" width="0.0732%" height="15" fill="rgb(233,39,42)" fg:x="430" fg:w="2"/><text x="15.9894%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.07%)</title><rect x="15.7394%" y="245" width="0.0732%" height="15" fill="rgb(238,110,33)" fg:x="430" fg:w="2"/><text x="15.9894%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.07%)</title><rect x="15.7394%" y="229" width="0.0732%" height="15" fill="rgb(233,195,10)" fg:x="430" fg:w="2"/><text x="15.9894%" y="239.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.07%)</title><rect x="15.7394%" y="213" width="0.0732%" height="15" fill="rgb(254,105,3)" fg:x="430" fg:w="2"/><text x="15.9894%" y="223.50"></text></g><g><title>__rdl_alloc (2 samples, 0.07%)</title><rect x="15.7394%" y="197" width="0.0732%" height="15" fill="rgb(221,225,9)" fg:x="430" fg:w="2"/><text x="15.9894%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.07%)</title><rect x="15.7394%" y="181" width="0.0732%" height="15" fill="rgb(224,227,45)" fg:x="430" fg:w="2"/><text x="15.9894%" y="191.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.07%)</title><rect x="15.7394%" y="165" width="0.0732%" height="15" fill="rgb(229,198,43)" fg:x="430" fg:w="2"/><text x="15.9894%" y="175.50"></text></g><g><title>_int_malloc (1 samples, 0.04%)</title><rect x="15.7760%" y="149" width="0.0366%" height="15" fill="rgb(206,209,35)" fg:x="431" fg:w="1"/><text x="16.0260%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.04%)</title><rect x="15.8126%" y="421" width="0.0366%" height="15" fill="rgb(245,195,53)" fg:x="432" fg:w="1"/><text x="16.0626%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.04%)</title><rect x="15.8126%" y="405" width="0.0366%" height="15" fill="rgb(240,92,26)" fg:x="432" fg:w="1"/><text x="16.0626%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.04%)</title><rect x="15.8126%" y="389" width="0.0366%" height="15" fill="rgb(207,40,23)" fg:x="432" fg:w="1"/><text x="16.0626%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.04%)</title><rect x="15.8126%" y="373" width="0.0366%" height="15" fill="rgb(223,111,35)" fg:x="432" fg:w="1"/><text x="16.0626%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.04%)</title><rect x="15.8126%" y="357" width="0.0366%" height="15" fill="rgb(229,147,28)" fg:x="432" fg:w="1"/><text x="16.0626%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.04%)</title><rect x="15.8126%" y="341" width="0.0366%" height="15" fill="rgb(211,29,28)" fg:x="432" fg:w="1"/><text x="16.0626%" y="351.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="15.8126%" y="325" width="0.0366%" height="15" fill="rgb(228,72,33)" fg:x="432" fg:w="1"/><text x="16.0626%" y="335.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (1 samples, 0.04%)</title><rect x="15.8126%" y="309" width="0.0366%" height="15" fill="rgb(205,214,31)" fg:x="432" fg:w="1"/><text x="16.0626%" y="319.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.04%)</title><rect x="15.8126%" y="293" width="0.0366%" height="15" fill="rgb(224,111,15)" fg:x="432" fg:w="1"/><text x="16.0626%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::fs::File&gt; (1 samples, 0.04%)</title><rect x="15.8492%" y="421" width="0.0366%" height="15" fill="rgb(253,21,26)" fg:x="433" fg:w="1"/><text x="16.0992%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::fs::File&gt; (1 samples, 0.04%)</title><rect x="15.8492%" y="405" width="0.0366%" height="15" fill="rgb(245,139,43)" fg:x="433" fg:w="1"/><text x="16.0992%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::fd::FileDesc&gt; (1 samples, 0.04%)</title><rect x="15.8492%" y="389" width="0.0366%" height="15" fill="rgb(252,170,7)" fg:x="433" fg:w="1"/><text x="16.0992%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::os::fd::owned::OwnedFd&gt; (1 samples, 0.04%)</title><rect x="15.8492%" y="373" width="0.0366%" height="15" fill="rgb(231,118,14)" fg:x="433" fg:w="1"/><text x="16.0992%" y="383.50"></text></g><g><title>&lt;std::os::fd::owned::OwnedFd as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="15.8492%" y="357" width="0.0366%" height="15" fill="rgb(238,83,0)" fg:x="433" fg:w="1"/><text x="16.0992%" y="367.50"></text></g><g><title>__close (1 samples, 0.04%)</title><rect x="15.8492%" y="341" width="0.0366%" height="15" fill="rgb(221,39,39)" fg:x="433" fg:w="1"/><text x="16.0992%" y="351.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="15.8492%" y="325" width="0.0366%" height="15" fill="rgb(222,119,46)" fg:x="433" fg:w="1"/><text x="16.0992%" y="335.50"></text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.04%)</title><rect x="15.8492%" y="309" width="0.0366%" height="15" fill="rgb(222,165,49)" fg:x="433" fg:w="1"/><text x="16.0992%" y="319.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.04%)</title><rect x="15.8492%" y="293" width="0.0366%" height="15" fill="rgb(219,113,52)" fg:x="433" fg:w="1"/><text x="16.0992%" y="303.50"></text></g><g><title>task_work_run (1 samples, 0.04%)</title><rect x="15.8492%" y="277" width="0.0366%" height="15" fill="rgb(214,7,15)" fg:x="433" fg:w="1"/><text x="16.0992%" y="287.50"></text></g><g><title>__fput (1 samples, 0.04%)</title><rect x="15.8492%" y="261" width="0.0366%" height="15" fill="rgb(235,32,4)" fg:x="433" fg:w="1"/><text x="16.0992%" y="271.50"></text></g><g><title>security_file_free (1 samples, 0.04%)</title><rect x="15.8492%" y="245" width="0.0366%" height="15" fill="rgb(238,90,54)" fg:x="433" fg:w="1"/><text x="16.0992%" y="255.50"></text></g><g><title>apparmor_file_free_security (1 samples, 0.04%)</title><rect x="15.8492%" y="229" width="0.0366%" height="15" fill="rgb(213,208,19)" fg:x="433" fg:w="1"/><text x="16.0992%" y="239.50"></text></g><g><title>do_filp_open (1 samples, 0.04%)</title><rect x="15.8858%" y="229" width="0.0366%" height="15" fill="rgb(233,156,4)" fg:x="434" fg:w="1"/><text x="16.1358%" y="239.50"></text></g><g><title>path_openat (1 samples, 0.04%)</title><rect x="15.8858%" y="213" width="0.0366%" height="15" fill="rgb(207,194,5)" fg:x="434" fg:w="1"/><text x="16.1358%" y="223.50"></text></g><g><title>link_path_walk.part.0 (1 samples, 0.04%)</title><rect x="15.8858%" y="197" width="0.0366%" height="15" fill="rgb(206,111,30)" fg:x="434" fg:w="1"/><text x="16.1358%" y="207.50"></text></g><g><title>colmet_node::backends::memory::get_metric_values (12 samples, 0.44%)</title><rect x="15.5198%" y="437" width="0.4392%" height="15" fill="rgb(243,70,54)" fg:x="424" fg:w="12"/><text x="15.7698%" y="447.50"></text></g><g><title>std::fs::File::open (2 samples, 0.07%)</title><rect x="15.8858%" y="421" width="0.0732%" height="15" fill="rgb(242,28,8)" fg:x="434" fg:w="2"/><text x="16.1358%" y="431.50"></text></g><g><title>std::fs::OpenOptions::open (2 samples, 0.07%)</title><rect x="15.8858%" y="405" width="0.0732%" height="15" fill="rgb(219,106,18)" fg:x="434" fg:w="2"/><text x="16.1358%" y="415.50"></text></g><g><title>std::fs::OpenOptions::_open (2 samples, 0.07%)</title><rect x="15.8858%" y="389" width="0.0732%" height="15" fill="rgb(244,222,10)" fg:x="434" fg:w="2"/><text x="16.1358%" y="399.50"></text></g><g><title>std::sys::unix::fs::File::open (2 samples, 0.07%)</title><rect x="15.8858%" y="373" width="0.0732%" height="15" fill="rgb(236,179,52)" fg:x="434" fg:w="2"/><text x="16.1358%" y="383.50"></text></g><g><title>std::sys::unix::fs::File::open_c (2 samples, 0.07%)</title><rect x="15.8858%" y="357" width="0.0732%" height="15" fill="rgb(213,23,39)" fg:x="434" fg:w="2"/><text x="16.1358%" y="367.50"></text></g><g><title>std::sys::unix::cvt_r (2 samples, 0.07%)</title><rect x="15.8858%" y="341" width="0.0732%" height="15" fill="rgb(238,48,10)" fg:x="434" fg:w="2"/><text x="16.1358%" y="351.50"></text></g><g><title>std::sys::unix::fs::File::open_c::{{closure}} (2 samples, 0.07%)</title><rect x="15.8858%" y="325" width="0.0732%" height="15" fill="rgb(251,196,23)" fg:x="434" fg:w="2"/><text x="16.1358%" y="335.50"></text></g><g><title>__libc_open64 (2 samples, 0.07%)</title><rect x="15.8858%" y="309" width="0.0732%" height="15" fill="rgb(250,152,24)" fg:x="434" fg:w="2"/><text x="16.1358%" y="319.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.07%)</title><rect x="15.8858%" y="293" width="0.0732%" height="15" fill="rgb(209,150,17)" fg:x="434" fg:w="2"/><text x="16.1358%" y="303.50"></text></g><g><title>do_syscall_64 (2 samples, 0.07%)</title><rect x="15.8858%" y="277" width="0.0732%" height="15" fill="rgb(234,202,34)" fg:x="434" fg:w="2"/><text x="16.1358%" y="287.50"></text></g><g><title>__x64_sys_openat (2 samples, 0.07%)</title><rect x="15.8858%" y="261" width="0.0732%" height="15" fill="rgb(253,148,53)" fg:x="434" fg:w="2"/><text x="16.1358%" y="271.50"></text></g><g><title>do_sys_openat2 (2 samples, 0.07%)</title><rect x="15.8858%" y="245" width="0.0732%" height="15" fill="rgb(218,129,16)" fg:x="434" fg:w="2"/><text x="16.1358%" y="255.50"></text></g><g><title>getname_flags.part.0 (1 samples, 0.04%)</title><rect x="15.9224%" y="229" width="0.0366%" height="15" fill="rgb(216,85,19)" fg:x="435" fg:w="1"/><text x="16.1724%" y="239.50"></text></g><g><title>strncpy_from_user (1 samples, 0.04%)</title><rect x="15.9224%" y="213" width="0.0366%" height="15" fill="rgb(235,228,7)" fg:x="435" fg:w="1"/><text x="16.1724%" y="223.50"></text></g><g><title>&lt;colmet_node::backends::memory::MemoryBackend as colmet_node::backends::Backend&gt;::return_values (13 samples, 0.48%)</title><rect x="15.5198%" y="453" width="0.4758%" height="15" fill="rgb(245,175,0)" fg:x="424" fg:w="13"/><text x="15.7698%" y="463.50"></text></g><g><title>colmet_node::utils::wait_file (1 samples, 0.04%)</title><rect x="15.9590%" y="437" width="0.0366%" height="15" fill="rgb(208,168,36)" fg:x="436" fg:w="1"/><text x="16.2090%" y="447.50"></text></g><g><title>std::path::Path::exists (1 samples, 0.04%)</title><rect x="15.9590%" y="421" width="0.0366%" height="15" fill="rgb(246,171,24)" fg:x="436" fg:w="1"/><text x="16.2090%" y="431.50"></text></g><g><title>std::fs::metadata (1 samples, 0.04%)</title><rect x="15.9590%" y="405" width="0.0366%" height="15" fill="rgb(215,142,24)" fg:x="436" fg:w="1"/><text x="16.2090%" y="415.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.04%)</title><rect x="15.9590%" y="389" width="0.0366%" height="15" fill="rgb(250,187,7)" fg:x="436" fg:w="1"/><text x="16.2090%" y="399.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.04%)</title><rect x="15.9590%" y="373" width="0.0366%" height="15" fill="rgb(228,66,33)" fg:x="436" fg:w="1"/><text x="16.2090%" y="383.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.04%)</title><rect x="15.9590%" y="357" width="0.0366%" height="15" fill="rgb(234,215,21)" fg:x="436" fg:w="1"/><text x="16.2090%" y="367.50"></text></g><g><title>statx (1 samples, 0.04%)</title><rect x="15.9590%" y="341" width="0.0366%" height="15" fill="rgb(222,191,20)" fg:x="436" fg:w="1"/><text x="16.2090%" y="351.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="15.9590%" y="325" width="0.0366%" height="15" fill="rgb(245,79,54)" fg:x="436" fg:w="1"/><text x="16.2090%" y="335.50"></text></g><g><title>do_syscall_64 (1 samples, 0.04%)</title><rect x="15.9590%" y="309" width="0.0366%" height="15" fill="rgb(240,10,37)" fg:x="436" fg:w="1"/><text x="16.2090%" y="319.50"></text></g><g><title>__x64_sys_statx (1 samples, 0.04%)</title><rect x="15.9590%" y="293" width="0.0366%" height="15" fill="rgb(214,192,32)" fg:x="436" fg:w="1"/><text x="16.2090%" y="303.50"></text></g><g><title>do_statx (1 samples, 0.04%)</title><rect x="15.9590%" y="277" width="0.0366%" height="15" fill="rgb(209,36,54)" fg:x="436" fg:w="1"/><text x="16.2090%" y="287.50"></text></g><g><title>vfs_statx (1 samples, 0.04%)</title><rect x="15.9590%" y="261" width="0.0366%" height="15" fill="rgb(220,10,11)" fg:x="436" fg:w="1"/><text x="16.2090%" y="271.50"></text></g><g><title>filename_lookup (1 samples, 0.04%)</title><rect x="15.9590%" y="245" width="0.0366%" height="15" fill="rgb(221,106,17)" fg:x="436" fg:w="1"/><text x="16.2090%" y="255.50"></text></g><g><title>path_lookupat (1 samples, 0.04%)</title><rect x="15.9590%" y="229" width="0.0366%" height="15" fill="rgb(251,142,44)" fg:x="436" fg:w="1"/><text x="16.2090%" y="239.50"></text></g><g><title>link_path_walk.part.0 (1 samples, 0.04%)</title><rect x="15.9590%" y="213" width="0.0366%" height="15" fill="rgb(238,13,15)" fg:x="436" fg:w="1"/><text x="16.2090%" y="223.50"></text></g><g><title>inode_permission.part.0 (1 samples, 0.04%)</title><rect x="15.9590%" y="197" width="0.0366%" height="15" fill="rgb(208,107,27)" fg:x="436" fg:w="1"/><text x="16.2090%" y="207.50"></text></g><g><title>kernfs_iop_permission (1 samples, 0.04%)</title><rect x="15.9590%" y="181" width="0.0366%" height="15" fill="rgb(205,136,37)" fg:x="436" fg:w="1"/><text x="16.2090%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.04%)</title><rect x="16.1420%" y="437" width="0.0366%" height="15" fill="rgb(250,205,27)" fg:x="441" fg:w="1"/><text x="16.3920%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.04%)</title><rect x="16.1420%" y="421" width="0.0366%" height="15" fill="rgb(210,80,43)" fg:x="441" fg:w="1"/><text x="16.3920%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.07%)</title><rect x="16.1786%" y="421" width="0.0732%" height="15" fill="rgb(247,160,36)" fg:x="442" fg:w="2"/><text x="16.4286%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.07%)</title><rect x="16.1786%" y="405" width="0.0732%" height="15" fill="rgb(234,13,49)" fg:x="442" fg:w="2"/><text x="16.4286%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (4 samples, 0.15%)</title><rect x="16.1786%" y="437" width="0.1464%" height="15" fill="rgb(234,122,0)" fg:x="442" fg:w="4"/><text x="16.4286%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.07%)</title><rect x="16.2518%" y="421" width="0.0732%" height="15" fill="rgb(207,146,38)" fg:x="444" fg:w="2"/><text x="16.5018%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.07%)</title><rect x="16.2518%" y="405" width="0.0732%" height="15" fill="rgb(207,177,25)" fg:x="444" fg:w="2"/><text x="16.5018%" y="415.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.07%)</title><rect x="16.3250%" y="437" width="0.0732%" height="15" fill="rgb(211,178,42)" fg:x="446" fg:w="2"/><text x="16.5750%" y="447.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.07%)</title><rect x="16.3250%" y="421" width="0.0732%" height="15" fill="rgb(230,69,54)" fg:x="446" fg:w="2"/><text x="16.5750%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2 samples, 0.07%)</title><rect x="16.3250%" y="405" width="0.0732%" height="15" fill="rgb(214,135,41)" fg:x="446" fg:w="2"/><text x="16.5750%" y="415.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.04%)</title><rect x="16.3982%" y="437" width="0.0366%" height="15" fill="rgb(237,67,25)" fg:x="448" fg:w="1"/><text x="16.6482%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.04%)</title><rect x="16.3982%" y="421" width="0.0366%" height="15" fill="rgb(222,189,50)" fg:x="448" fg:w="1"/><text x="16.6482%" y="431.50"></text></g><g><title>hashbrown::map::make_insert_hash (1 samples, 0.04%)</title><rect x="16.3982%" y="405" width="0.0366%" height="15" fill="rgb(245,148,34)" fg:x="448" fg:w="1"/><text x="16.6482%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.04%)</title><rect x="16.3982%" y="389" width="0.0366%" height="15" fill="rgb(222,29,6)" fg:x="448" fg:w="1"/><text x="16.6482%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="16.3982%" y="373" width="0.0366%" height="15" fill="rgb(221,189,43)" fg:x="448" fg:w="1"/><text x="16.6482%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="16.3982%" y="357" width="0.0366%" height="15" fill="rgb(207,36,27)" fg:x="448" fg:w="1"/><text x="16.6482%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="16.3982%" y="341" width="0.0366%" height="15" fill="rgb(217,90,24)" fg:x="448" fg:w="1"/><text x="16.6482%" y="351.50"></text></g><g><title>colmet_node::backends::BackendsManager::get_metrics_to_collect_now (14 samples, 0.51%)</title><rect x="15.9956%" y="453" width="0.5124%" height="15" fill="rgb(224,66,35)" fg:x="437" fg:w="14"/><text x="16.2456%" y="463.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::new (2 samples, 0.07%)</title><rect x="16.4348%" y="437" width="0.0732%" height="15" fill="rgb(221,13,50)" fg:x="449" fg:w="2"/><text x="16.6848%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (2 samples, 0.07%)</title><rect x="16.4348%" y="421" width="0.0732%" height="15" fill="rgb(236,68,49)" fg:x="449" fg:w="2"/><text x="16.6848%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::default::Default&gt;::default (2 samples, 0.07%)</title><rect x="16.4348%" y="405" width="0.0732%" height="15" fill="rgb(229,146,28)" fg:x="449" fg:w="2"/><text x="16.6848%" y="415.50"></text></g><g><title>std::collections::hash::map::RandomState::new (2 samples, 0.07%)</title><rect x="16.4348%" y="389" width="0.0732%" height="15" fill="rgb(225,31,38)" fg:x="449" fg:w="2"/><text x="16.6848%" y="399.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.07%)</title><rect x="16.4348%" y="373" width="0.0732%" height="15" fill="rgb(250,208,3)" fg:x="449" fg:w="2"/><text x="16.6848%" y="383.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.07%)</title><rect x="16.4348%" y="357" width="0.0732%" height="15" fill="rgb(246,54,23)" fg:x="449" fg:w="2"/><text x="16.6848%" y="367.50"></text></g><g><title>std::collections::hash::map::RandomState::new::{{closure}} (2 samples, 0.07%)</title><rect x="16.4348%" y="341" width="0.0732%" height="15" fill="rgb(243,76,11)" fg:x="449" fg:w="2"/><text x="16.6848%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.04%)</title><rect x="16.4714%" y="325" width="0.0366%" height="15" fill="rgb(245,21,50)" fg:x="450" fg:w="1"/><text x="16.7214%" y="335.50"></text></g><g><title>colmet_node::backends::compress_metric_names (1 samples, 0.04%)</title><rect x="16.5081%" y="453" width="0.0366%" height="15" fill="rgb(228,9,43)" fg:x="451" fg:w="1"/><text x="16.7581%" y="463.50"></text></g><g><title>alloc::fmt::format (1 samples, 0.04%)</title><rect x="16.5081%" y="437" width="0.0366%" height="15" fill="rgb(208,100,47)" fg:x="451" fg:w="1"/><text x="16.7581%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.04%)</title><rect x="16.5081%" y="421" width="0.0366%" height="15" fill="rgb(232,26,8)" fg:x="451" fg:w="1"/><text x="16.7581%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.04%)</title><rect x="16.5081%" y="405" width="0.0366%" height="15" fill="rgb(216,166,38)" fg:x="451" fg:w="1"/><text x="16.7581%" y="415.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (1 samples, 0.04%)</title><rect x="16.5081%" y="389" width="0.0366%" height="15" fill="rgb(251,202,51)" fg:x="451" fg:w="1"/><text x="16.7581%" y="399.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.04%)</title><rect x="16.5081%" y="373" width="0.0366%" height="15" fill="rgb(254,216,34)" fg:x="451" fg:w="1"/><text x="16.7581%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="16.5081%" y="357" width="0.0366%" height="15" fill="rgb(251,32,27)" fg:x="451" fg:w="1"/><text x="16.7581%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;colmet_node::backends::metric::Metric,alloc::alloc::Global&gt;&gt; (3 samples, 0.11%)</title><rect x="16.5447%" y="421" width="0.1098%" height="15" fill="rgb(208,127,28)" fg:x="452" fg:w="3"/><text x="16.7947%" y="431.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.11%)</title><rect x="16.5447%" y="405" width="0.1098%" height="15" fill="rgb(224,137,22)" fg:x="452" fg:w="3"/><text x="16.7947%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;colmet_node::backends::metric::Metric&gt;&gt; (4 samples, 0.15%)</title><rect x="16.5447%" y="453" width="0.1464%" height="15" fill="rgb(254,70,32)" fg:x="452" fg:w="4"/><text x="16.7947%" y="463.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.15%)</title><rect x="16.5447%" y="437" width="0.1464%" height="15" fill="rgb(229,75,37)" fg:x="452" fg:w="4"/><text x="16.7947%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[colmet_node::backends::metric::Metric]&gt; (1 samples, 0.04%)</title><rect x="16.6545%" y="421" width="0.0366%" height="15" fill="rgb(252,64,23)" fg:x="455" fg:w="1"/><text x="16.9045%" y="431.50"></text></g><g><title>__GI___libc_free (7 samples, 0.26%)</title><rect x="16.7277%" y="309" width="0.2562%" height="15" fill="rgb(232,162,48)" fg:x="457" fg:w="7"/><text x="16.9777%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (25 samples, 0.92%)</title><rect x="16.6911%" y="373" width="0.9151%" height="15" fill="rgb(246,160,12)" fg:x="456" fg:w="25"/><text x="16.9411%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (25 samples, 0.92%)</title><rect x="16.6911%" y="357" width="0.9151%" height="15" fill="rgb(247,166,0)" fg:x="456" fg:w="25"/><text x="16.9411%" y="367.50"></text></g><g><title>__rdl_dealloc (25 samples, 0.92%)</title><rect x="16.6911%" y="341" width="0.9151%" height="15" fill="rgb(249,219,21)" fg:x="456" fg:w="25"/><text x="16.9411%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (25 samples, 0.92%)</title><rect x="16.6911%" y="325" width="0.9151%" height="15" fill="rgb(205,209,3)" fg:x="456" fg:w="25"/><text x="16.9411%" y="335.50"></text></g><g><title>_int_free (17 samples, 0.62%)</title><rect x="16.9839%" y="309" width="0.6223%" height="15" fill="rgb(243,44,1)" fg:x="464" fg:w="17"/><text x="17.2339%" y="319.50"></text></g><g><title>tcache_put (3 samples, 0.11%)</title><rect x="17.4963%" y="293" width="0.1098%" height="15" fill="rgb(206,159,16)" fg:x="478" fg:w="3"/><text x="17.7463%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;colmet_node::backends::metric::Metric&gt; (28 samples, 1.02%)</title><rect x="16.6911%" y="453" width="1.0249%" height="15" fill="rgb(244,77,30)" fg:x="456" fg:w="28"/><text x="16.9411%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (28 samples, 1.02%)</title><rect x="16.6911%" y="437" width="1.0249%" height="15" fill="rgb(218,69,12)" fg:x="456" fg:w="28"/><text x="16.9411%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (28 samples, 1.02%)</title><rect x="16.6911%" y="421" width="1.0249%" height="15" fill="rgb(212,87,7)" fg:x="456" fg:w="28"/><text x="16.9411%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (28 samples, 1.02%)</title><rect x="16.6911%" y="405" width="1.0249%" height="15" fill="rgb(245,114,25)" fg:x="456" fg:w="28"/><text x="16.9411%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 1.02%)</title><rect x="16.6911%" y="389" width="1.0249%" height="15" fill="rgb(210,61,42)" fg:x="456" fg:w="28"/><text x="16.9411%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (3 samples, 0.11%)</title><rect x="17.6061%" y="373" width="0.1098%" height="15" fill="rgb(211,52,33)" fg:x="481" fg:w="3"/><text x="17.8561%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,std::collections::hash::map::HashMap&lt;i32,alloc::vec::Vec&lt;colmet_node::backends::metric::Metric&gt;&gt;&gt;&gt; (7 samples, 0.26%)</title><rect x="17.7160%" y="453" width="0.2562%" height="15" fill="rgb(234,58,33)" fg:x="484" fg:w="7"/><text x="17.9660%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,std::collections::hash::map::HashMap&lt;i32,alloc::vec::Vec&lt;colmet_node::backends::metric::Metric&gt;&gt;,std::collections::hash::map::RandomState&gt;&gt; (7 samples, 0.26%)</title><rect x="17.7160%" y="437" width="0.2562%" height="15" fill="rgb(220,115,36)" fg:x="484" fg:w="7"/><text x="17.9660%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,std::collections::hash::map::HashMap&lt;i32,alloc::vec::Vec&lt;colmet_node::backends::metric::Metric&gt;&gt;)&gt;&gt; (7 samples, 0.26%)</title><rect x="17.7160%" y="421" width="0.2562%" height="15" fill="rgb(243,153,54)" fg:x="484" fg:w="7"/><text x="17.9660%" y="431.50"></text></g><g><title>log::max_level (4 samples, 0.15%)</title><rect x="17.9722%" y="453" width="0.1464%" height="15" fill="rgb(251,47,18)" fg:x="491" fg:w="4"/><text x="18.2222%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (4 samples, 0.15%)</title><rect x="17.9722%" y="437" width="0.1464%" height="15" fill="rgb(242,102,42)" fg:x="491" fg:w="4"/><text x="18.2222%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (4 samples, 0.15%)</title><rect x="17.9722%" y="421" width="0.1464%" height="15" fill="rgb(234,31,38)" fg:x="491" fg:w="4"/><text x="18.2222%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.04%)</title><rect x="18.1186%" y="453" width="0.0366%" height="15" fill="rgb(221,117,51)" fg:x="495" fg:w="1"/><text x="18.3686%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.04%)</title><rect x="18.1186%" y="437" width="0.0366%" height="15" fill="rgb(212,20,18)" fg:x="495" fg:w="1"/><text x="18.3686%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.04%)</title><rect x="18.1186%" y="421" width="0.0366%" height="15" fill="rgb(245,133,36)" fg:x="495" fg:w="1"/><text x="18.3686%" y="431.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.04%)</title><rect x="18.1186%" y="405" width="0.0366%" height="15" fill="rgb(212,6,19)" fg:x="495" fg:w="1"/><text x="18.3686%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.04%)</title><rect x="18.1186%" y="389" width="0.0366%" height="15" fill="rgb(218,1,36)" fg:x="495" fg:w="1"/><text x="18.3686%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.04%)</title><rect x="18.1186%" y="373" width="0.0366%" height="15" fill="rgb(246,84,54)" fg:x="495" fg:w="1"/><text x="18.3686%" y="383.50"></text></g><g><title>colmet_node::backends::BackendsManager::make_measure (180 samples, 6.59%)</title><rect x="11.8228%" y="469" width="6.5886%" height="15" fill="rgb(242,110,6)" fg:x="323" fg:w="180"/><text x="12.0728%" y="479.50">colmet_no..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::is_empty (7 samples, 0.26%)</title><rect x="18.1552%" y="453" width="0.2562%" height="15" fill="rgb(214,47,5)" fg:x="496" fg:w="7"/><text x="18.4052%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::is_empty (7 samples, 0.26%)</title><rect x="18.1552%" y="437" width="0.2562%" height="15" fill="rgb(218,159,25)" fg:x="496" fg:w="7"/><text x="18.4052%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::len (7 samples, 0.26%)</title><rect x="18.1552%" y="421" width="0.2562%" height="15" fill="rgb(215,211,28)" fg:x="496" fg:w="7"/><text x="18.4052%" y="431.50"></text></g><g><title>core::time::Duration::from_nanos (4 samples, 0.15%)</title><rect x="18.4480%" y="453" width="0.1464%" height="15" fill="rgb(238,59,32)" fg:x="504" fg:w="4"/><text x="18.6980%" y="463.50"></text></g><g><title>__libc_disable_asynccancel (5 samples, 0.18%)</title><rect x="20.5344%" y="389" width="0.1830%" height="15" fill="rgb(226,82,3)" fg:x="561" fg:w="5"/><text x="20.7844%" y="399.50"></text></g><g><title>__libc_enable_asynccancel (6 samples, 0.22%)</title><rect x="20.7174%" y="389" width="0.2196%" height="15" fill="rgb(240,164,32)" fg:x="566" fg:w="6"/><text x="20.9674%" y="399.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="20.9370%" y="389" width="0.0366%" height="15" fill="rgb(232,46,7)" fg:x="572" fg:w="1"/><text x="21.1870%" y="399.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="20.9370%" y="373" width="0.0366%" height="15" fill="rgb(229,129,53)" fg:x="572" fg:w="1"/><text x="21.1870%" y="383.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.04%)</title><rect x="20.9370%" y="357" width="0.0366%" height="15" fill="rgb(234,188,29)" fg:x="572" fg:w="1"/><text x="21.1870%" y="367.50"></text></g><g><title>do_softirq_own_stack (1 samples, 0.04%)</title><rect x="20.9370%" y="341" width="0.0366%" height="15" fill="rgb(246,141,4)" fg:x="572" fg:w="1"/><text x="21.1870%" y="351.50"></text></g><g><title>asm_call_sysvec_on_stack (1 samples, 0.04%)</title><rect x="20.9370%" y="325" width="0.0366%" height="15" fill="rgb(229,23,39)" fg:x="572" fg:w="1"/><text x="21.1870%" y="335.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="20.9370%" y="309" width="0.0366%" height="15" fill="rgb(206,12,3)" fg:x="572" fg:w="1"/><text x="21.1870%" y="319.50"></text></g><g><title>rebalance_domains (1 samples, 0.04%)</title><rect x="20.9370%" y="293" width="0.0366%" height="15" fill="rgb(252,226,20)" fg:x="572" fg:w="1"/><text x="21.1870%" y="303.50"></text></g><g><title>entry_SYSCALL_64 (3 samples, 0.11%)</title><rect x="20.9736%" y="389" width="0.1098%" height="15" fill="rgb(216,123,35)" fg:x="573" fg:w="3"/><text x="21.2236%" y="399.50"></text></g><g><title>__x86_retpoline_rax (1 samples, 0.04%)</title><rect x="23.0600%" y="341" width="0.0366%" height="15" fill="rgb(212,68,40)" fg:x="630" fg:w="1"/><text x="23.3100%" y="351.50"></text></g><g><title>_cond_resched (4 samples, 0.15%)</title><rect x="25.3294%" y="293" width="0.1464%" height="15" fill="rgb(254,125,32)" fg:x="692" fg:w="4"/><text x="25.5794%" y="303.50"></text></g><g><title>rcu_all_qs (3 samples, 0.11%)</title><rect x="25.3660%" y="277" width="0.1098%" height="15" fill="rgb(253,97,22)" fg:x="693" fg:w="3"/><text x="25.6160%" y="287.50"></text></g><g><title>_raw_spin_unlock_irqrestore (5 samples, 0.18%)</title><rect x="25.4758%" y="293" width="0.1830%" height="15" fill="rgb(241,101,14)" fg:x="696" fg:w="5"/><text x="25.7258%" y="303.50"></text></g><g><title>hrtimer_active (1 samples, 0.04%)</title><rect x="25.6589%" y="293" width="0.0366%" height="15" fill="rgb(238,103,29)" fg:x="701" fg:w="1"/><text x="25.9089%" y="303.50"></text></g><g><title>_raw_spin_lock_irqsave (5 samples, 0.18%)</title><rect x="26.2445%" y="277" width="0.1830%" height="15" fill="rgb(233,195,47)" fg:x="717" fg:w="5"/><text x="26.4945%" y="287.50"></text></g><g><title>__x86_indirect_thunk_rax (1 samples, 0.04%)</title><rect x="26.6471%" y="245" width="0.0366%" height="15" fill="rgb(246,218,30)" fg:x="728" fg:w="1"/><text x="26.8971%" y="255.50"></text></g><g><title>ktime_get (15 samples, 0.55%)</title><rect x="26.5373%" y="261" width="0.5490%" height="15" fill="rgb(219,145,47)" fg:x="725" fg:w="15"/><text x="26.7873%" y="271.50"></text></g><g><title>read_tsc (11 samples, 0.40%)</title><rect x="26.6837%" y="245" width="0.4026%" height="15" fill="rgb(243,12,26)" fg:x="729" fg:w="11"/><text x="26.9337%" y="255.50"></text></g><g><title>clockevents_program_event (49 samples, 1.79%)</title><rect x="26.4275%" y="277" width="1.7936%" height="15" fill="rgb(214,87,16)" fg:x="722" fg:w="49"/><text x="26.6775%" y="287.50">c..</text></g><g><title>lapic_next_deadline (31 samples, 1.13%)</title><rect x="27.0864%" y="261" width="1.1347%" height="15" fill="rgb(208,99,42)" fg:x="740" fg:w="31"/><text x="27.3364%" y="271.50"></text></g><g><title>native_write_msr (22 samples, 0.81%)</title><rect x="27.4158%" y="245" width="0.8053%" height="15" fill="rgb(253,99,2)" fg:x="749" fg:w="22"/><text x="27.6658%" y="255.50"></text></g><g><title>enqueue_hrtimer (20 samples, 0.73%)</title><rect x="28.2211%" y="277" width="0.7321%" height="15" fill="rgb(220,168,23)" fg:x="771" fg:w="20"/><text x="28.4711%" y="287.50"></text></g><g><title>timerqueue_add (16 samples, 0.59%)</title><rect x="28.3675%" y="261" width="0.5857%" height="15" fill="rgb(242,38,24)" fg:x="775" fg:w="16"/><text x="28.6175%" y="271.50"></text></g><g><title>rb_insert_color (5 samples, 0.18%)</title><rect x="28.7701%" y="245" width="0.1830%" height="15" fill="rgb(225,182,9)" fg:x="786" fg:w="5"/><text x="29.0201%" y="255.50"></text></g><g><title>get_nohz_timer_target (8 samples, 0.29%)</title><rect x="28.9531%" y="277" width="0.2928%" height="15" fill="rgb(243,178,37)" fg:x="791" fg:w="8"/><text x="29.2031%" y="287.50"></text></g><g><title>hrtimer_reprogram (1 samples, 0.04%)</title><rect x="29.2460%" y="277" width="0.0366%" height="15" fill="rgb(232,139,19)" fg:x="799" fg:w="1"/><text x="29.4960%" y="287.50"></text></g><g><title>ktime_get (20 samples, 0.73%)</title><rect x="29.2826%" y="277" width="0.7321%" height="15" fill="rgb(225,201,24)" fg:x="800" fg:w="20"/><text x="29.5326%" y="287.50"></text></g><g><title>read_tsc (10 samples, 0.37%)</title><rect x="29.6486%" y="261" width="0.3660%" height="15" fill="rgb(221,47,46)" fg:x="810" fg:w="10"/><text x="29.8986%" y="271.50"></text></g><g><title>hrtimer_start_range_ns (119 samples, 4.36%)</title><rect x="25.6955%" y="293" width="4.3558%" height="15" fill="rgb(249,23,13)" fg:x="702" fg:w="119"/><text x="25.9455%" y="303.50">hrtim..</text></g><g><title>tick_program_event (1 samples, 0.04%)</title><rect x="30.0146%" y="277" width="0.0366%" height="15" fill="rgb(219,9,5)" fg:x="820" fg:w="1"/><text x="30.2646%" y="287.50"></text></g><g><title>_raw_spin_lock (6 samples, 0.22%)</title><rect x="32.3206%" y="245" width="0.2196%" height="15" fill="rgb(254,171,16)" fg:x="883" fg:w="6"/><text x="32.5706%" y="255.50"></text></g><g><title>__perf_event_task_sched_out (22 samples, 0.81%)</title><rect x="31.9912%" y="261" width="0.8053%" height="15" fill="rgb(230,171,20)" fg:x="874" fg:w="22"/><text x="32.2412%" y="271.50"></text></g><g><title>x86_pmu_disable (7 samples, 0.26%)</title><rect x="32.5403%" y="245" width="0.2562%" height="15" fill="rgb(210,71,41)" fg:x="889" fg:w="7"/><text x="32.7903%" y="255.50"></text></g><g><title>__x86_indirect_thunk_rax (1 samples, 0.04%)</title><rect x="32.7965%" y="261" width="0.0366%" height="15" fill="rgb(206,173,20)" fg:x="896" fg:w="1"/><text x="33.0465%" y="271.50"></text></g><g><title>__x86_retpoline_rax (2 samples, 0.07%)</title><rect x="32.8331%" y="261" width="0.0732%" height="15" fill="rgb(233,88,34)" fg:x="897" fg:w="2"/><text x="33.0831%" y="271.50"></text></g><g><title>_raw_spin_lock (2 samples, 0.07%)</title><rect x="32.9063%" y="261" width="0.0732%" height="15" fill="rgb(223,209,46)" fg:x="899" fg:w="2"/><text x="33.1563%" y="271.50"></text></g><g><title>clear_buddies (1 samples, 0.04%)</title><rect x="34.8829%" y="229" width="0.0366%" height="15" fill="rgb(250,43,18)" fg:x="953" fg:w="1"/><text x="35.1329%" y="239.50"></text></g><g><title>reweight_entity (11 samples, 0.40%)</title><rect x="34.9195%" y="229" width="0.4026%" height="15" fill="rgb(208,13,10)" fg:x="954" fg:w="11"/><text x="35.1695%" y="239.50"></text></g><g><title>update_cfs_group (26 samples, 0.95%)</title><rect x="35.3221%" y="229" width="0.9517%" height="15" fill="rgb(212,200,36)" fg:x="965" fg:w="26"/><text x="35.5721%" y="239.50"></text></g><g><title>__calc_delta (6 samples, 0.22%)</title><rect x="36.9327%" y="213" width="0.2196%" height="15" fill="rgb(225,90,30)" fg:x="1009" fg:w="6"/><text x="37.1827%" y="223.50"></text></g><g><title>cpuacct_charge (34 samples, 1.24%)</title><rect x="37.1523%" y="213" width="1.2445%" height="15" fill="rgb(236,182,39)" fg:x="1015" fg:w="34"/><text x="37.4023%" y="223.50"></text></g><g><title>rcu_read_unlock_strict (1 samples, 0.04%)</title><rect x="38.3968%" y="213" width="0.0366%" height="15" fill="rgb(212,144,35)" fg:x="1049" fg:w="1"/><text x="38.6468%" y="223.50"></text></g><g><title>update_curr (66 samples, 2.42%)</title><rect x="36.2738%" y="229" width="2.4158%" height="15" fill="rgb(228,63,44)" fg:x="991" fg:w="66"/><text x="36.5238%" y="239.50">up..</text></g><g><title>update_min_vruntime (7 samples, 0.26%)</title><rect x="38.4334%" y="213" width="0.2562%" height="15" fill="rgb(228,109,6)" fg:x="1050" fg:w="7"/><text x="38.6834%" y="223.50"></text></g><g><title>__update_load_avg_cfs_rq (20 samples, 0.73%)</title><rect x="38.9092%" y="213" width="0.7321%" height="15" fill="rgb(238,117,24)" fg:x="1063" fg:w="20"/><text x="39.1592%" y="223.50"></text></g><g><title>dequeue_entity (171 samples, 6.26%)</title><rect x="33.8214%" y="245" width="6.2592%" height="15" fill="rgb(242,26,26)" fg:x="924" fg:w="171"/><text x="34.0714%" y="255.50">dequeue_..</text></g><g><title>update_load_avg (38 samples, 1.39%)</title><rect x="38.6896%" y="229" width="1.3909%" height="15" fill="rgb(221,92,48)" fg:x="1057" fg:w="38"/><text x="38.9396%" y="239.50"></text></g><g><title>__update_load_avg_se (12 samples, 0.44%)</title><rect x="39.6413%" y="213" width="0.4392%" height="15" fill="rgb(209,209,32)" fg:x="1083" fg:w="12"/><text x="39.8913%" y="223.50"></text></g><g><title>dequeue_task_fair (198 samples, 7.25%)</title><rect x="32.9795%" y="261" width="7.2474%" height="15" fill="rgb(221,70,22)" fg:x="901" fg:w="198"/><text x="33.2295%" y="271.50">dequeue_ta..</text></g><g><title>update_min_vruntime (4 samples, 0.15%)</title><rect x="40.0805%" y="245" width="0.1464%" height="15" fill="rgb(248,145,5)" fg:x="1095" fg:w="4"/><text x="40.3305%" y="255.50"></text></g><g><title>__perf_event_task_sched_in (131 samples, 4.80%)</title><rect x="41.1054%" y="245" width="4.7950%" height="15" fill="rgb(226,116,26)" fg:x="1123" fg:w="131"/><text x="41.3554%" y="255.50">__perf..</text></g><g><title>__intel_pmu_enable_all.constprop.0 (124 samples, 4.54%)</title><rect x="41.3616%" y="229" width="4.5388%" height="15" fill="rgb(244,5,17)" fg:x="1130" fg:w="124"/><text x="41.6116%" y="239.50">__int..</text></g><g><title>native_write_msr (119 samples, 4.36%)</title><rect x="41.5447%" y="213" width="4.3558%" height="15" fill="rgb(252,159,33)" fg:x="1135" fg:w="119"/><text x="41.7947%" y="223.50">nativ..</text></g><g><title>finish_task_switch (159 samples, 5.82%)</title><rect x="40.2269%" y="261" width="5.8199%" height="15" fill="rgb(206,71,0)" fg:x="1099" fg:w="159"/><text x="40.4769%" y="271.50">finish_..</text></g><g><title>asm_sysvec_apic_timer_interrupt (4 samples, 0.15%)</title><rect x="45.9004%" y="245" width="0.1464%" height="15" fill="rgb(233,118,54)" fg:x="1254" fg:w="4"/><text x="46.1504%" y="255.50"></text></g><g><title>sysvec_apic_timer_interrupt (2 samples, 0.07%)</title><rect x="45.9736%" y="229" width="0.0732%" height="15" fill="rgb(234,83,48)" fg:x="1256" fg:w="2"/><text x="46.2236%" y="239.50"></text></g><g><title>asm_call_sysvec_on_stack (2 samples, 0.07%)</title><rect x="45.9736%" y="213" width="0.0732%" height="15" fill="rgb(228,3,54)" fg:x="1256" fg:w="2"/><text x="46.2236%" y="223.50"></text></g><g><title>__sysvec_apic_timer_interrupt (2 samples, 0.07%)</title><rect x="45.9736%" y="197" width="0.0732%" height="15" fill="rgb(226,155,13)" fg:x="1256" fg:w="2"/><text x="46.2236%" y="207.50"></text></g><g><title>hrtimer_interrupt (2 samples, 0.07%)</title><rect x="45.9736%" y="181" width="0.0732%" height="15" fill="rgb(241,28,37)" fg:x="1256" fg:w="2"/><text x="46.2236%" y="191.50"></text></g><g><title>__hrtimer_run_queues (2 samples, 0.07%)</title><rect x="45.9736%" y="165" width="0.0732%" height="15" fill="rgb(233,93,10)" fg:x="1256" fg:w="2"/><text x="46.2236%" y="175.50"></text></g><g><title>tick_sched_timer (2 samples, 0.07%)</title><rect x="45.9736%" y="149" width="0.0732%" height="15" fill="rgb(225,113,19)" fg:x="1256" fg:w="2"/><text x="46.2236%" y="159.50"></text></g><g><title>timekeeping_advance (1 samples, 0.04%)</title><rect x="46.0102%" y="133" width="0.0366%" height="15" fill="rgb(241,2,18)" fg:x="1257" fg:w="1"/><text x="46.2602%" y="143.50"></text></g><g><title>timekeeping_update (1 samples, 0.04%)</title><rect x="46.0102%" y="117" width="0.0366%" height="15" fill="rgb(228,207,21)" fg:x="1257" fg:w="1"/><text x="46.2602%" y="127.50"></text></g><g><title>raw_notifier_call_chain (1 samples, 0.04%)</title><rect x="46.0102%" y="101" width="0.0366%" height="15" fill="rgb(213,211,35)" fg:x="1257" fg:w="1"/><text x="46.2602%" y="111.50"></text></g><g><title>pvclock_gtod_notify (1 samples, 0.04%)</title><rect x="46.0102%" y="85" width="0.0366%" height="15" fill="rgb(209,83,10)" fg:x="1257" fg:w="1"/><text x="46.2602%" y="95.50"></text></g><g><title>hrtick_update (2 samples, 0.07%)</title><rect x="46.0469%" y="261" width="0.0732%" height="15" fill="rgb(209,164,1)" fg:x="1258" fg:w="2"/><text x="46.2969%" y="271.50"></text></g><g><title>_raw_spin_lock_irqsave (26 samples, 0.95%)</title><rect x="47.8038%" y="213" width="0.9517%" height="15" fill="rgb(213,184,43)" fg:x="1306" fg:w="26"/><text x="48.0538%" y="223.50"></text></g><g><title>_raw_spin_unlock_irqrestore (7 samples, 0.26%)</title><rect x="48.7555%" y="213" width="0.2562%" height="15" fill="rgb(231,61,34)" fg:x="1332" fg:w="7"/><text x="49.0055%" y="223.50"></text></g><g><title>_find_next_bit.constprop.0 (3 samples, 0.11%)</title><rect x="49.0483%" y="197" width="0.1098%" height="15" fill="rgb(235,75,3)" fg:x="1340" fg:w="3"/><text x="49.2983%" y="207.50"></text></g><g><title>cpumask_next (5 samples, 0.18%)</title><rect x="49.0117%" y="213" width="0.1830%" height="15" fill="rgb(220,106,47)" fg:x="1339" fg:w="5"/><text x="49.2617%" y="223.50"></text></g><g><title>find_next_bit (1 samples, 0.04%)</title><rect x="49.1581%" y="197" width="0.0366%" height="15" fill="rgb(210,196,33)" fg:x="1343" fg:w="1"/><text x="49.4081%" y="207.50"></text></g><g><title>idle_cpu (29 samples, 1.06%)</title><rect x="49.1947%" y="213" width="1.0615%" height="15" fill="rgb(229,154,42)" fg:x="1344" fg:w="29"/><text x="49.4447%" y="223.50"></text></g><g><title>__update_load_avg_cfs_rq (2 samples, 0.07%)</title><rect x="50.4026%" y="197" width="0.0732%" height="15" fill="rgb(228,114,26)" fg:x="1377" fg:w="2"/><text x="50.6526%" y="207.50"></text></g><g><title>update_rq_clock (2 samples, 0.07%)</title><rect x="50.4758%" y="197" width="0.0732%" height="15" fill="rgb(208,144,1)" fg:x="1379" fg:w="2"/><text x="50.7258%" y="207.50"></text></g><g><title>update_blocked_averages (9 samples, 0.33%)</title><rect x="50.2562%" y="213" width="0.3294%" height="15" fill="rgb(239,112,37)" fg:x="1373" fg:w="9"/><text x="50.5062%" y="223.50"></text></g><g><title>update_rt_rq_load_avg (1 samples, 0.04%)</title><rect x="50.5490%" y="197" width="0.0366%" height="15" fill="rgb(210,96,50)" fg:x="1381" fg:w="1"/><text x="50.7990%" y="207.50"></text></g><g><title>_nohz_idle_balance (99 samples, 3.62%)</title><rect x="47.5110%" y="229" width="3.6237%" height="15" fill="rgb(222,178,2)" fg:x="1298" fg:w="99"/><text x="47.7610%" y="239.50">_noh..</text></g><g><title>update_rq_clock (15 samples, 0.55%)</title><rect x="50.5857%" y="213" width="0.5490%" height="15" fill="rgb(226,74,18)" fg:x="1382" fg:w="15"/><text x="50.8357%" y="223.50"></text></g><g><title>sched_clock_cpu (5 samples, 0.18%)</title><rect x="50.9517%" y="197" width="0.1830%" height="15" fill="rgb(225,67,54)" fg:x="1392" fg:w="5"/><text x="51.2017%" y="207.50"></text></g><g><title>sched_clock (5 samples, 0.18%)</title><rect x="50.9517%" y="181" width="0.1830%" height="15" fill="rgb(251,92,32)" fg:x="1392" fg:w="5"/><text x="51.2017%" y="191.50"></text></g><g><title>native_sched_clock (5 samples, 0.18%)</title><rect x="50.9517%" y="165" width="0.1830%" height="15" fill="rgb(228,149,22)" fg:x="1392" fg:w="5"/><text x="51.2017%" y="175.50"></text></g><g><title>pick_next_task_fair (140 samples, 5.12%)</title><rect x="46.1201%" y="261" width="5.1245%" height="15" fill="rgb(243,54,13)" fg:x="1260" fg:w="140"/><text x="46.3701%" y="271.50">pick_n..</text></g><g><title>newidle_balance (131 samples, 4.80%)</title><rect x="46.4495%" y="245" width="4.7950%" height="15" fill="rgb(243,180,28)" fg:x="1269" fg:w="131"/><text x="46.6995%" y="255.50">newidl..</text></g><g><title>load_balance (3 samples, 0.11%)</title><rect x="51.1347%" y="229" width="0.1098%" height="15" fill="rgb(208,167,24)" fg:x="1397" fg:w="3"/><text x="51.3847%" y="239.50"></text></g><g><title>find_busiest_group (2 samples, 0.07%)</title><rect x="51.1713%" y="213" width="0.0732%" height="15" fill="rgb(245,73,45)" fg:x="1398" fg:w="2"/><text x="51.4213%" y="223.50"></text></g><g><title>update_sd_lb_stats.constprop.0 (2 samples, 0.07%)</title><rect x="51.1713%" y="197" width="0.0732%" height="15" fill="rgb(237,203,48)" fg:x="1398" fg:w="2"/><text x="51.4213%" y="207.50"></text></g><g><title>idle_cpu (1 samples, 0.04%)</title><rect x="51.2079%" y="181" width="0.0366%" height="15" fill="rgb(211,197,16)" fg:x="1399" fg:w="1"/><text x="51.4579%" y="191.50"></text></g><g><title>__update_idle_core (22 samples, 0.81%)</title><rect x="51.2445%" y="245" width="0.8053%" height="15" fill="rgb(243,99,51)" fg:x="1400" fg:w="22"/><text x="51.4945%" y="255.50"></text></g><g><title>pick_next_task_idle (23 samples, 0.84%)</title><rect x="51.2445%" y="261" width="0.8419%" height="15" fill="rgb(215,123,29)" fg:x="1400" fg:w="23"/><text x="51.4945%" y="271.50"></text></g><g><title>rcu_read_unlock_strict (1 samples, 0.04%)</title><rect x="52.0498%" y="245" width="0.0366%" height="15" fill="rgb(239,186,37)" fg:x="1422" fg:w="1"/><text x="52.2998%" y="255.50"></text></g><g><title>psi_flags_change (2 samples, 0.07%)</title><rect x="52.7452%" y="245" width="0.0732%" height="15" fill="rgb(252,136,39)" fg:x="1441" fg:w="2"/><text x="52.9952%" y="255.50"></text></g><g><title>psi_task_change (57 samples, 2.09%)</title><rect x="52.0864%" y="261" width="2.0864%" height="15" fill="rgb(223,213,32)" fg:x="1423" fg:w="57"/><text x="52.3364%" y="271.50">p..</text></g><g><title>psi_group_change (37 samples, 1.35%)</title><rect x="52.8184%" y="245" width="1.3543%" height="15" fill="rgb(233,115,5)" fg:x="1443" fg:w="37"/><text x="53.0684%" y="255.50"></text></g><g><title>record_times (4 samples, 0.15%)</title><rect x="54.0264%" y="229" width="0.1464%" height="15" fill="rgb(207,226,44)" fg:x="1476" fg:w="4"/><text x="54.2764%" y="239.50"></text></g><g><title>sched_clock_cpu (3 samples, 0.11%)</title><rect x="54.0630%" y="213" width="0.1098%" height="15" fill="rgb(208,126,0)" fg:x="1477" fg:w="3"/><text x="54.3130%" y="223.50"></text></g><g><title>sched_clock (3 samples, 0.11%)</title><rect x="54.0630%" y="197" width="0.1098%" height="15" fill="rgb(244,66,21)" fg:x="1477" fg:w="3"/><text x="54.3130%" y="207.50"></text></g><g><title>native_sched_clock (3 samples, 0.11%)</title><rect x="54.0630%" y="181" width="0.1098%" height="15" fill="rgb(222,97,12)" fg:x="1477" fg:w="3"/><text x="54.3130%" y="191.50"></text></g><g><title>psi_task_switch (1 samples, 0.04%)</title><rect x="54.1728%" y="261" width="0.0366%" height="15" fill="rgb(219,213,19)" fg:x="1480" fg:w="1"/><text x="54.4228%" y="271.50"></text></g><g><title>put_prev_task_fair (31 samples, 1.13%)</title><rect x="54.2094%" y="261" width="1.1347%" height="15" fill="rgb(252,169,30)" fg:x="1481" fg:w="31"/><text x="54.4594%" y="271.50"></text></g><g><title>put_prev_entity (16 samples, 0.59%)</title><rect x="54.7584%" y="245" width="0.5857%" height="15" fill="rgb(206,32,51)" fg:x="1496" fg:w="16"/><text x="55.0084%" y="255.50"></text></g><g><title>check_cfs_rq_runtime (4 samples, 0.15%)</title><rect x="55.1977%" y="229" width="0.1464%" height="15" fill="rgb(250,172,42)" fg:x="1508" fg:w="4"/><text x="55.4477%" y="239.50"></text></g><g><title>do_nanosleep (861 samples, 31.52%)</title><rect x="24.1947%" y="309" width="31.5154%" height="15" fill="rgb(209,34,43)" fg:x="661" fg:w="861"/><text x="24.4447%" y="319.50">do_nanosleep</text></g><g><title>schedule (701 samples, 25.66%)</title><rect x="30.0512%" y="293" width="25.6589%" height="15" fill="rgb(223,11,35)" fg:x="821" fg:w="701"/><text x="30.3012%" y="303.50">schedule</text></g><g><title>__schedule (683 samples, 25.00%)</title><rect x="30.7101%" y="277" width="25.0000%" height="15" fill="rgb(251,219,26)" fg:x="839" fg:w="683"/><text x="30.9601%" y="287.50">__schedule</text></g><g><title>update_rq_clock (10 samples, 0.37%)</title><rect x="55.3441%" y="261" width="0.3660%" height="15" fill="rgb(231,119,3)" fg:x="1512" fg:w="10"/><text x="55.5941%" y="271.50"></text></g><g><title>sched_clock_cpu (7 samples, 0.26%)</title><rect x="55.4539%" y="245" width="0.2562%" height="15" fill="rgb(216,97,11)" fg:x="1515" fg:w="7"/><text x="55.7039%" y="255.50"></text></g><g><title>sched_clock (7 samples, 0.26%)</title><rect x="55.4539%" y="229" width="0.2562%" height="15" fill="rgb(223,59,9)" fg:x="1515" fg:w="7"/><text x="55.7039%" y="239.50"></text></g><g><title>native_sched_clock (7 samples, 0.26%)</title><rect x="55.4539%" y="213" width="0.2562%" height="15" fill="rgb(233,93,31)" fg:x="1515" fg:w="7"/><text x="55.7039%" y="223.50"></text></g><g><title>common_nsleep (906 samples, 33.16%)</title><rect x="23.0966%" y="341" width="33.1625%" height="15" fill="rgb(239,81,33)" fg:x="631" fg:w="906"/><text x="23.3466%" y="351.50">common_nsleep</text></g><g><title>hrtimer_nanosleep (897 samples, 32.83%)</title><rect x="23.4261%" y="325" width="32.8331%" height="15" fill="rgb(213,120,34)" fg:x="640" fg:w="897"/><text x="23.6761%" y="335.50">hrtimer_nanosleep</text></g><g><title>hrtimer_init_sleeper (15 samples, 0.55%)</title><rect x="55.7101%" y="309" width="0.5490%" height="15" fill="rgb(243,49,53)" fg:x="1522" fg:w="15"/><text x="55.9601%" y="319.50"></text></g><g><title>__hrtimer_init (15 samples, 0.55%)</title><rect x="55.7101%" y="293" width="0.5490%" height="15" fill="rgb(247,216,33)" fg:x="1522" fg:w="15"/><text x="55.9601%" y="303.50"></text></g><g><title>copy_user_enhanced_fast_string (4 samples, 0.15%)</title><rect x="56.4788%" y="309" width="0.1464%" height="15" fill="rgb(226,26,14)" fg:x="1543" fg:w="4"/><text x="56.7288%" y="319.50"></text></g><g><title>do_syscall_64 (967 samples, 35.40%)</title><rect x="21.4129%" y="373" width="35.3953%" height="15" fill="rgb(215,49,53)" fg:x="585" fg:w="967"/><text x="21.6629%" y="383.50">do_syscall_64</text></g><g><title>__x64_sys_clock_nanosleep (953 samples, 34.88%)</title><rect x="21.9253%" y="357" width="34.8829%" height="15" fill="rgb(245,162,40)" fg:x="599" fg:w="953"/><text x="22.1753%" y="367.50">__x64_sys_clock_nanosleep</text></g><g><title>get_timespec64 (15 samples, 0.55%)</title><rect x="56.2592%" y="341" width="0.5490%" height="15" fill="rgb(229,68,17)" fg:x="1537" fg:w="15"/><text x="56.5092%" y="351.50"></text></g><g><title>_copy_from_user (10 samples, 0.37%)</title><rect x="56.4422%" y="325" width="0.3660%" height="15" fill="rgb(213,182,10)" fg:x="1542" fg:w="10"/><text x="56.6922%" y="335.50"></text></g><g><title>copy_user_generic_unrolled (5 samples, 0.18%)</title><rect x="56.6252%" y="309" width="0.1830%" height="15" fill="rgb(245,125,30)" fg:x="1547" fg:w="5"/><text x="56.8752%" y="319.50"></text></g><g><title>fpregs_assert_state_consistent (4 samples, 0.15%)</title><rect x="60.2489%" y="341" width="0.1464%" height="15" fill="rgb(232,202,2)" fg:x="1646" fg:w="4"/><text x="60.4989%" y="351.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1,094 samples, 40.04%)</title><rect x="21.0835%" y="389" width="40.0439%" height="15" fill="rgb(237,140,51)" fg:x="576" fg:w="1094"/><text x="21.3335%" y="399.50">entry_SYSCALL_64_after_hwframe</text></g><g><title>syscall_exit_to_user_mode (118 samples, 4.32%)</title><rect x="56.8082%" y="373" width="4.3192%" height="15" fill="rgb(236,157,25)" fg:x="1552" fg:w="118"/><text x="57.0582%" y="383.50">sysca..</text></g><g><title>exit_to_user_mode_prepare (28 samples, 1.02%)</title><rect x="60.1025%" y="357" width="1.0249%" height="15" fill="rgb(219,209,0)" fg:x="1642" fg:w="28"/><text x="60.3525%" y="367.50"></text></g><g><title>switch_fpu_return (20 samples, 0.73%)</title><rect x="60.3953%" y="341" width="0.7321%" height="15" fill="rgb(240,116,54)" fg:x="1650" fg:w="20"/><text x="60.6453%" y="351.50"></text></g><g><title>std::thread::sleep (1,209 samples, 44.25%)</title><rect x="18.5944%" y="453" width="44.2533%" height="15" fill="rgb(216,10,36)" fg:x="508" fg:w="1209"/><text x="18.8444%" y="463.50">std::thread::sleep</text></g><g><title>std::sys::unix::thread::Thread::sleep (1,209 samples, 44.25%)</title><rect x="18.5944%" y="437" width="44.2533%" height="15" fill="rgb(222,72,44)" fg:x="508" fg:w="1209"/><text x="18.8444%" y="447.50">std::sys::unix::thread::Thread::sleep</text></g><g><title>__GI___nanosleep (1,195 samples, 43.74%)</title><rect x="19.1069%" y="421" width="43.7408%" height="15" fill="rgb(232,159,9)" fg:x="522" fg:w="1195"/><text x="19.3569%" y="431.50">__GI___nanosleep</text></g><g><title>__GI___clock_nanosleep (1,191 samples, 43.59%)</title><rect x="19.2533%" y="405" width="43.5944%" height="15" fill="rgb(210,39,32)" fg:x="526" fg:w="1191"/><text x="19.5033%" y="415.50">__GI___clock_nanosleep</text></g><g><title>syscall_return_via_sysret (47 samples, 1.72%)</title><rect x="61.1274%" y="389" width="1.7204%" height="15" fill="rgb(216,194,45)" fg:x="1670" fg:w="47"/><text x="61.3774%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.04%)</title><rect x="62.8477%" y="437" width="0.0366%" height="15" fill="rgb(218,18,35)" fg:x="1717" fg:w="1"/><text x="63.0977%" y="447.50"></text></g><g><title>std::time::SystemTime::duration_since (3 samples, 0.11%)</title><rect x="62.8477%" y="453" width="0.1098%" height="15" fill="rgb(207,83,51)" fg:x="1717" fg:w="3"/><text x="63.0977%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (2 samples, 0.07%)</title><rect x="62.8843%" y="437" width="0.0732%" height="15" fill="rgb(225,63,43)" fg:x="1718" fg:w="2"/><text x="63.1343%" y="447.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (2 samples, 0.07%)</title><rect x="62.8843%" y="421" width="0.0732%" height="15" fill="rgb(207,57,36)" fg:x="1718" fg:w="2"/><text x="63.1343%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (2 samples, 0.07%)</title><rect x="62.8843%" y="405" width="0.0732%" height="15" fill="rgb(216,99,33)" fg:x="1718" fg:w="2"/><text x="63.1343%" y="415.50"></text></g><g><title>core::cmp::PartialOrd::ge (2 samples, 0.07%)</title><rect x="62.8843%" y="389" width="0.0732%" height="15" fill="rgb(225,42,16)" fg:x="1718" fg:w="2"/><text x="63.1343%" y="399.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (2 samples, 0.07%)</title><rect x="62.8843%" y="373" width="0.0732%" height="15" fill="rgb(220,201,45)" fg:x="1718" fg:w="2"/><text x="63.1343%" y="383.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (2 samples, 0.07%)</title><rect x="62.8843%" y="357" width="0.0732%" height="15" fill="rgb(225,33,4)" fg:x="1718" fg:w="2"/><text x="63.1343%" y="367.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (2 samples, 0.07%)</title><rect x="62.8843%" y="341" width="0.0732%" height="15" fill="rgb(224,33,50)" fg:x="1718" fg:w="2"/><text x="63.1343%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (1 samples, 0.04%)</title><rect x="62.9209%" y="325" width="0.0366%" height="15" fill="rgb(246,198,51)" fg:x="1719" fg:w="1"/><text x="63.1709%" y="335.50"></text></g><g><title>colmet_node::sleep_to_round_timestamp (1,226 samples, 44.88%)</title><rect x="18.4114%" y="469" width="44.8755%" height="15" fill="rgb(205,22,4)" fg:x="503" fg:w="1226"/><text x="18.6614%" y="479.50">colmet_node::sleep_to_round_timestamp</text></g><g><title>std::time::SystemTime::now (9 samples, 0.33%)</title><rect x="62.9575%" y="453" width="0.3294%" height="15" fill="rgb(206,3,8)" fg:x="1720" fg:w="9"/><text x="63.2075%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (9 samples, 0.33%)</title><rect x="62.9575%" y="437" width="0.3294%" height="15" fill="rgb(251,23,15)" fg:x="1720" fg:w="9"/><text x="63.2075%" y="447.50"></text></g><g><title>std::sys::unix::time::inner::now (9 samples, 0.33%)</title><rect x="62.9575%" y="421" width="0.3294%" height="15" fill="rgb(252,88,28)" fg:x="1720" fg:w="9"/><text x="63.2075%" y="431.50"></text></g><g><title>__GI___clock_gettime (7 samples, 0.26%)</title><rect x="63.0307%" y="405" width="0.2562%" height="15" fill="rgb(212,127,14)" fg:x="1722" fg:w="7"/><text x="63.2807%" y="415.50"></text></g><g><title>__vdso_clock_gettime (6 samples, 0.22%)</title><rect x="63.0673%" y="389" width="0.2196%" height="15" fill="rgb(247,145,37)" fg:x="1723" fg:w="6"/><text x="63.3173%" y="399.50"></text></g><g><title>[[vdso]] (4 samples, 0.15%)</title><rect x="63.1406%" y="373" width="0.1464%" height="15" fill="rgb(209,117,53)" fg:x="1725" fg:w="4"/><text x="63.3906%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;zmq::message::Message&gt; (15 samples, 0.55%)</title><rect x="63.2870%" y="453" width="0.5490%" height="15" fill="rgb(212,90,42)" fg:x="1729" fg:w="15"/><text x="63.5370%" y="463.50"></text></g><g><title>&lt;zmq::message::Message as core::ops::drop::Drop&gt;::drop (15 samples, 0.55%)</title><rect x="63.2870%" y="437" width="0.5490%" height="15" fill="rgb(218,164,37)" fg:x="1729" fg:w="15"/><text x="63.5370%" y="447.50"></text></g><g><title>[libzmq.so.5.2.4] (3 samples, 0.11%)</title><rect x="63.7262%" y="421" width="0.1098%" height="15" fill="rgb(246,65,34)" fg:x="1741" fg:w="3"/><text x="63.9762%" y="431.50"></text></g><g><title>zmq::PollItem::is_readable (2 samples, 0.07%)</title><rect x="63.8360%" y="453" width="0.0732%" height="15" fill="rgb(231,100,33)" fg:x="1744" fg:w="2"/><text x="64.0860%" y="463.50"></text></g><g><title>zmq::Socket::as_poll_item (1 samples, 0.04%)</title><rect x="63.9092%" y="453" width="0.0366%" height="15" fill="rgb(228,126,14)" fg:x="1746" fg:w="1"/><text x="64.1592%" y="463.50"></text></g><g><title>&lt;zmq_sys::ffi::zmq_msg_t as core::default::Default&gt;::default (1 samples, 0.04%)</title><rect x="64.1654%" y="421" width="0.0366%" height="15" fill="rgb(215,173,21)" fg:x="1753" fg:w="1"/><text x="64.4154%" y="431.50"></text></g><g><title>core::mem::zeroed (1 samples, 0.04%)</title><rect x="64.1654%" y="405" width="0.0366%" height="15" fill="rgb(210,6,40)" fg:x="1753" fg:w="1"/><text x="64.4154%" y="415.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::zeroed (1 samples, 0.04%)</title><rect x="64.1654%" y="389" width="0.0366%" height="15" fill="rgb(212,48,18)" fg:x="1753" fg:w="1"/><text x="64.4154%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (1 samples, 0.04%)</title><rect x="64.1654%" y="373" width="0.0366%" height="15" fill="rgb(230,214,11)" fg:x="1753" fg:w="1"/><text x="64.4154%" y="383.50"></text></g><g><title>core::intrinsics::write_bytes (1 samples, 0.04%)</title><rect x="64.1654%" y="357" width="0.0366%" height="15" fill="rgb(254,105,39)" fg:x="1753" fg:w="1"/><text x="64.4154%" y="367.50"></text></g><g><title>[libzmq.so.5.2.4] (5 samples, 0.18%)</title><rect x="64.4583%" y="405" width="0.1830%" height="15" fill="rgb(245,158,5)" fg:x="1761" fg:w="5"/><text x="64.7083%" y="415.50"></text></g><g><title>zmq::message::Message::new (22 samples, 0.81%)</title><rect x="63.9458%" y="453" width="0.8053%" height="15" fill="rgb(249,208,11)" fg:x="1747" fg:w="22"/><text x="64.1958%" y="463.50"></text></g><g><title>zmq::message::Message::alloc (22 samples, 0.81%)</title><rect x="63.9458%" y="437" width="0.8053%" height="15" fill="rgb(210,39,28)" fg:x="1747" fg:w="22"/><text x="64.1958%" y="447.50"></text></g><g><title>zmq::message::Message::new::{{closure}} (15 samples, 0.55%)</title><rect x="64.2020%" y="421" width="0.5490%" height="15" fill="rgb(211,56,53)" fg:x="1754" fg:w="15"/><text x="64.4520%" y="431.50"></text></g><g><title>zmq_msg_init (3 samples, 0.11%)</title><rect x="64.6413%" y="405" width="0.1098%" height="15" fill="rgb(226,201,30)" fg:x="1766" fg:w="3"/><text x="64.8913%" y="415.50"></text></g><g><title>__libc_disable_asynccancel (1 samples, 0.04%)</title><rect x="67.7160%" y="341" width="0.0366%" height="15" fill="rgb(239,101,34)" fg:x="1850" fg:w="1"/><text x="67.9660%" y="351.50"></text></g><g><title>__libc_enable_asynccancel (4 samples, 0.15%)</title><rect x="67.7526%" y="341" width="0.1464%" height="15" fill="rgb(226,209,5)" fg:x="1851" fg:w="4"/><text x="68.0026%" y="351.50"></text></g><g><title>entry_SYSCALL_64 (3 samples, 0.11%)</title><rect x="67.8990%" y="341" width="0.1098%" height="15" fill="rgb(250,105,47)" fg:x="1855" fg:w="3"/><text x="68.1490%" y="351.50"></text></g><g><title>__check_object_size (6 samples, 0.22%)</title><rect x="69.1069%" y="277" width="0.2196%" height="15" fill="rgb(230,72,3)" fg:x="1888" fg:w="6"/><text x="69.3569%" y="287.50"></text></g><g><title>check_stack_object (2 samples, 0.07%)</title><rect x="69.2533%" y="261" width="0.0732%" height="15" fill="rgb(232,218,39)" fg:x="1892" fg:w="2"/><text x="69.5033%" y="271.50"></text></g><g><title>__fget_light (6 samples, 0.22%)</title><rect x="69.3265%" y="277" width="0.2196%" height="15" fill="rgb(248,166,6)" fg:x="1894" fg:w="6"/><text x="69.5765%" y="287.50"></text></g><g><title>__fget_files (6 samples, 0.22%)</title><rect x="69.3265%" y="261" width="0.2196%" height="15" fill="rgb(247,89,20)" fg:x="1894" fg:w="6"/><text x="69.5765%" y="271.50"></text></g><g><title>copy_user_enhanced_fast_string (4 samples, 0.15%)</title><rect x="69.6193%" y="261" width="0.1464%" height="15" fill="rgb(248,130,54)" fg:x="1902" fg:w="4"/><text x="69.8693%" y="271.50"></text></g><g><title>_copy_from_user (14 samples, 0.51%)</title><rect x="69.5461%" y="277" width="0.5124%" height="15" fill="rgb(234,196,4)" fg:x="1900" fg:w="14"/><text x="69.7961%" y="287.50"></text></g><g><title>copy_user_generic_unrolled (8 samples, 0.29%)</title><rect x="69.7657%" y="261" width="0.2928%" height="15" fill="rgb(250,143,31)" fg:x="1906" fg:w="8"/><text x="70.0157%" y="271.50"></text></g><g><title>eventfd_poll (3 samples, 0.11%)</title><rect x="70.0586%" y="277" width="0.1098%" height="15" fill="rgb(211,110,34)" fg:x="1914" fg:w="3"/><text x="70.3086%" y="287.50"></text></g><g><title>fput_many (5 samples, 0.18%)</title><rect x="70.1684%" y="277" width="0.1830%" height="15" fill="rgb(215,124,48)" fg:x="1917" fg:w="5"/><text x="70.4184%" y="287.50"></text></g><g><title>__x64_sys_poll (60 samples, 2.20%)</title><rect x="68.1918%" y="309" width="2.1962%" height="15" fill="rgb(216,46,13)" fg:x="1863" fg:w="60"/><text x="68.4418%" y="319.50">_..</text></g><g><title>do_sys_poll (56 samples, 2.05%)</title><rect x="68.3382%" y="293" width="2.0498%" height="15" fill="rgb(205,184,25)" fg:x="1867" fg:w="56"/><text x="68.5882%" y="303.50">d..</text></g><g><title>poll_freewait (1 samples, 0.04%)</title><rect x="70.3514%" y="277" width="0.0366%" height="15" fill="rgb(228,1,10)" fg:x="1922" fg:w="1"/><text x="70.6014%" y="287.50"></text></g><g><title>__x86_retpoline_rax (1 samples, 0.04%)</title><rect x="70.3880%" y="309" width="0.0366%" height="15" fill="rgb(213,116,27)" fg:x="1923" fg:w="1"/><text x="70.6380%" y="319.50"></text></g><g><title>do_syscall_64 (64 samples, 2.34%)</title><rect x="68.1186%" y="325" width="2.3426%" height="15" fill="rgb(241,95,50)" fg:x="1861" fg:w="64"/><text x="68.3686%" y="335.50">d..</text></g><g><title>syscall_enter_from_user_mode (1 samples, 0.04%)</title><rect x="70.4246%" y="309" width="0.0366%" height="15" fill="rgb(238,48,32)" fg:x="1924" fg:w="1"/><text x="70.6746%" y="319.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (139 samples, 5.09%)</title><rect x="68.0088%" y="341" width="5.0878%" height="15" fill="rgb(235,113,49)" fg:x="1858" fg:w="139"/><text x="68.2588%" y="351.50">entry_..</text></g><g><title>syscall_exit_to_user_mode (72 samples, 2.64%)</title><rect x="70.4612%" y="325" width="2.6354%" height="15" fill="rgb(205,127,43)" fg:x="1925" fg:w="72"/><text x="70.7112%" y="335.50">sy..</text></g><g><title>exit_to_user_mode_prepare (2 samples, 0.07%)</title><rect x="73.0234%" y="309" width="0.0732%" height="15" fill="rgb(250,162,2)" fg:x="1995" fg:w="2"/><text x="73.2734%" y="319.50"></text></g><g><title>fpregs_assert_state_consistent (1 samples, 0.04%)</title><rect x="73.0600%" y="293" width="0.0366%" height="15" fill="rgb(220,13,41)" fg:x="1996" fg:w="1"/><text x="73.3100%" y="303.50"></text></g><g><title>__GI___poll (194 samples, 7.10%)</title><rect x="67.4231%" y="357" width="7.1010%" height="15" fill="rgb(249,221,25)" fg:x="1842" fg:w="194"/><text x="67.6731%" y="367.50">__GI___poll</text></g><g><title>syscall_return_via_sysret (39 samples, 1.43%)</title><rect x="73.0966%" y="341" width="1.4275%" height="15" fill="rgb(215,208,19)" fg:x="1997" fg:w="39"/><text x="73.3466%" y="351.50"></text></g><g><title>__errno_location (13 samples, 0.48%)</title><rect x="74.5242%" y="357" width="0.4758%" height="15" fill="rgb(236,175,2)" fg:x="2036" fg:w="13"/><text x="74.7742%" y="367.50"></text></g><g><title>[libzmq.so.5.2.4] (212 samples, 7.76%)</title><rect x="67.3865%" y="373" width="7.7599%" height="15" fill="rgb(241,52,2)" fg:x="1841" fg:w="212"/><text x="67.6365%" y="383.50">[libzmq.so...</text></g><g><title>__errno_location@plt (4 samples, 0.15%)</title><rect x="75.0000%" y="357" width="0.1464%" height="15" fill="rgb(248,140,14)" fg:x="2049" fg:w="4"/><text x="75.2500%" y="367.50"></text></g><g><title>[libzmq.so.5.2.4] (218 samples, 7.98%)</title><rect x="67.2035%" y="389" width="7.9795%" height="15" fill="rgb(253,22,42)" fg:x="1836" fg:w="218"/><text x="67.4535%" y="399.50">[libzmq.so...</text></g><g><title>__errno_location (1 samples, 0.04%)</title><rect x="75.1464%" y="373" width="0.0366%" height="15" fill="rgb(234,61,47)" fg:x="2053" fg:w="1"/><text x="75.3964%" y="383.50"></text></g><g><title>__GI___clock_gettime (29 samples, 1.06%)</title><rect x="75.1830%" y="389" width="1.0615%" height="15" fill="rgb(208,226,15)" fg:x="2054" fg:w="29"/><text x="75.4330%" y="399.50"></text></g><g><title>__vdso_clock_gettime (17 samples, 0.62%)</title><rect x="75.6223%" y="373" width="0.6223%" height="15" fill="rgb(217,221,4)" fg:x="2066" fg:w="17"/><text x="75.8723%" y="383.50"></text></g><g><title>[[vdso]] (6 samples, 0.22%)</title><rect x="76.0249%" y="357" width="0.2196%" height="15" fill="rgb(212,174,34)" fg:x="2077" fg:w="6"/><text x="76.2749%" y="367.50"></text></g><g><title>__memmove_avx_unaligned_erms (12 samples, 0.44%)</title><rect x="76.2445%" y="389" width="0.4392%" height="15" fill="rgb(253,83,4)" fg:x="2083" fg:w="12"/><text x="76.4945%" y="399.50"></text></g><g><title>__memset_avx2_unaligned_erms (8 samples, 0.29%)</title><rect x="76.6837%" y="389" width="0.2928%" height="15" fill="rgb(250,195,49)" fg:x="2095" fg:w="8"/><text x="76.9337%" y="399.50"></text></g><g><title>clock_gettime@plt (12 samples, 0.44%)</title><rect x="76.9766%" y="389" width="0.4392%" height="15" fill="rgb(241,192,25)" fg:x="2103" fg:w="12"/><text x="77.2266%" y="399.50"></text></g><g><title>memcpy@plt (3 samples, 0.11%)</title><rect x="77.4158%" y="389" width="0.1098%" height="15" fill="rgb(208,124,10)" fg:x="2115" fg:w="3"/><text x="77.6658%" y="399.50"></text></g><g><title>[libzmq.so.5.2.4] (336 samples, 12.30%)</title><rect x="65.3734%" y="421" width="12.2987%" height="15" fill="rgb(222,33,0)" fg:x="1786" fg:w="336"/><text x="65.6234%" y="431.50">[libzmq.so.5.2.4]</text></g><g><title>[libzmq.so.5.2.4] (316 samples, 11.57%)</title><rect x="66.1054%" y="405" width="11.5666%" height="15" fill="rgb(234,209,28)" fg:x="1806" fg:w="316"/><text x="66.3554%" y="415.50">[libzmq.so.5.2.4]</text></g><g><title>memset@plt (4 samples, 0.15%)</title><rect x="77.5256%" y="389" width="0.1464%" height="15" fill="rgb(224,11,23)" fg:x="2118" fg:w="4"/><text x="77.7756%" y="399.50"></text></g><g><title>__libc_disable_asynccancel (3 samples, 0.11%)</title><rect x="78.4041%" y="405" width="0.1098%" height="15" fill="rgb(232,99,1)" fg:x="2142" fg:w="3"/><text x="78.6541%" y="415.50"></text></g><g><title>__libc_enable_asynccancel (10 samples, 0.37%)</title><rect x="78.5139%" y="405" width="0.3660%" height="15" fill="rgb(237,95,45)" fg:x="2145" fg:w="10"/><text x="78.7639%" y="415.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="78.8799%" y="405" width="0.0366%" height="15" fill="rgb(208,109,11)" fg:x="2155" fg:w="1"/><text x="79.1299%" y="415.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="78.8799%" y="389" width="0.0366%" height="15" fill="rgb(216,190,48)" fg:x="2155" fg:w="1"/><text x="79.1299%" y="399.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.04%)</title><rect x="78.8799%" y="373" width="0.0366%" height="15" fill="rgb(251,171,36)" fg:x="2155" fg:w="1"/><text x="79.1299%" y="383.50"></text></g><g><title>do_softirq_own_stack (1 samples, 0.04%)</title><rect x="78.8799%" y="357" width="0.0366%" height="15" fill="rgb(230,62,22)" fg:x="2155" fg:w="1"/><text x="79.1299%" y="367.50"></text></g><g><title>asm_call_sysvec_on_stack (1 samples, 0.04%)</title><rect x="78.8799%" y="341" width="0.0366%" height="15" fill="rgb(225,114,35)" fg:x="2155" fg:w="1"/><text x="79.1299%" y="351.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="78.8799%" y="325" width="0.0366%" height="15" fill="rgb(215,118,42)" fg:x="2155" fg:w="1"/><text x="79.1299%" y="335.50"></text></g><g><title>run_rebalance_domains (1 samples, 0.04%)</title><rect x="78.8799%" y="309" width="0.0366%" height="15" fill="rgb(243,119,21)" fg:x="2155" fg:w="1"/><text x="79.1299%" y="319.50"></text></g><g><title>update_blocked_averages (1 samples, 0.04%)</title><rect x="78.8799%" y="293" width="0.0366%" height="15" fill="rgb(252,177,53)" fg:x="2155" fg:w="1"/><text x="79.1299%" y="303.50"></text></g><g><title>entry_SYSCALL_64 (33 samples, 1.21%)</title><rect x="78.9165%" y="405" width="1.2079%" height="15" fill="rgb(237,209,29)" fg:x="2156" fg:w="33"/><text x="79.1665%" y="415.50"></text></g><g><title>__check_object_size (1 samples, 0.04%)</title><rect x="82.9063%" y="341" width="0.0366%" height="15" fill="rgb(212,65,23)" fg:x="2265" fg:w="1"/><text x="83.1563%" y="351.50"></text></g><g><title>__fdget (3 samples, 0.11%)</title><rect x="82.9429%" y="341" width="0.1098%" height="15" fill="rgb(230,222,46)" fg:x="2266" fg:w="3"/><text x="83.1929%" y="351.50"></text></g><g><title>__fget_light (23 samples, 0.84%)</title><rect x="83.0527%" y="341" width="0.8419%" height="15" fill="rgb(215,135,32)" fg:x="2269" fg:w="23"/><text x="83.3027%" y="351.50"></text></g><g><title>__fget_files (12 samples, 0.44%)</title><rect x="83.4553%" y="325" width="0.4392%" height="15" fill="rgb(246,101,22)" fg:x="2280" fg:w="12"/><text x="83.7053%" y="335.50"></text></g><g><title>__x86_retpoline_rax (4 samples, 0.15%)</title><rect x="83.8946%" y="341" width="0.1464%" height="15" fill="rgb(206,107,13)" fg:x="2292" fg:w="4"/><text x="84.1446%" y="351.50"></text></g><g><title>copy_user_enhanced_fast_string (6 samples, 0.22%)</title><rect x="84.1874%" y="325" width="0.2196%" height="15" fill="rgb(250,100,44)" fg:x="2300" fg:w="6"/><text x="84.4374%" y="335.50"></text></g><g><title>_copy_from_user (24 samples, 0.88%)</title><rect x="84.0410%" y="341" width="0.8785%" height="15" fill="rgb(231,147,38)" fg:x="2296" fg:w="24"/><text x="84.2910%" y="351.50"></text></g><g><title>copy_user_generic_unrolled (14 samples, 0.51%)</title><rect x="84.4070%" y="325" width="0.5124%" height="15" fill="rgb(229,8,40)" fg:x="2306" fg:w="14"/><text x="84.6570%" y="335.50"></text></g><g><title>eventfd_poll (18 samples, 0.66%)</title><rect x="84.9195%" y="341" width="0.6589%" height="15" fill="rgb(221,135,30)" fg:x="2320" fg:w="18"/><text x="85.1695%" y="351.50"></text></g><g><title>fput_many (3 samples, 0.11%)</title><rect x="85.5783%" y="341" width="0.1098%" height="15" fill="rgb(249,193,18)" fg:x="2338" fg:w="3"/><text x="85.8283%" y="351.50"></text></g><g><title>do_sys_poll (131 samples, 4.80%)</title><rect x="81.1493%" y="357" width="4.7950%" height="15" fill="rgb(209,133,39)" fg:x="2217" fg:w="131"/><text x="81.3993%" y="367.50">do_sys..</text></g><g><title>poll_freewait (7 samples, 0.26%)</title><rect x="85.6881%" y="341" width="0.2562%" height="15" fill="rgb(232,100,14)" fg:x="2341" fg:w="7"/><text x="85.9381%" y="351.50"></text></g><g><title>__x64_sys_poll (156 samples, 5.71%)</title><rect x="80.3807%" y="373" width="5.7101%" height="15" fill="rgb(224,185,1)" fg:x="2196" fg:w="156"/><text x="80.6307%" y="383.50">__x64_s..</text></g><g><title>poll_select_set_timeout (4 samples, 0.15%)</title><rect x="85.9444%" y="357" width="0.1464%" height="15" fill="rgb(223,139,8)" fg:x="2348" fg:w="4"/><text x="86.1944%" y="367.50"></text></g><g><title>do_syscall_64 (163 samples, 5.97%)</title><rect x="80.1977%" y="389" width="5.9663%" height="15" fill="rgb(232,213,38)" fg:x="2191" fg:w="163"/><text x="80.4477%" y="399.50">do_sysca..</text></g><g><title>syscall_enter_from_user_mode (2 samples, 0.07%)</title><rect x="86.0908%" y="373" width="0.0732%" height="15" fill="rgb(207,94,22)" fg:x="2352" fg:w="2"/><text x="86.3408%" y="383.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (254 samples, 9.30%)</title><rect x="80.1245%" y="405" width="9.2972%" height="15" fill="rgb(219,183,54)" fg:x="2189" fg:w="254"/><text x="80.3745%" y="415.50">entry_SYSCALL..</text></g><g><title>syscall_exit_to_user_mode (89 samples, 3.26%)</title><rect x="86.1640%" y="389" width="3.2577%" height="15" fill="rgb(216,185,54)" fg:x="2354" fg:w="89"/><text x="86.4140%" y="399.50">sys..</text></g><g><title>exit_to_user_mode_prepare (4 samples, 0.15%)</title><rect x="89.2753%" y="373" width="0.1464%" height="15" fill="rgb(254,217,39)" fg:x="2439" fg:w="4"/><text x="89.5253%" y="383.50"></text></g><g><title>fpregs_assert_state_consistent (1 samples, 0.04%)</title><rect x="89.3851%" y="357" width="0.0366%" height="15" fill="rgb(240,178,23)" fg:x="2442" fg:w="1"/><text x="89.6351%" y="367.50"></text></g><g><title>__GI___poll (363 samples, 13.29%)</title><rect x="77.6720%" y="421" width="13.2870%" height="15" fill="rgb(218,11,47)" fg:x="2122" fg:w="363"/><text x="77.9220%" y="431.50">__GI___poll</text></g><g><title>syscall_return_via_sysret (42 samples, 1.54%)</title><rect x="89.4217%" y="405" width="1.5373%" height="15" fill="rgb(218,51,51)" fg:x="2443" fg:w="42"/><text x="89.6717%" y="415.50"></text></g><g><title>__libc_pause (1 samples, 0.04%)</title><rect x="90.9590%" y="421" width="0.0366%" height="15" fill="rgb(238,126,27)" fg:x="2485" fg:w="1"/><text x="91.2090%" y="431.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.04%)</title><rect x="90.9590%" y="405" width="0.0366%" height="15" fill="rgb(249,202,22)" fg:x="2485" fg:w="1"/><text x="91.2090%" y="415.50"></text></g><g><title>poll@plt (5 samples, 0.18%)</title><rect x="90.9956%" y="421" width="0.1830%" height="15" fill="rgb(254,195,49)" fg:x="2486" fg:w="5"/><text x="91.2456%" y="431.50"></text></g><g><title>zmq_getsockopt (17 samples, 0.62%)</title><rect x="91.1786%" y="421" width="0.6223%" height="15" fill="rgb(208,123,14)" fg:x="2491" fg:w="17"/><text x="91.4286%" y="431.50"></text></g><g><title>[libzmq.so.5.2.4] (16 samples, 0.59%)</title><rect x="91.2152%" y="405" width="0.5857%" height="15" fill="rgb(224,200,8)" fg:x="2492" fg:w="16"/><text x="91.4652%" y="415.50"></text></g><g><title>colmet_node::zeromq::ZmqSender::receive_config (789 samples, 28.88%)</title><rect x="63.2870%" y="469" width="28.8799%" height="15" fill="rgb(217,61,36)" fg:x="1729" fg:w="789"/><text x="63.5370%" y="479.50">colmet_node::zeromq::ZmqSender::receive_config</text></g><g><title>zmq::poll (749 samples, 27.42%)</title><rect x="64.7511%" y="453" width="27.4158%" height="15" fill="rgb(206,35,45)" fg:x="1769" fg:w="749"/><text x="65.0011%" y="463.50">zmq::poll</text></g><g><title>zmq_poll (748 samples, 27.38%)</title><rect x="64.7877%" y="437" width="27.3792%" height="15" fill="rgb(217,65,33)" fg:x="1770" fg:w="748"/><text x="65.0377%" y="447.50">zmq_poll</text></g><g><title>zmq_getsockopt@plt (10 samples, 0.37%)</title><rect x="91.8009%" y="421" width="0.3660%" height="15" fill="rgb(222,158,48)" fg:x="2508" fg:w="10"/><text x="92.0509%" y="431.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (14 samples, 0.51%)</title><rect x="92.1669%" y="469" width="0.5124%" height="15" fill="rgb(254,2,54)" fg:x="2518" fg:w="14"/><text x="92.4169%" y="479.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (14 samples, 0.51%)</title><rect x="92.1669%" y="453" width="0.5124%" height="15" fill="rgb(250,143,38)" fg:x="2518" fg:w="14"/><text x="92.4169%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (14 samples, 0.51%)</title><rect x="92.1669%" y="437" width="0.5124%" height="15" fill="rgb(248,25,0)" fg:x="2518" fg:w="14"/><text x="92.4169%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (2 samples, 0.07%)</title><rect x="92.6794%" y="469" width="0.0732%" height="15" fill="rgb(206,152,27)" fg:x="2532" fg:w="2"/><text x="92.9294%" y="479.50"></text></g><g><title>core::time::Duration::as_nanos (1 samples, 0.04%)</title><rect x="92.7526%" y="469" width="0.0366%" height="15" fill="rgb(240,77,30)" fg:x="2534" fg:w="1"/><text x="93.0026%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (5 samples, 0.18%)</title><rect x="92.7892%" y="453" width="0.1830%" height="15" fill="rgb(231,5,3)" fg:x="2535" fg:w="5"/><text x="93.0392%" y="463.50"></text></g><g><title>std::time::SystemTime::duration_since (8 samples, 0.29%)</title><rect x="92.7892%" y="469" width="0.2928%" height="15" fill="rgb(207,226,32)" fg:x="2535" fg:w="8"/><text x="93.0392%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (3 samples, 0.11%)</title><rect x="92.9722%" y="453" width="0.1098%" height="15" fill="rgb(222,207,47)" fg:x="2540" fg:w="3"/><text x="93.2222%" y="463.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (2 samples, 0.07%)</title><rect x="93.0088%" y="437" width="0.0732%" height="15" fill="rgb(229,115,45)" fg:x="2541" fg:w="2"/><text x="93.2588%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (1 samples, 0.04%)</title><rect x="93.0454%" y="421" width="0.0366%" height="15" fill="rgb(224,191,6)" fg:x="2542" fg:w="1"/><text x="93.2954%" y="431.50"></text></g><g><title>core::cmp::PartialOrd::ge (1 samples, 0.04%)</title><rect x="93.0454%" y="405" width="0.0366%" height="15" fill="rgb(230,227,24)" fg:x="2542" fg:w="1"/><text x="93.2954%" y="415.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.04%)</title><rect x="93.0454%" y="389" width="0.0366%" height="15" fill="rgb(228,80,19)" fg:x="2542" fg:w="1"/><text x="93.2954%" y="399.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (1 samples, 0.04%)</title><rect x="93.0454%" y="373" width="0.0366%" height="15" fill="rgb(247,229,0)" fg:x="2542" fg:w="1"/><text x="93.2954%" y="383.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (1 samples, 0.04%)</title><rect x="93.0454%" y="357" width="0.0366%" height="15" fill="rgb(237,194,15)" fg:x="2542" fg:w="1"/><text x="93.2954%" y="367.50"></text></g><g><title>std::time::SystemTime::duration_since (1 samples, 0.04%)</title><rect x="93.1186%" y="453" width="0.0366%" height="15" fill="rgb(219,203,20)" fg:x="2544" fg:w="1"/><text x="93.3686%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (1 samples, 0.04%)</title><rect x="93.1186%" y="437" width="0.0366%" height="15" fill="rgb(234,128,8)" fg:x="2544" fg:w="1"/><text x="93.3686%" y="447.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.04%)</title><rect x="93.1186%" y="421" width="0.0366%" height="15" fill="rgb(248,202,8)" fg:x="2544" fg:w="1"/><text x="93.3686%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (1 samples, 0.04%)</title><rect x="93.1186%" y="405" width="0.0366%" height="15" fill="rgb(206,104,37)" fg:x="2544" fg:w="1"/><text x="93.3686%" y="415.50"></text></g><g><title>core::cmp::PartialOrd::ge (1 samples, 0.04%)</title><rect x="93.1186%" y="389" width="0.0366%" height="15" fill="rgb(223,8,27)" fg:x="2544" fg:w="1"/><text x="93.3686%" y="399.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.04%)</title><rect x="93.1186%" y="373" width="0.0366%" height="15" fill="rgb(216,217,28)" fg:x="2544" fg:w="1"/><text x="93.3686%" y="383.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (1 samples, 0.04%)</title><rect x="93.1186%" y="357" width="0.0366%" height="15" fill="rgb(249,199,1)" fg:x="2544" fg:w="1"/><text x="93.3686%" y="367.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (1 samples, 0.04%)</title><rect x="93.1186%" y="341" width="0.0366%" height="15" fill="rgb(240,85,17)" fg:x="2544" fg:w="1"/><text x="93.3686%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (1 samples, 0.04%)</title><rect x="93.1186%" y="325" width="0.0366%" height="15" fill="rgb(206,108,45)" fg:x="2544" fg:w="1"/><text x="93.3686%" y="335.50"></text></g><g><title>std::time::SystemTime::elapsed (11 samples, 0.40%)</title><rect x="93.0820%" y="469" width="0.4026%" height="15" fill="rgb(245,210,41)" fg:x="2543" fg:w="11"/><text x="93.3320%" y="479.50"></text></g><g><title>std::time::SystemTime::now (9 samples, 0.33%)</title><rect x="93.1552%" y="453" width="0.3294%" height="15" fill="rgb(206,13,37)" fg:x="2545" fg:w="9"/><text x="93.4052%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (9 samples, 0.33%)</title><rect x="93.1552%" y="437" width="0.3294%" height="15" fill="rgb(250,61,18)" fg:x="2545" fg:w="9"/><text x="93.4052%" y="447.50"></text></g><g><title>std::sys::unix::time::inner::now (9 samples, 0.33%)</title><rect x="93.1552%" y="421" width="0.3294%" height="15" fill="rgb(235,172,48)" fg:x="2545" fg:w="9"/><text x="93.4052%" y="431.50"></text></g><g><title>__GI___clock_gettime (7 samples, 0.26%)</title><rect x="93.2284%" y="405" width="0.2562%" height="15" fill="rgb(249,201,17)" fg:x="2547" fg:w="7"/><text x="93.4784%" y="415.50"></text></g><g><title>__vdso_clock_gettime (7 samples, 0.26%)</title><rect x="93.2284%" y="389" width="0.2562%" height="15" fill="rgb(219,208,6)" fg:x="2547" fg:w="7"/><text x="93.4784%" y="399.50"></text></g><g><title>[[vdso]] (5 samples, 0.18%)</title><rect x="93.3016%" y="373" width="0.1830%" height="15" fill="rgb(248,31,23)" fg:x="2549" fg:w="5"/><text x="93.5516%" y="383.50"></text></g><g><title>colmet_node::main (2,320 samples, 84.92%)</title><rect x="9.3338%" y="485" width="84.9195%" height="15" fill="rgb(245,15,42)" fg:x="255" fg:w="2320"/><text x="9.5838%" y="495.50">colmet_node::main</text></g><g><title>std::time::SystemTime::now (21 samples, 0.77%)</title><rect x="93.4846%" y="469" width="0.7687%" height="15" fill="rgb(222,217,39)" fg:x="2554" fg:w="21"/><text x="93.7346%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (21 samples, 0.77%)</title><rect x="93.4846%" y="453" width="0.7687%" height="15" fill="rgb(210,219,27)" fg:x="2554" fg:w="21"/><text x="93.7346%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::now (21 samples, 0.77%)</title><rect x="93.4846%" y="437" width="0.7687%" height="15" fill="rgb(252,166,36)" fg:x="2554" fg:w="21"/><text x="93.7346%" y="447.50"></text></g><g><title>__GI___clock_gettime (16 samples, 0.59%)</title><rect x="93.6676%" y="421" width="0.5857%" height="15" fill="rgb(245,132,34)" fg:x="2559" fg:w="16"/><text x="93.9176%" y="431.50"></text></g><g><title>__vdso_clock_gettime (14 samples, 0.51%)</title><rect x="93.7408%" y="405" width="0.5124%" height="15" fill="rgb(236,54,3)" fg:x="2561" fg:w="14"/><text x="93.9908%" y="415.50"></text></g><g><title>[[vdso]] (10 samples, 0.37%)</title><rect x="93.8873%" y="389" width="0.3660%" height="15" fill="rgb(241,173,43)" fg:x="2565" fg:w="10"/><text x="94.1373%" y="399.50"></text></g><g><title>[unknown] (2,409 samples, 88.18%)</title><rect x="6.2225%" y="501" width="88.1772%" height="15" fill="rgb(215,190,9)" fg:x="170" fg:w="2409"/><text x="6.4725%" y="511.50">[unknown]</text></g><g><title>zmq_poll (4 samples, 0.15%)</title><rect x="94.2533%" y="485" width="0.1464%" height="15" fill="rgb(242,101,16)" fg:x="2575" fg:w="4"/><text x="94.5033%" y="495.50"></text></g><g><title>__irqentry_text_end (1 samples, 0.04%)</title><rect x="94.3997%" y="485" width="0.0366%" height="15" fill="rgb(223,190,21)" fg:x="2579" fg:w="1"/><text x="94.6497%" y="495.50"></text></g><g><title>__free_pages_ok (1 samples, 0.04%)</title><rect x="94.4363%" y="421" width="0.0366%" height="15" fill="rgb(215,228,25)" fg:x="2580" fg:w="1"/><text x="94.6863%" y="431.50"></text></g><g><title>__memcg_kmem_uncharge_page (1 samples, 0.04%)</title><rect x="94.4363%" y="405" width="0.0366%" height="15" fill="rgb(225,36,22)" fg:x="2580" fg:w="1"/><text x="94.6863%" y="415.50"></text></g><g><title>__mmdrop (2 samples, 0.07%)</title><rect x="94.4363%" y="437" width="0.0732%" height="15" fill="rgb(251,106,46)" fg:x="2580" fg:w="2"/><text x="94.6863%" y="447.50"></text></g><g><title>pgd_free (1 samples, 0.04%)</title><rect x="94.4729%" y="421" width="0.0366%" height="15" fill="rgb(208,90,1)" fg:x="2581" fg:w="1"/><text x="94.7229%" y="431.50"></text></g><g><title>__GI___clone (18 samples, 0.66%)</title><rect x="94.3997%" y="501" width="0.6589%" height="15" fill="rgb(243,10,4)" fg:x="2579" fg:w="18"/><text x="94.6497%" y="511.50"></text></g><g><title>ret_from_fork (17 samples, 0.62%)</title><rect x="94.4363%" y="485" width="0.6223%" height="15" fill="rgb(212,137,27)" fg:x="2580" fg:w="17"/><text x="94.6863%" y="495.50"></text></g><g><title>schedule_tail (17 samples, 0.62%)</title><rect x="94.4363%" y="469" width="0.6223%" height="15" fill="rgb(231,220,49)" fg:x="2580" fg:w="17"/><text x="94.6863%" y="479.50"></text></g><g><title>finish_task_switch (17 samples, 0.62%)</title><rect x="94.4363%" y="453" width="0.6223%" height="15" fill="rgb(237,96,20)" fg:x="2580" fg:w="17"/><text x="94.6863%" y="463.50"></text></g><g><title>__perf_event_task_sched_in (15 samples, 0.55%)</title><rect x="94.5095%" y="437" width="0.5490%" height="15" fill="rgb(239,229,30)" fg:x="2582" fg:w="15"/><text x="94.7595%" y="447.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (15 samples, 0.55%)</title><rect x="94.5095%" y="421" width="0.5490%" height="15" fill="rgb(219,65,33)" fg:x="2582" fg:w="15"/><text x="94.7595%" y="431.50"></text></g><g><title>native_write_msr (15 samples, 0.55%)</title><rect x="94.5095%" y="405" width="0.5490%" height="15" fill="rgb(243,134,7)" fg:x="2582" fg:w="15"/><text x="94.7595%" y="415.50"></text></g><g><title>[libzmq.so.5.2.4] (4 samples, 0.15%)</title><rect x="95.0586%" y="485" width="0.1464%" height="15" fill="rgb(216,177,54)" fg:x="2597" fg:w="4"/><text x="95.3086%" y="495.50"></text></g><g><title>__GI___poll (1 samples, 0.04%)</title><rect x="95.2050%" y="485" width="0.0366%" height="15" fill="rgb(211,160,20)" fg:x="2601" fg:w="1"/><text x="95.4550%" y="495.50"></text></g><g><title>__libc_pause (11 samples, 0.40%)</title><rect x="95.0586%" y="501" width="0.4026%" height="15" fill="rgb(239,85,39)" fg:x="2597" fg:w="11"/><text x="95.3086%" y="511.50"></text></g><g><title>zmq_poll (6 samples, 0.22%)</title><rect x="95.2416%" y="485" width="0.2196%" height="15" fill="rgb(232,125,22)" fg:x="2602" fg:w="6"/><text x="95.4916%" y="495.50"></text></g><g><title>__udivti3 (7 samples, 0.26%)</title><rect x="95.4612%" y="501" width="0.2562%" height="15" fill="rgb(244,57,34)" fg:x="2608" fg:w="7"/><text x="95.7112%" y="511.50"></text></g><g><title>compiler_builtins::int::udiv::__udivti3 (5 samples, 0.18%)</title><rect x="95.5344%" y="485" width="0.1830%" height="15" fill="rgb(214,203,32)" fg:x="2610" fg:w="5"/><text x="95.7844%" y="495.50"></text></g><g><title>compiler_builtins::int::specialized_div_rem::u128_div_rem (5 samples, 0.18%)</title><rect x="95.5344%" y="469" width="0.1830%" height="15" fill="rgb(207,58,43)" fg:x="2610" fg:w="5"/><text x="95.7844%" y="479.50"></text></g><g><title>compiler_builtins::int::specialized_div_rem::u128_by_u64_div_rem (3 samples, 0.11%)</title><rect x="95.6076%" y="453" width="0.1098%" height="15" fill="rgb(215,193,15)" fg:x="2612" fg:w="3"/><text x="95.8576%" y="463.50"></text></g><g><title>__vdso_clock_gettime (15 samples, 0.55%)</title><rect x="95.7174%" y="501" width="0.5490%" height="15" fill="rgb(232,15,44)" fg:x="2615" fg:w="15"/><text x="95.9674%" y="511.50"></text></g><g><title>_start (1 samples, 0.04%)</title><rect x="96.2665%" y="501" width="0.0366%" height="15" fill="rgb(212,3,48)" fg:x="2630" fg:w="1"/><text x="96.5165%" y="511.50"></text></g><g><title>_dl_start (1 samples, 0.04%)</title><rect x="96.2665%" y="485" width="0.0366%" height="15" fill="rgb(218,128,7)" fg:x="2630" fg:w="1"/><text x="96.5165%" y="495.50"></text></g><g><title>_dl_start_final (1 samples, 0.04%)</title><rect x="96.2665%" y="469" width="0.0366%" height="15" fill="rgb(226,216,39)" fg:x="2630" fg:w="1"/><text x="96.5165%" y="479.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.04%)</title><rect x="96.2665%" y="453" width="0.0366%" height="15" fill="rgb(243,47,51)" fg:x="2630" fg:w="1"/><text x="96.5165%" y="463.50"></text></g><g><title>dl_main (1 samples, 0.04%)</title><rect x="96.2665%" y="437" width="0.0366%" height="15" fill="rgb(241,183,40)" fg:x="2630" fg:w="1"/><text x="96.5165%" y="447.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.04%)</title><rect x="96.2665%" y="421" width="0.0366%" height="15" fill="rgb(231,217,32)" fg:x="2630" fg:w="1"/><text x="96.5165%" y="431.50"></text></g><g><title>elf_dynamic_do_Rela (1 samples, 0.04%)</title><rect x="96.2665%" y="405" width="0.0366%" height="15" fill="rgb(229,61,38)" fg:x="2630" fg:w="1"/><text x="96.5165%" y="415.50"></text></g><g><title>elf_machine_rela (1 samples, 0.04%)</title><rect x="96.2665%" y="389" width="0.0366%" height="15" fill="rgb(225,210,5)" fg:x="2630" fg:w="1"/><text x="96.5165%" y="399.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="96.3031%" y="501" width="0.0366%" height="15" fill="rgb(231,79,45)" fg:x="2631" fg:w="1"/><text x="96.5531%" y="511.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="96.3031%" y="485" width="0.0366%" height="15" fill="rgb(224,100,7)" fg:x="2631" fg:w="1"/><text x="96.5531%" y="495.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="96.3031%" y="469" width="0.0366%" height="15" fill="rgb(241,198,18)" fg:x="2631" fg:w="1"/><text x="96.5531%" y="479.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.04%)</title><rect x="96.3031%" y="453" width="0.0366%" height="15" fill="rgb(252,97,53)" fg:x="2631" fg:w="1"/><text x="96.5531%" y="463.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.04%)</title><rect x="96.3031%" y="437" width="0.0366%" height="15" fill="rgb(220,88,7)" fg:x="2631" fg:w="1"/><text x="96.5531%" y="447.50"></text></g><g><title>tick_sched_timer (1 samples, 0.04%)</title><rect x="96.3031%" y="421" width="0.0366%" height="15" fill="rgb(213,176,14)" fg:x="2631" fg:w="1"/><text x="96.5531%" y="431.50"></text></g><g><title>tick_sched_handle (1 samples, 0.04%)</title><rect x="96.3031%" y="405" width="0.0366%" height="15" fill="rgb(246,73,7)" fg:x="2631" fg:w="1"/><text x="96.5531%" y="415.50"></text></g><g><title>update_process_times (1 samples, 0.04%)</title><rect x="96.3031%" y="389" width="0.0366%" height="15" fill="rgb(245,64,36)" fg:x="2631" fg:w="1"/><text x="96.5531%" y="399.50"></text></g><g><title>scheduler_tick (1 samples, 0.04%)</title><rect x="96.3031%" y="373" width="0.0366%" height="15" fill="rgb(245,80,10)" fg:x="2631" fg:w="1"/><text x="96.5531%" y="383.50"></text></g><g><title>perf_event_task_tick (1 samples, 0.04%)</title><rect x="96.3031%" y="357" width="0.0366%" height="15" fill="rgb(232,107,50)" fg:x="2631" fg:w="1"/><text x="96.5531%" y="367.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (1 samples, 0.04%)</title><rect x="96.3031%" y="341" width="0.0366%" height="15" fill="rgb(253,3,0)" fg:x="2631" fg:w="1"/><text x="96.5531%" y="351.50"></text></g><g><title>native_write_msr (1 samples, 0.04%)</title><rect x="96.3031%" y="325" width="0.0366%" height="15" fill="rgb(212,99,53)" fg:x="2631" fg:w="1"/><text x="96.5531%" y="335.50"></text></g><g><title>core::slice::memchr::memchr_general_case (1 samples, 0.04%)</title><rect x="96.3397%" y="501" width="0.0366%" height="15" fill="rgb(249,111,54)" fg:x="2632" fg:w="1"/><text x="96.5897%" y="511.50"></text></g><g><title>entry_SYSCALL_64 (3 samples, 0.11%)</title><rect x="96.3763%" y="501" width="0.1098%" height="15" fill="rgb(249,55,30)" fg:x="2633" fg:w="3"/><text x="96.6263%" y="511.50"></text></g><g><title>clockevents_program_event (1 samples, 0.04%)</title><rect x="96.7057%" y="389" width="0.0366%" height="15" fill="rgb(237,47,42)" fg:x="2642" fg:w="1"/><text x="96.9557%" y="399.50"></text></g><g><title>lapic_next_deadline (1 samples, 0.04%)</title><rect x="96.7057%" y="373" width="0.0366%" height="15" fill="rgb(211,20,18)" fg:x="2642" fg:w="1"/><text x="96.9557%" y="383.50"></text></g><g><title>enqueue_hrtimer (1 samples, 0.04%)</title><rect x="96.7423%" y="389" width="0.0366%" height="15" fill="rgb(231,203,46)" fg:x="2643" fg:w="1"/><text x="96.9923%" y="399.50"></text></g><g><title>timerqueue_add (1 samples, 0.04%)</title><rect x="96.7423%" y="373" width="0.0366%" height="15" fill="rgb(237,142,3)" fg:x="2643" fg:w="1"/><text x="96.9923%" y="383.50"></text></g><g><title>hrtimer_start_range_ns (4 samples, 0.15%)</title><rect x="96.6691%" y="405" width="0.1464%" height="15" fill="rgb(241,107,1)" fg:x="2641" fg:w="4"/><text x="96.9191%" y="415.50"></text></g><g><title>ktime_get (1 samples, 0.04%)</title><rect x="96.7789%" y="389" width="0.0366%" height="15" fill="rgb(229,83,13)" fg:x="2644" fg:w="1"/><text x="97.0289%" y="399.50"></text></g><g><title>__list_del_entry_valid (1 samples, 0.04%)</title><rect x="96.9619%" y="341" width="0.0366%" height="15" fill="rgb(241,91,40)" fg:x="2649" fg:w="1"/><text x="97.2119%" y="351.50"></text></g><g><title>reweight_entity (1 samples, 0.04%)</title><rect x="96.9985%" y="341" width="0.0366%" height="15" fill="rgb(225,3,45)" fg:x="2650" fg:w="1"/><text x="97.2485%" y="351.50"></text></g><g><title>update_curr (3 samples, 0.11%)</title><rect x="97.0351%" y="341" width="0.1098%" height="15" fill="rgb(244,223,14)" fg:x="2651" fg:w="3"/><text x="97.2851%" y="351.50"></text></g><g><title>cpuacct_charge (3 samples, 0.11%)</title><rect x="97.0351%" y="325" width="0.1098%" height="15" fill="rgb(224,124,37)" fg:x="2651" fg:w="3"/><text x="97.2851%" y="335.50"></text></g><g><title>dequeue_task_fair (7 samples, 0.26%)</title><rect x="96.9253%" y="373" width="0.2562%" height="15" fill="rgb(251,171,30)" fg:x="2648" fg:w="7"/><text x="97.1753%" y="383.50"></text></g><g><title>dequeue_entity (6 samples, 0.22%)</title><rect x="96.9619%" y="357" width="0.2196%" height="15" fill="rgb(236,46,54)" fg:x="2649" fg:w="6"/><text x="97.2119%" y="367.50"></text></g><g><title>update_load_avg (1 samples, 0.04%)</title><rect x="97.1449%" y="341" width="0.0366%" height="15" fill="rgb(245,213,5)" fg:x="2654" fg:w="1"/><text x="97.3949%" y="351.50"></text></g><g><title>__update_load_avg_se (1 samples, 0.04%)</title><rect x="97.1449%" y="325" width="0.0366%" height="15" fill="rgb(230,144,27)" fg:x="2654" fg:w="1"/><text x="97.3949%" y="335.50"></text></g><g><title>idle_cpu (1 samples, 0.04%)</title><rect x="97.3280%" y="325" width="0.0366%" height="15" fill="rgb(220,86,6)" fg:x="2659" fg:w="1"/><text x="97.5780%" y="335.50"></text></g><g><title>pick_next_task_fair (6 samples, 0.22%)</title><rect x="97.1816%" y="373" width="0.2196%" height="15" fill="rgb(240,20,13)" fg:x="2655" fg:w="6"/><text x="97.4316%" y="383.50"></text></g><g><title>newidle_balance (6 samples, 0.22%)</title><rect x="97.1816%" y="357" width="0.2196%" height="15" fill="rgb(217,89,34)" fg:x="2655" fg:w="6"/><text x="97.4316%" y="367.50"></text></g><g><title>_nohz_idle_balance (2 samples, 0.07%)</title><rect x="97.3280%" y="341" width="0.0732%" height="15" fill="rgb(229,13,5)" fg:x="2659" fg:w="2"/><text x="97.5780%" y="351.50"></text></g><g><title>update_rq_clock (1 samples, 0.04%)</title><rect x="97.3646%" y="325" width="0.0366%" height="15" fill="rgb(244,67,35)" fg:x="2660" fg:w="1"/><text x="97.6146%" y="335.50"></text></g><g><title>pick_next_task_idle (2 samples, 0.07%)</title><rect x="97.4012%" y="373" width="0.0732%" height="15" fill="rgb(221,40,2)" fg:x="2661" fg:w="2"/><text x="97.6512%" y="383.50"></text></g><g><title>__update_idle_core (1 samples, 0.04%)</title><rect x="97.4378%" y="357" width="0.0366%" height="15" fill="rgb(237,157,21)" fg:x="2662" fg:w="1"/><text x="97.6878%" y="367.50"></text></g><g><title>do_nanosleep (25 samples, 0.92%)</title><rect x="96.6691%" y="421" width="0.9151%" height="15" fill="rgb(222,94,11)" fg:x="2641" fg:w="25"/><text x="96.9191%" y="431.50"></text></g><g><title>schedule (21 samples, 0.77%)</title><rect x="96.8155%" y="405" width="0.7687%" height="15" fill="rgb(249,113,6)" fg:x="2645" fg:w="21"/><text x="97.0655%" y="415.50"></text></g><g><title>__schedule (20 samples, 0.73%)</title><rect x="96.8521%" y="389" width="0.7321%" height="15" fill="rgb(238,137,36)" fg:x="2646" fg:w="20"/><text x="97.1021%" y="399.50"></text></g><g><title>psi_task_change (3 samples, 0.11%)</title><rect x="97.4744%" y="373" width="0.1098%" height="15" fill="rgb(210,102,26)" fg:x="2663" fg:w="3"/><text x="97.7244%" y="383.50"></text></g><g><title>psi_group_change (2 samples, 0.07%)</title><rect x="97.5110%" y="357" width="0.0732%" height="15" fill="rgb(218,30,30)" fg:x="2664" fg:w="2"/><text x="97.7610%" y="367.50"></text></g><g><title>__x64_sys_clock_nanosleep (27 samples, 0.99%)</title><rect x="96.6325%" y="469" width="0.9883%" height="15" fill="rgb(214,67,26)" fg:x="2640" fg:w="27"/><text x="96.8825%" y="479.50"></text></g><g><title>common_nsleep (26 samples, 0.95%)</title><rect x="96.6691%" y="453" width="0.9517%" height="15" fill="rgb(251,9,53)" fg:x="2641" fg:w="26"/><text x="96.9191%" y="463.50"></text></g><g><title>hrtimer_nanosleep (26 samples, 0.95%)</title><rect x="96.6691%" y="437" width="0.9517%" height="15" fill="rgb(228,204,25)" fg:x="2641" fg:w="26"/><text x="96.9191%" y="447.50"></text></g><g><title>hrtimer_init_sleeper (1 samples, 0.04%)</title><rect x="97.5842%" y="421" width="0.0366%" height="15" fill="rgb(207,153,8)" fg:x="2666" fg:w="1"/><text x="97.8342%" y="431.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.04%)</title><rect x="97.6208%" y="469" width="0.0366%" height="15" fill="rgb(242,9,16)" fg:x="2667" fg:w="1"/><text x="97.8708%" y="479.50"></text></g><g><title>do_execveat_common (1 samples, 0.04%)</title><rect x="97.6208%" y="453" width="0.0366%" height="15" fill="rgb(217,211,10)" fg:x="2667" fg:w="1"/><text x="97.8708%" y="463.50"></text></g><g><title>bprm_execve (1 samples, 0.04%)</title><rect x="97.6208%" y="437" width="0.0366%" height="15" fill="rgb(219,228,52)" fg:x="2667" fg:w="1"/><text x="97.8708%" y="447.50"></text></g><g><title>load_elf_binary (1 samples, 0.04%)</title><rect x="97.6208%" y="421" width="0.0366%" height="15" fill="rgb(231,92,29)" fg:x="2667" fg:w="1"/><text x="97.8708%" y="431.50"></text></g><g><title>__clear_user (1 samples, 0.04%)</title><rect x="97.6208%" y="405" width="0.0366%" height="15" fill="rgb(232,8,23)" fg:x="2667" fg:w="1"/><text x="97.8708%" y="415.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.04%)</title><rect x="97.6208%" y="389" width="0.0366%" height="15" fill="rgb(216,211,34)" fg:x="2667" fg:w="1"/><text x="97.8708%" y="399.50"></text></g><g><title>exc_page_fault (1 samples, 0.04%)</title><rect x="97.6208%" y="373" width="0.0366%" height="15" fill="rgb(236,151,0)" fg:x="2667" fg:w="1"/><text x="97.8708%" y="383.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.04%)</title><rect x="97.6208%" y="357" width="0.0366%" height="15" fill="rgb(209,168,3)" fg:x="2667" fg:w="1"/><text x="97.8708%" y="367.50"></text></g><g><title>handle_mm_fault (1 samples, 0.04%)</title><rect x="97.6208%" y="341" width="0.0366%" height="15" fill="rgb(208,129,28)" fg:x="2667" fg:w="1"/><text x="97.8708%" y="351.50"></text></g><g><title>__do_fault (1 samples, 0.04%)</title><rect x="97.6208%" y="325" width="0.0366%" height="15" fill="rgb(229,78,22)" fg:x="2667" fg:w="1"/><text x="97.8708%" y="335.50"></text></g><g><title>filemap_fault (1 samples, 0.04%)</title><rect x="97.6208%" y="309" width="0.0366%" height="15" fill="rgb(228,187,13)" fg:x="2667" fg:w="1"/><text x="97.8708%" y="319.50"></text></g><g><title>page_cache_ra_unbounded (1 samples, 0.04%)</title><rect x="97.6208%" y="293" width="0.0366%" height="15" fill="rgb(240,119,24)" fg:x="2667" fg:w="1"/><text x="97.8708%" y="303.50"></text></g><g><title>read_pages (1 samples, 0.04%)</title><rect x="97.6208%" y="277" width="0.0366%" height="15" fill="rgb(209,194,42)" fg:x="2667" fg:w="1"/><text x="97.8708%" y="287.50"></text></g><g><title>nfs_readpages (1 samples, 0.04%)</title><rect x="97.6208%" y="261" width="0.0366%" height="15" fill="rgb(247,200,46)" fg:x="2667" fg:w="1"/><text x="97.8708%" y="271.50"></text></g><g><title>read_cache_pages (1 samples, 0.04%)</title><rect x="97.6208%" y="245" width="0.0366%" height="15" fill="rgb(218,76,16)" fg:x="2667" fg:w="1"/><text x="97.8708%" y="255.50"></text></g><g><title>add_to_page_cache_lru (1 samples, 0.04%)</title><rect x="97.6208%" y="229" width="0.0366%" height="15" fill="rgb(225,21,48)" fg:x="2667" fg:w="1"/><text x="97.8708%" y="239.50"></text></g><g><title>__add_to_page_cache_locked (1 samples, 0.04%)</title><rect x="97.6208%" y="213" width="0.0366%" height="15" fill="rgb(239,223,50)" fg:x="2667" fg:w="1"/><text x="97.8708%" y="223.50"></text></g><g><title>xa_get_order (1 samples, 0.04%)</title><rect x="97.6208%" y="197" width="0.0366%" height="15" fill="rgb(244,45,21)" fg:x="2667" fg:w="1"/><text x="97.8708%" y="207.50"></text></g><g><title>xas_load (1 samples, 0.04%)</title><rect x="97.6208%" y="181" width="0.0366%" height="15" fill="rgb(232,33,43)" fg:x="2667" fg:w="1"/><text x="97.8708%" y="191.50"></text></g><g><title>tlb_finish_mmu (1 samples, 0.04%)</title><rect x="97.6574%" y="389" width="0.0366%" height="15" fill="rgb(209,8,3)" fg:x="2668" fg:w="1"/><text x="97.9074%" y="399.50"></text></g><g><title>free_unref_page (1 samples, 0.04%)</title><rect x="97.6574%" y="373" width="0.0366%" height="15" fill="rgb(214,25,53)" fg:x="2668" fg:w="1"/><text x="97.9074%" y="383.50"></text></g><g><title>free_pcppages_bulk (1 samples, 0.04%)</title><rect x="97.6574%" y="357" width="0.0366%" height="15" fill="rgb(254,186,54)" fg:x="2668" fg:w="1"/><text x="97.9074%" y="367.50"></text></g><g><title>__free_one_page (1 samples, 0.04%)</title><rect x="97.6574%" y="341" width="0.0366%" height="15" fill="rgb(208,174,49)" fg:x="2668" fg:w="1"/><text x="97.9074%" y="351.50"></text></g><g><title>mmput (2 samples, 0.07%)</title><rect x="97.6574%" y="421" width="0.0732%" height="15" fill="rgb(233,191,51)" fg:x="2668" fg:w="2"/><text x="97.9074%" y="431.50"></text></g><g><title>exit_mmap (2 samples, 0.07%)</title><rect x="97.6574%" y="405" width="0.0732%" height="15" fill="rgb(222,134,10)" fg:x="2668" fg:w="2"/><text x="97.9074%" y="415.50"></text></g><g><title>unmap_vmas (1 samples, 0.04%)</title><rect x="97.6940%" y="389" width="0.0366%" height="15" fill="rgb(230,226,20)" fg:x="2669" fg:w="1"/><text x="97.9440%" y="399.50"></text></g><g><title>unmap_page_range (1 samples, 0.04%)</title><rect x="97.6940%" y="373" width="0.0366%" height="15" fill="rgb(251,111,25)" fg:x="2669" fg:w="1"/><text x="97.9440%" y="383.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.18%)</title><rect x="97.7306%" y="261" width="0.1830%" height="15" fill="rgb(224,40,46)" fg:x="2670" fg:w="5"/><text x="97.9806%" y="271.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.18%)</title><rect x="97.7306%" y="245" width="0.1830%" height="15" fill="rgb(236,108,47)" fg:x="2670" fg:w="5"/><text x="97.9806%" y="255.50"></text></g><g><title>native_write_msr (5 samples, 0.18%)</title><rect x="97.7306%" y="229" width="0.1830%" height="15" fill="rgb(234,93,0)" fg:x="2670" fg:w="5"/><text x="97.9806%" y="239.50"></text></g><g><title>__x64_sys_exit_group (8 samples, 0.29%)</title><rect x="97.6574%" y="469" width="0.2928%" height="15" fill="rgb(224,213,32)" fg:x="2668" fg:w="8"/><text x="97.9074%" y="479.50"></text></g><g><title>do_group_exit (8 samples, 0.29%)</title><rect x="97.6574%" y="453" width="0.2928%" height="15" fill="rgb(251,11,48)" fg:x="2668" fg:w="8"/><text x="97.9074%" y="463.50"></text></g><g><title>do_exit (8 samples, 0.29%)</title><rect x="97.6574%" y="437" width="0.2928%" height="15" fill="rgb(236,173,5)" fg:x="2668" fg:w="8"/><text x="97.9074%" y="447.50"></text></g><g><title>task_work_run (6 samples, 0.22%)</title><rect x="97.7306%" y="421" width="0.2196%" height="15" fill="rgb(230,95,12)" fg:x="2670" fg:w="6"/><text x="97.9806%" y="431.50"></text></g><g><title>__fput (6 samples, 0.22%)</title><rect x="97.7306%" y="405" width="0.2196%" height="15" fill="rgb(232,209,1)" fg:x="2670" fg:w="6"/><text x="97.9806%" y="415.50"></text></g><g><title>inotify_release (6 samples, 0.22%)</title><rect x="97.7306%" y="389" width="0.2196%" height="15" fill="rgb(232,6,1)" fg:x="2670" fg:w="6"/><text x="97.9806%" y="399.50"></text></g><g><title>fsnotify_destroy_group (6 samples, 0.22%)</title><rect x="97.7306%" y="373" width="0.2196%" height="15" fill="rgb(210,224,50)" fg:x="2670" fg:w="6"/><text x="97.9806%" y="383.50"></text></g><g><title>__flush_work.isra.0 (6 samples, 0.22%)</title><rect x="97.7306%" y="357" width="0.2196%" height="15" fill="rgb(228,127,35)" fg:x="2670" fg:w="6"/><text x="97.9806%" y="367.50"></text></g><g><title>__wait_for_common (6 samples, 0.22%)</title><rect x="97.7306%" y="341" width="0.2196%" height="15" fill="rgb(245,102,45)" fg:x="2670" fg:w="6"/><text x="97.9806%" y="351.50"></text></g><g><title>schedule_timeout (6 samples, 0.22%)</title><rect x="97.7306%" y="325" width="0.2196%" height="15" fill="rgb(214,1,49)" fg:x="2670" fg:w="6"/><text x="97.9806%" y="335.50"></text></g><g><title>schedule (6 samples, 0.22%)</title><rect x="97.7306%" y="309" width="0.2196%" height="15" fill="rgb(226,163,40)" fg:x="2670" fg:w="6"/><text x="97.9806%" y="319.50"></text></g><g><title>__schedule (6 samples, 0.22%)</title><rect x="97.7306%" y="293" width="0.2196%" height="15" fill="rgb(239,212,28)" fg:x="2670" fg:w="6"/><text x="97.9806%" y="303.50"></text></g><g><title>finish_task_switch (6 samples, 0.22%)</title><rect x="97.7306%" y="277" width="0.2196%" height="15" fill="rgb(220,20,13)" fg:x="2670" fg:w="6"/><text x="97.9806%" y="287.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="97.9136%" y="261" width="0.0366%" height="15" fill="rgb(210,164,35)" fg:x="2675" fg:w="1"/><text x="98.1636%" y="271.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="97.9136%" y="245" width="0.0366%" height="15" fill="rgb(248,109,41)" fg:x="2675" fg:w="1"/><text x="98.1636%" y="255.50"></text></g><g><title>asm_call_sysvec_on_stack (1 samples, 0.04%)</title><rect x="97.9136%" y="229" width="0.0366%" height="15" fill="rgb(238,23,50)" fg:x="2675" fg:w="1"/><text x="98.1636%" y="239.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="97.9136%" y="213" width="0.0366%" height="15" fill="rgb(211,48,49)" fg:x="2675" fg:w="1"/><text x="98.1636%" y="223.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.04%)</title><rect x="97.9136%" y="197" width="0.0366%" height="15" fill="rgb(223,36,21)" fg:x="2675" fg:w="1"/><text x="98.1636%" y="207.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.04%)</title><rect x="97.9136%" y="181" width="0.0366%" height="15" fill="rgb(207,123,46)" fg:x="2675" fg:w="1"/><text x="98.1636%" y="191.50"></text></g><g><title>tick_sched_timer (1 samples, 0.04%)</title><rect x="97.9136%" y="165" width="0.0366%" height="15" fill="rgb(240,218,32)" fg:x="2675" fg:w="1"/><text x="98.1636%" y="175.50"></text></g><g><title>tick_sched_handle (1 samples, 0.04%)</title><rect x="97.9136%" y="149" width="0.0366%" height="15" fill="rgb(252,5,43)" fg:x="2675" fg:w="1"/><text x="98.1636%" y="159.50"></text></g><g><title>update_process_times (1 samples, 0.04%)</title><rect x="97.9136%" y="133" width="0.0366%" height="15" fill="rgb(252,84,19)" fg:x="2675" fg:w="1"/><text x="98.1636%" y="143.50"></text></g><g><title>trigger_load_balance (1 samples, 0.04%)</title><rect x="97.9136%" y="117" width="0.0366%" height="15" fill="rgb(243,152,39)" fg:x="2675" fg:w="1"/><text x="98.1636%" y="127.50"></text></g><g><title>__fdget (1 samples, 0.04%)</title><rect x="98.0234%" y="437" width="0.0366%" height="15" fill="rgb(234,160,15)" fg:x="2678" fg:w="1"/><text x="98.2734%" y="447.50"></text></g><g><title>__fget_light (3 samples, 0.11%)</title><rect x="98.0600%" y="437" width="0.1098%" height="15" fill="rgb(237,34,20)" fg:x="2679" fg:w="3"/><text x="98.3100%" y="447.50"></text></g><g><title>__fget_files (1 samples, 0.04%)</title><rect x="98.1332%" y="421" width="0.0366%" height="15" fill="rgb(229,97,13)" fg:x="2681" fg:w="1"/><text x="98.3832%" y="431.50"></text></g><g><title>_copy_from_user (1 samples, 0.04%)</title><rect x="98.1698%" y="437" width="0.0366%" height="15" fill="rgb(234,71,50)" fg:x="2682" fg:w="1"/><text x="98.4198%" y="447.50"></text></g><g><title>copy_user_enhanced_fast_string (1 samples, 0.04%)</title><rect x="98.1698%" y="421" width="0.0366%" height="15" fill="rgb(253,155,4)" fg:x="2682" fg:w="1"/><text x="98.4198%" y="431.50"></text></g><g><title>eventfd_poll (2 samples, 0.07%)</title><rect x="98.2064%" y="437" width="0.0732%" height="15" fill="rgb(222,185,37)" fg:x="2683" fg:w="2"/><text x="98.4564%" y="447.50"></text></g><g><title>__x64_sys_poll (11 samples, 0.40%)</title><rect x="97.9502%" y="469" width="0.4026%" height="15" fill="rgb(251,177,13)" fg:x="2676" fg:w="11"/><text x="98.2002%" y="479.50"></text></g><g><title>do_sys_poll (11 samples, 0.40%)</title><rect x="97.9502%" y="453" width="0.4026%" height="15" fill="rgb(250,179,40)" fg:x="2676" fg:w="11"/><text x="98.2002%" y="463.50"></text></g><g><title>poll_freewait (2 samples, 0.07%)</title><rect x="98.2796%" y="437" width="0.0732%" height="15" fill="rgb(242,44,2)" fg:x="2685" fg:w="2"/><text x="98.5296%" y="447.50"></text></g><g><title>do_syscall_64 (48 samples, 1.76%)</title><rect x="96.6325%" y="485" width="1.7570%" height="15" fill="rgb(216,177,13)" fg:x="2640" fg:w="48"/><text x="96.8825%" y="495.50"></text></g><g><title>__x86_retpoline_rax (1 samples, 0.04%)</title><rect x="98.3529%" y="469" width="0.0366%" height="15" fill="rgb(216,106,43)" fg:x="2687" fg:w="1"/><text x="98.6029%" y="479.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (59 samples, 2.16%)</title><rect x="96.4861%" y="501" width="2.1596%" height="15" fill="rgb(216,183,2)" fg:x="2636" fg:w="59"/><text x="96.7361%" y="511.50">e..</text></g><g><title>syscall_exit_to_user_mode (7 samples, 0.26%)</title><rect x="98.3895%" y="485" width="0.2562%" height="15" fill="rgb(249,75,3)" fg:x="2688" fg:w="7"/><text x="98.6395%" y="495.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.04%)</title><rect x="98.6091%" y="469" width="0.0366%" height="15" fill="rgb(219,67,39)" fg:x="2694" fg:w="1"/><text x="98.8591%" y="479.50"></text></g><g><title>entry_SYSCALL_64_safe_stack (27 samples, 0.99%)</title><rect x="98.6457%" y="501" width="0.9883%" height="15" fill="rgb(253,228,2)" fg:x="2695" fg:w="27"/><text x="98.8957%" y="511.50"></text></g><g><title>colmet-node (2,691 samples, 98.50%)</title><rect x="1.2811%" y="517" width="98.4993%" height="15" fill="rgb(235,138,27)" fg:x="35" fg:w="2691"/><text x="1.5311%" y="527.50">colmet-node</text></g><g><title>syscall_return_via_sysret (4 samples, 0.15%)</title><rect x="99.6340%" y="501" width="0.1464%" height="15" fill="rgb(236,97,51)" fg:x="2722" fg:w="4"/><text x="99.8840%" y="511.50"></text></g><g><title>all (2,732 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(240,80,30)" fg:x="0" fg:w="2732"/><text x="0.2500%" y="543.50"></text></g><g><title>perf_5.10 (6 samples, 0.22%)</title><rect x="99.7804%" y="517" width="0.2196%" height="15" fill="rgb(230,178,19)" fg:x="2726" fg:w="6"/><text x="100.0304%" y="527.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.22%)</title><rect x="99.7804%" y="501" width="0.2196%" height="15" fill="rgb(210,190,27)" fg:x="2726" fg:w="6"/><text x="100.0304%" y="511.50"></text></g><g><title>do_syscall_64 (6 samples, 0.22%)</title><rect x="99.7804%" y="485" width="0.2196%" height="15" fill="rgb(222,107,31)" fg:x="2726" fg:w="6"/><text x="100.0304%" y="495.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.22%)</title><rect x="99.7804%" y="469" width="0.2196%" height="15" fill="rgb(216,127,34)" fg:x="2726" fg:w="6"/><text x="100.0304%" y="479.50"></text></g><g><title>do_execveat_common (6 samples, 0.22%)</title><rect x="99.7804%" y="453" width="0.2196%" height="15" fill="rgb(234,116,52)" fg:x="2726" fg:w="6"/><text x="100.0304%" y="463.50"></text></g><g><title>bprm_execve (6 samples, 0.22%)</title><rect x="99.7804%" y="437" width="0.2196%" height="15" fill="rgb(222,124,15)" fg:x="2726" fg:w="6"/><text x="100.0304%" y="447.50"></text></g><g><title>load_elf_binary (6 samples, 0.22%)</title><rect x="99.7804%" y="421" width="0.2196%" height="15" fill="rgb(231,179,28)" fg:x="2726" fg:w="6"/><text x="100.0304%" y="431.50"></text></g><g><title>begin_new_exec (6 samples, 0.22%)</title><rect x="99.7804%" y="405" width="0.2196%" height="15" fill="rgb(226,93,45)" fg:x="2726" fg:w="6"/><text x="100.0304%" y="415.50"></text></g><g><title>perf_event_exec (6 samples, 0.22%)</title><rect x="99.7804%" y="389" width="0.2196%" height="15" fill="rgb(215,8,51)" fg:x="2726" fg:w="6"/><text x="100.0304%" y="399.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.18%)</title><rect x="99.8170%" y="373" width="0.1830%" height="15" fill="rgb(223,106,5)" fg:x="2727" fg:w="5"/><text x="100.0670%" y="383.50"></text></g><g><title>native_write_msr (5 samples, 0.18%)</title><rect x="99.8170%" y="357" width="0.1830%" height="15" fill="rgb(250,191,5)" fg:x="2727" fg:w="5"/><text x="100.0670%" y="367.50"></text></g></svg></svg>