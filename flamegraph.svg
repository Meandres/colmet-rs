<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="678" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="661.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="661.00"> </text><svg id="frames" x="10" width="1180" total_samples="2382"><g><title>[anon] (1 samples, 0.04%)</title><rect x="0.0000%" y="597" width="0.0420%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="607.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.04%)</title><rect x="0.0000%" y="581" width="0.0420%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="591.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.04%)</title><rect x="0.2099%" y="469" width="0.0420%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="1"/><text x="0.4599%" y="479.50"></text></g><g><title>[libzmq.so.5.2.4] (2 samples, 0.08%)</title><rect x="0.2099%" y="485" width="0.0840%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="2"/><text x="0.4599%" y="495.50"></text></g><g><title>__strtol (1 samples, 0.04%)</title><rect x="0.2519%" y="469" width="0.0420%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="1"/><text x="0.5019%" y="479.50"></text></g><g><title>[libzmq.so.5.2.4] (3 samples, 0.13%)</title><rect x="0.2099%" y="501" width="0.1259%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="3"/><text x="0.4599%" y="511.50"></text></g><g><title>pthread_self (1 samples, 0.04%)</title><rect x="0.2939%" y="485" width="0.0420%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="1"/><text x="0.5439%" y="495.50"></text></g><g><title>inet_create (2 samples, 0.08%)</title><rect x="0.3359%" y="405" width="0.0840%" height="15" fill="rgb(228,23,34)" fg:x="8" fg:w="2"/><text x="0.5859%" y="415.50"></text></g><g><title>sk_alloc (2 samples, 0.08%)</title><rect x="0.3359%" y="389" width="0.0840%" height="15" fill="rgb(218,30,26)" fg:x="8" fg:w="2"/><text x="0.5859%" y="399.50"></text></g><g><title>sk_prot_alloc (2 samples, 0.08%)</title><rect x="0.3359%" y="373" width="0.0840%" height="15" fill="rgb(220,122,19)" fg:x="8" fg:w="2"/><text x="0.5859%" y="383.50"></text></g><g><title>security_sk_alloc (1 samples, 0.04%)</title><rect x="0.3778%" y="357" width="0.0420%" height="15" fill="rgb(250,228,42)" fg:x="9" fg:w="1"/><text x="0.6278%" y="367.50"></text></g><g><title>apparmor_sk_alloc_security (1 samples, 0.04%)</title><rect x="0.3778%" y="341" width="0.0420%" height="15" fill="rgb(240,193,28)" fg:x="9" fg:w="1"/><text x="0.6278%" y="351.50"></text></g><g><title>inode_init_always (1 samples, 0.04%)</title><rect x="0.4198%" y="357" width="0.0420%" height="15" fill="rgb(216,20,37)" fg:x="10" fg:w="1"/><text x="0.6698%" y="367.50"></text></g><g><title>make_kgid (1 samples, 0.04%)</title><rect x="0.4198%" y="341" width="0.0420%" height="15" fill="rgb(206,188,39)" fg:x="10" fg:w="1"/><text x="0.6698%" y="351.50"></text></g><g><title>map_id_range_down (1 samples, 0.04%)</title><rect x="0.4198%" y="325" width="0.0420%" height="15" fill="rgb(217,207,13)" fg:x="10" fg:w="1"/><text x="0.6698%" y="335.50"></text></g><g><title>__sock_create (4 samples, 0.17%)</title><rect x="0.3359%" y="421" width="0.1679%" height="15" fill="rgb(231,73,38)" fg:x="8" fg:w="4"/><text x="0.5859%" y="431.50"></text></g><g><title>sock_alloc (2 samples, 0.08%)</title><rect x="0.4198%" y="405" width="0.0840%" height="15" fill="rgb(225,20,46)" fg:x="10" fg:w="2"/><text x="0.6698%" y="415.50"></text></g><g><title>new_inode_pseudo (2 samples, 0.08%)</title><rect x="0.4198%" y="389" width="0.0840%" height="15" fill="rgb(210,31,41)" fg:x="10" fg:w="2"/><text x="0.6698%" y="399.50"></text></g><g><title>alloc_inode (2 samples, 0.08%)</title><rect x="0.4198%" y="373" width="0.0840%" height="15" fill="rgb(221,200,47)" fg:x="10" fg:w="2"/><text x="0.6698%" y="383.50"></text></g><g><title>sock_alloc_inode (1 samples, 0.04%)</title><rect x="0.4618%" y="357" width="0.0420%" height="15" fill="rgb(226,26,5)" fg:x="11" fg:w="1"/><text x="0.7118%" y="367.50"></text></g><g><title>kmem_cache_alloc (1 samples, 0.04%)</title><rect x="0.4618%" y="341" width="0.0420%" height="15" fill="rgb(249,33,26)" fg:x="11" fg:w="1"/><text x="0.7118%" y="351.50"></text></g><g><title>slab_pre_alloc_hook.constprop.0 (1 samples, 0.04%)</title><rect x="0.4618%" y="325" width="0.0420%" height="15" fill="rgb(235,183,28)" fg:x="11" fg:w="1"/><text x="0.7118%" y="335.50"></text></g><g><title>get_obj_cgroup_from_current (1 samples, 0.04%)</title><rect x="0.4618%" y="309" width="0.0420%" height="15" fill="rgb(221,5,38)" fg:x="11" fg:w="1"/><text x="0.7118%" y="319.50"></text></g><g><title>alloc_file (2 samples, 0.08%)</title><rect x="0.5038%" y="389" width="0.0840%" height="15" fill="rgb(247,18,42)" fg:x="12" fg:w="2"/><text x="0.7538%" y="399.50"></text></g><g><title>alloc_empty_file (2 samples, 0.08%)</title><rect x="0.5038%" y="373" width="0.0840%" height="15" fill="rgb(241,131,45)" fg:x="12" fg:w="2"/><text x="0.7538%" y="383.50"></text></g><g><title>__alloc_file (2 samples, 0.08%)</title><rect x="0.5038%" y="357" width="0.0840%" height="15" fill="rgb(249,31,29)" fg:x="12" fg:w="2"/><text x="0.7538%" y="367.50"></text></g><g><title>security_file_alloc (1 samples, 0.04%)</title><rect x="0.5458%" y="341" width="0.0420%" height="15" fill="rgb(225,111,53)" fg:x="13" fg:w="1"/><text x="0.7958%" y="351.50"></text></g><g><title>kmem_cache_alloc (1 samples, 0.04%)</title><rect x="0.5458%" y="325" width="0.0420%" height="15" fill="rgb(238,160,17)" fg:x="13" fg:w="1"/><text x="0.7958%" y="335.50"></text></g><g><title>d_alloc_pseudo (1 samples, 0.04%)</title><rect x="0.5877%" y="389" width="0.0420%" height="15" fill="rgb(214,148,48)" fg:x="14" fg:w="1"/><text x="0.8377%" y="399.50"></text></g><g><title>__d_alloc (1 samples, 0.04%)</title><rect x="0.5877%" y="373" width="0.0420%" height="15" fill="rgb(232,36,49)" fg:x="14" fg:w="1"/><text x="0.8377%" y="383.50"></text></g><g><title>kmem_cache_alloc (1 samples, 0.04%)</title><rect x="0.5877%" y="357" width="0.0420%" height="15" fill="rgb(209,103,24)" fg:x="14" fg:w="1"/><text x="0.8377%" y="367.50"></text></g><g><title>slab_pre_alloc_hook.constprop.0 (1 samples, 0.04%)</title><rect x="0.5877%" y="341" width="0.0420%" height="15" fill="rgb(229,88,8)" fg:x="14" fg:w="1"/><text x="0.8377%" y="351.50"></text></g><g><title>obj_cgroup_charge (1 samples, 0.04%)</title><rect x="0.5877%" y="325" width="0.0420%" height="15" fill="rgb(213,181,19)" fg:x="14" fg:w="1"/><text x="0.8377%" y="335.50"></text></g><g><title>d_instantiate (1 samples, 0.04%)</title><rect x="0.6297%" y="389" width="0.0420%" height="15" fill="rgb(254,191,54)" fg:x="15" fg:w="1"/><text x="0.8797%" y="399.50"></text></g><g><title>__d_instantiate (1 samples, 0.04%)</title><rect x="0.6297%" y="373" width="0.0420%" height="15" fill="rgb(241,83,37)" fg:x="15" fg:w="1"/><text x="0.8797%" y="383.50"></text></g><g><title>__GI___socket (9 samples, 0.38%)</title><rect x="0.3359%" y="501" width="0.3778%" height="15" fill="rgb(233,36,39)" fg:x="8" fg:w="9"/><text x="0.5859%" y="511.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (9 samples, 0.38%)</title><rect x="0.3359%" y="485" width="0.3778%" height="15" fill="rgb(226,3,54)" fg:x="8" fg:w="9"/><text x="0.5859%" y="495.50"></text></g><g><title>do_syscall_64 (9 samples, 0.38%)</title><rect x="0.3359%" y="469" width="0.3778%" height="15" fill="rgb(245,192,40)" fg:x="8" fg:w="9"/><text x="0.5859%" y="479.50"></text></g><g><title>__x64_sys_socket (9 samples, 0.38%)</title><rect x="0.3359%" y="453" width="0.3778%" height="15" fill="rgb(238,167,29)" fg:x="8" fg:w="9"/><text x="0.5859%" y="463.50"></text></g><g><title>__sys_socket (9 samples, 0.38%)</title><rect x="0.3359%" y="437" width="0.3778%" height="15" fill="rgb(232,182,51)" fg:x="8" fg:w="9"/><text x="0.5859%" y="447.50"></text></g><g><title>sock_alloc_file (5 samples, 0.21%)</title><rect x="0.5038%" y="421" width="0.2099%" height="15" fill="rgb(231,60,39)" fg:x="12" fg:w="5"/><text x="0.7538%" y="431.50"></text></g><g><title>alloc_file_pseudo (5 samples, 0.21%)</title><rect x="0.5038%" y="405" width="0.2099%" height="15" fill="rgb(208,69,12)" fg:x="12" fg:w="5"/><text x="0.7538%" y="415.50"></text></g><g><title>mntget (1 samples, 0.04%)</title><rect x="0.6717%" y="389" width="0.0420%" height="15" fill="rgb(235,93,37)" fg:x="16" fg:w="1"/><text x="0.9217%" y="399.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="0.7137%" y="453" width="0.0420%" height="15" fill="rgb(213,116,39)" fg:x="17" fg:w="1"/><text x="0.9637%" y="463.50"></text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.04%)</title><rect x="0.7137%" y="437" width="0.0420%" height="15" fill="rgb(222,207,29)" fg:x="17" fg:w="1"/><text x="0.9637%" y="447.50"></text></g><g><title>[libzmq.so.5.2.4] (14 samples, 0.59%)</title><rect x="0.2099%" y="517" width="0.5877%" height="15" fill="rgb(206,96,30)" fg:x="5" fg:w="14"/><text x="0.4599%" y="527.50"></text></g><g><title>fcntl_compat (2 samples, 0.08%)</title><rect x="0.7137%" y="501" width="0.0840%" height="15" fill="rgb(218,138,4)" fg:x="17" fg:w="2"/><text x="0.9637%" y="511.50"></text></g><g><title>__GI___libc_fcntl64 (2 samples, 0.08%)</title><rect x="0.7137%" y="485" width="0.0840%" height="15" fill="rgb(250,191,14)" fg:x="17" fg:w="2"/><text x="0.9637%" y="495.50"></text></g><g><title>__fcntl64_nocancel_adjusted (2 samples, 0.08%)</title><rect x="0.7137%" y="469" width="0.0840%" height="15" fill="rgb(239,60,40)" fg:x="17" fg:w="2"/><text x="0.9637%" y="479.50"></text></g><g><title>syscall_return_via_sysret (1 samples, 0.04%)</title><rect x="0.7557%" y="453" width="0.0420%" height="15" fill="rgb(206,27,48)" fg:x="18" fg:w="1"/><text x="1.0057%" y="463.50"></text></g><g><title>__GI___clock_gettime (1 samples, 0.04%)</title><rect x="0.7976%" y="517" width="0.0420%" height="15" fill="rgb(225,35,8)" fg:x="19" fg:w="1"/><text x="1.0476%" y="527.50"></text></g><g><title>__fget_light (1 samples, 0.04%)</title><rect x="0.8396%" y="437" width="0.0420%" height="15" fill="rgb(250,213,24)" fg:x="20" fg:w="1"/><text x="1.0896%" y="447.50"></text></g><g><title>__fget_files (1 samples, 0.04%)</title><rect x="0.8396%" y="421" width="0.0420%" height="15" fill="rgb(247,123,22)" fg:x="20" fg:w="1"/><text x="1.0896%" y="431.50"></text></g><g><title>ep_item_poll (1 samples, 0.04%)</title><rect x="0.8816%" y="437" width="0.0420%" height="15" fill="rgb(231,138,38)" fg:x="21" fg:w="1"/><text x="1.1316%" y="447.50"></text></g><g><title>sock_poll (1 samples, 0.04%)</title><rect x="0.8816%" y="421" width="0.0420%" height="15" fill="rgb(231,145,46)" fg:x="21" fg:w="1"/><text x="1.1316%" y="431.50"></text></g><g><title>tcp_poll (1 samples, 0.04%)</title><rect x="0.8816%" y="405" width="0.0420%" height="15" fill="rgb(251,118,11)" fg:x="21" fg:w="1"/><text x="1.1316%" y="415.50"></text></g><g><title>__GI_epoll_ctl (3 samples, 0.13%)</title><rect x="0.8396%" y="517" width="0.1259%" height="15" fill="rgb(217,147,25)" fg:x="20" fg:w="3"/><text x="1.0896%" y="527.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3 samples, 0.13%)</title><rect x="0.8396%" y="501" width="0.1259%" height="15" fill="rgb(247,81,37)" fg:x="20" fg:w="3"/><text x="1.0896%" y="511.50"></text></g><g><title>do_syscall_64 (3 samples, 0.13%)</title><rect x="0.8396%" y="485" width="0.1259%" height="15" fill="rgb(209,12,38)" fg:x="20" fg:w="3"/><text x="1.0896%" y="495.50"></text></g><g><title>__x64_sys_epoll_ctl (3 samples, 0.13%)</title><rect x="0.8396%" y="469" width="0.1259%" height="15" fill="rgb(227,1,9)" fg:x="20" fg:w="3"/><text x="1.0896%" y="479.50"></text></g><g><title>do_epoll_ctl (3 samples, 0.13%)</title><rect x="0.8396%" y="453" width="0.1259%" height="15" fill="rgb(248,47,43)" fg:x="20" fg:w="3"/><text x="1.0896%" y="463.50"></text></g><g><title>ep_remove (1 samples, 0.04%)</title><rect x="0.9236%" y="437" width="0.0420%" height="15" fill="rgb(221,10,30)" fg:x="22" fg:w="1"/><text x="1.1736%" y="447.50"></text></g><g><title>call_rcu (1 samples, 0.04%)</title><rect x="0.9236%" y="421" width="0.0420%" height="15" fill="rgb(210,229,1)" fg:x="22" fg:w="1"/><text x="1.1736%" y="431.50"></text></g><g><title>__inet_hash_connect (1 samples, 0.04%)</title><rect x="1.0076%" y="389" width="0.0420%" height="15" fill="rgb(222,148,37)" fg:x="24" fg:w="1"/><text x="1.2576%" y="399.50"></text></g><g><title>inet_ehash_nolisten (1 samples, 0.04%)</title><rect x="1.0076%" y="373" width="0.0420%" height="15" fill="rgb(234,67,33)" fg:x="24" fg:w="1"/><text x="1.2576%" y="383.50"></text></g><g><title>ip_route_output_flow (1 samples, 0.04%)</title><rect x="1.0495%" y="389" width="0.0420%" height="15" fill="rgb(247,98,35)" fg:x="25" fg:w="1"/><text x="1.2995%" y="399.50"></text></g><g><title>ip_route_output_key_hash (1 samples, 0.04%)</title><rect x="1.0915%" y="389" width="0.0420%" height="15" fill="rgb(247,138,52)" fg:x="26" fg:w="1"/><text x="1.3415%" y="399.50"></text></g><g><title>ip_route_output_key_hash_rcu (1 samples, 0.04%)</title><rect x="1.0915%" y="373" width="0.0420%" height="15" fill="rgb(213,79,30)" fg:x="26" fg:w="1"/><text x="1.3415%" y="383.50"></text></g><g><title>__nf_conntrack_find_get (1 samples, 0.04%)</title><rect x="1.1335%" y="293" width="0.0420%" height="15" fill="rgb(246,177,23)" fg:x="27" fg:w="1"/><text x="1.3835%" y="303.50"></text></g><g><title>nf_conntrack_in (2 samples, 0.08%)</title><rect x="1.1335%" y="309" width="0.0840%" height="15" fill="rgb(230,62,27)" fg:x="27" fg:w="2"/><text x="1.3835%" y="319.50"></text></g><g><title>init_conntrack.constprop.0 (1 samples, 0.04%)</title><rect x="1.1755%" y="293" width="0.0420%" height="15" fill="rgb(216,154,8)" fg:x="28" fg:w="1"/><text x="1.4255%" y="303.50"></text></g><g><title>__nf_conntrack_alloc (1 samples, 0.04%)</title><rect x="1.1755%" y="277" width="0.0420%" height="15" fill="rgb(244,35,45)" fg:x="28" fg:w="1"/><text x="1.4255%" y="287.50"></text></g><g><title>kmem_cache_alloc (1 samples, 0.04%)</title><rect x="1.1755%" y="261" width="0.0420%" height="15" fill="rgb(251,115,12)" fg:x="28" fg:w="1"/><text x="1.4255%" y="271.50"></text></g><g><title>__ip_local_out (3 samples, 0.13%)</title><rect x="1.1335%" y="341" width="0.1259%" height="15" fill="rgb(240,54,50)" fg:x="27" fg:w="3"/><text x="1.3835%" y="351.50"></text></g><g><title>nf_hook_slow (3 samples, 0.13%)</title><rect x="1.1335%" y="325" width="0.1259%" height="15" fill="rgb(233,84,52)" fg:x="27" fg:w="3"/><text x="1.3835%" y="335.50"></text></g><g><title>nft_do_chain_ipv4 (1 samples, 0.04%)</title><rect x="1.2175%" y="309" width="0.0420%" height="15" fill="rgb(207,117,47)" fg:x="29" fg:w="1"/><text x="1.4675%" y="319.50"></text></g><g><title>__dev_queue_xmit (2 samples, 0.08%)</title><rect x="1.2594%" y="325" width="0.0840%" height="15" fill="rgb(249,43,39)" fg:x="30" fg:w="2"/><text x="1.5094%" y="335.50"></text></g><g><title>dev_hard_start_xmit (1 samples, 0.04%)</title><rect x="1.3014%" y="309" width="0.0420%" height="15" fill="rgb(209,38,44)" fg:x="31" fg:w="1"/><text x="1.5514%" y="319.50"></text></g><g><title>loopback_xmit (1 samples, 0.04%)</title><rect x="1.3014%" y="293" width="0.0420%" height="15" fill="rgb(236,212,23)" fg:x="31" fg:w="1"/><text x="1.5514%" y="303.50"></text></g><g><title>netif_rx (1 samples, 0.04%)</title><rect x="1.3014%" y="277" width="0.0420%" height="15" fill="rgb(242,79,21)" fg:x="31" fg:w="1"/><text x="1.5514%" y="287.50"></text></g><g><title>netif_rx_internal (1 samples, 0.04%)</title><rect x="1.3014%" y="261" width="0.0420%" height="15" fill="rgb(211,96,35)" fg:x="31" fg:w="1"/><text x="1.5514%" y="271.50"></text></g><g><title>__ip_local_out (1 samples, 0.04%)</title><rect x="1.3854%" y="101" width="0.0420%" height="15" fill="rgb(253,215,40)" fg:x="33" fg:w="1"/><text x="1.6354%" y="111.50"></text></g><g><title>nf_hook_slow (1 samples, 0.04%)</title><rect x="1.3854%" y="85" width="0.0420%" height="15" fill="rgb(211,81,21)" fg:x="33" fg:w="1"/><text x="1.6354%" y="95.50"></text></g><g><title>nf_conntrack_in (1 samples, 0.04%)</title><rect x="1.3854%" y="69" width="0.0420%" height="15" fill="rgb(208,190,38)" fg:x="33" fg:w="1"/><text x="1.6354%" y="79.50"></text></g><g><title>nf_conntrack_tcp_packet (1 samples, 0.04%)</title><rect x="1.3854%" y="53" width="0.0420%" height="15" fill="rgb(235,213,38)" fg:x="33" fg:w="1"/><text x="1.6354%" y="63.50"></text></g><g><title>_raw_spin_lock_bh (1 samples, 0.04%)</title><rect x="1.3854%" y="37" width="0.0420%" height="15" fill="rgb(237,122,38)" fg:x="33" fg:w="1"/><text x="1.6354%" y="47.50"></text></g><g><title>ip_push_pending_frames (2 samples, 0.08%)</title><rect x="1.3854%" y="117" width="0.0840%" height="15" fill="rgb(244,218,35)" fg:x="33" fg:w="2"/><text x="1.6354%" y="127.50"></text></g><g><title>__ip_make_skb (1 samples, 0.04%)</title><rect x="1.4274%" y="101" width="0.0420%" height="15" fill="rgb(240,68,47)" fg:x="34" fg:w="1"/><text x="1.6774%" y="111.50"></text></g><g><title>ip_finish_output2 (6 samples, 0.25%)</title><rect x="1.2594%" y="341" width="0.2519%" height="15" fill="rgb(210,16,53)" fg:x="30" fg:w="6"/><text x="1.5094%" y="351.50"></text></g><g><title>__local_bh_enable_ip (4 samples, 0.17%)</title><rect x="1.3434%" y="325" width="0.1679%" height="15" fill="rgb(235,124,12)" fg:x="32" fg:w="4"/><text x="1.5934%" y="335.50"></text></g><g><title>do_softirq (4 samples, 0.17%)</title><rect x="1.3434%" y="309" width="0.1679%" height="15" fill="rgb(224,169,11)" fg:x="32" fg:w="4"/><text x="1.5934%" y="319.50"></text></g><g><title>do_softirq_own_stack (4 samples, 0.17%)</title><rect x="1.3434%" y="293" width="0.1679%" height="15" fill="rgb(250,166,2)" fg:x="32" fg:w="4"/><text x="1.5934%" y="303.50"></text></g><g><title>asm_call_sysvec_on_stack (4 samples, 0.17%)</title><rect x="1.3434%" y="277" width="0.1679%" height="15" fill="rgb(242,216,29)" fg:x="32" fg:w="4"/><text x="1.5934%" y="287.50"></text></g><g><title>__softirqentry_text_start (4 samples, 0.17%)</title><rect x="1.3434%" y="261" width="0.1679%" height="15" fill="rgb(230,116,27)" fg:x="32" fg:w="4"/><text x="1.5934%" y="271.50"></text></g><g><title>net_rx_action (4 samples, 0.17%)</title><rect x="1.3434%" y="245" width="0.1679%" height="15" fill="rgb(228,99,48)" fg:x="32" fg:w="4"/><text x="1.5934%" y="255.50"></text></g><g><title>process_backlog (4 samples, 0.17%)</title><rect x="1.3434%" y="229" width="0.1679%" height="15" fill="rgb(253,11,6)" fg:x="32" fg:w="4"/><text x="1.5934%" y="239.50"></text></g><g><title>__netif_receive_skb_one_core (4 samples, 0.17%)</title><rect x="1.3434%" y="213" width="0.1679%" height="15" fill="rgb(247,143,39)" fg:x="32" fg:w="4"/><text x="1.5934%" y="223.50"></text></g><g><title>ip_local_deliver_finish (4 samples, 0.17%)</title><rect x="1.3434%" y="197" width="0.1679%" height="15" fill="rgb(236,97,10)" fg:x="32" fg:w="4"/><text x="1.5934%" y="207.50"></text></g><g><title>ip_protocol_deliver_rcu (4 samples, 0.17%)</title><rect x="1.3434%" y="181" width="0.1679%" height="15" fill="rgb(233,208,19)" fg:x="32" fg:w="4"/><text x="1.5934%" y="191.50"></text></g><g><title>tcp_v4_rcv (4 samples, 0.17%)</title><rect x="1.3434%" y="165" width="0.1679%" height="15" fill="rgb(216,164,2)" fg:x="32" fg:w="4"/><text x="1.5934%" y="175.50"></text></g><g><title>tcp_v4_send_reset (4 samples, 0.17%)</title><rect x="1.3434%" y="149" width="0.1679%" height="15" fill="rgb(220,129,5)" fg:x="32" fg:w="4"/><text x="1.5934%" y="159.50"></text></g><g><title>ip_send_unicast_reply (4 samples, 0.17%)</title><rect x="1.3434%" y="133" width="0.1679%" height="15" fill="rgb(242,17,10)" fg:x="32" fg:w="4"/><text x="1.5934%" y="143.50"></text></g><g><title>ip_setup_cork (1 samples, 0.04%)</title><rect x="1.4694%" y="117" width="0.0420%" height="15" fill="rgb(242,107,0)" fg:x="35" fg:w="1"/><text x="1.7194%" y="127.50"></text></g><g><title>ipv4_mtu (1 samples, 0.04%)</title><rect x="1.4694%" y="101" width="0.0420%" height="15" fill="rgb(251,28,31)" fg:x="35" fg:w="1"/><text x="1.7194%" y="111.50"></text></g><g><title>__tcp_transmit_skb (10 samples, 0.42%)</title><rect x="1.1335%" y="373" width="0.4198%" height="15" fill="rgb(233,223,10)" fg:x="27" fg:w="10"/><text x="1.3835%" y="383.50"></text></g><g><title>__ip_queue_xmit (10 samples, 0.42%)</title><rect x="1.1335%" y="357" width="0.4198%" height="15" fill="rgb(215,21,27)" fg:x="27" fg:w="10"/><text x="1.3835%" y="367.50"></text></g><g><title>ip_output (1 samples, 0.04%)</title><rect x="1.5113%" y="341" width="0.0420%" height="15" fill="rgb(232,23,21)" fg:x="36" fg:w="1"/><text x="1.7613%" y="351.50"></text></g><g><title>nf_hook_slow (1 samples, 0.04%)</title><rect x="1.5113%" y="325" width="0.0420%" height="15" fill="rgb(244,5,23)" fg:x="36" fg:w="1"/><text x="1.7613%" y="335.50"></text></g><g><title>nf_confirm (1 samples, 0.04%)</title><rect x="1.5113%" y="309" width="0.0420%" height="15" fill="rgb(226,81,46)" fg:x="36" fg:w="1"/><text x="1.7613%" y="319.50"></text></g><g><title>__nf_conntrack_confirm (1 samples, 0.04%)</title><rect x="1.5113%" y="293" width="0.0420%" height="15" fill="rgb(247,70,30)" fg:x="36" fg:w="1"/><text x="1.7613%" y="303.50"></text></g><g><title>ipv4_default_advmss (1 samples, 0.04%)</title><rect x="1.5533%" y="373" width="0.0420%" height="15" fill="rgb(212,68,19)" fg:x="37" fg:w="1"/><text x="1.8033%" y="383.50"></text></g><g><title>ipv4_mtu (1 samples, 0.04%)</title><rect x="1.5953%" y="373" width="0.0420%" height="15" fill="rgb(240,187,13)" fg:x="38" fg:w="1"/><text x="1.8453%" y="383.50"></text></g><g><title>__inet_stream_connect (16 samples, 0.67%)</title><rect x="1.0076%" y="421" width="0.6717%" height="15" fill="rgb(223,113,26)" fg:x="24" fg:w="16"/><text x="1.2576%" y="431.50"></text></g><g><title>tcp_v4_connect (16 samples, 0.67%)</title><rect x="1.0076%" y="405" width="0.6717%" height="15" fill="rgb(206,192,2)" fg:x="24" fg:w="16"/><text x="1.2576%" y="415.50"></text></g><g><title>tcp_connect (13 samples, 0.55%)</title><rect x="1.1335%" y="389" width="0.5458%" height="15" fill="rgb(241,108,4)" fg:x="27" fg:w="13"/><text x="1.3835%" y="399.50"></text></g><g><title>sk_stream_alloc_skb (1 samples, 0.04%)</title><rect x="1.6373%" y="373" width="0.0420%" height="15" fill="rgb(247,173,49)" fg:x="39" fg:w="1"/><text x="1.8873%" y="383.50"></text></g><g><title>__alloc_skb (1 samples, 0.04%)</title><rect x="1.6373%" y="357" width="0.0420%" height="15" fill="rgb(224,114,35)" fg:x="39" fg:w="1"/><text x="1.8873%" y="367.50"></text></g><g><title>__kmalloc_node_track_caller (1 samples, 0.04%)</title><rect x="1.6373%" y="341" width="0.0420%" height="15" fill="rgb(245,159,27)" fg:x="39" fg:w="1"/><text x="1.8873%" y="351.50"></text></g><g><title>memset_erms (1 samples, 0.04%)</title><rect x="1.6373%" y="325" width="0.0420%" height="15" fill="rgb(245,172,44)" fg:x="39" fg:w="1"/><text x="1.8873%" y="335.50"></text></g><g><title>tcp_done (2 samples, 0.08%)</title><rect x="1.6793%" y="341" width="0.0840%" height="15" fill="rgb(236,23,11)" fg:x="40" fg:w="2"/><text x="1.9293%" y="351.50"></text></g><g><title>inet_csk_clear_xmit_timers (2 samples, 0.08%)</title><rect x="1.6793%" y="325" width="0.0840%" height="15" fill="rgb(205,117,38)" fg:x="40" fg:w="2"/><text x="1.9293%" y="335.50"></text></g><g><title>sk_stop_timer (2 samples, 0.08%)</title><rect x="1.6793%" y="309" width="0.0840%" height="15" fill="rgb(237,72,25)" fg:x="40" fg:w="2"/><text x="1.9293%" y="319.50"></text></g><g><title>del_timer (2 samples, 0.08%)</title><rect x="1.6793%" y="293" width="0.0840%" height="15" fill="rgb(244,70,9)" fg:x="40" fg:w="2"/><text x="1.9293%" y="303.50"></text></g><g><title>detach_if_pending (1 samples, 0.04%)</title><rect x="1.7212%" y="277" width="0.0420%" height="15" fill="rgb(217,125,39)" fg:x="41" fg:w="1"/><text x="1.9712%" y="287.50"></text></g><g><title>[libzmq.so.5.2.4] (38 samples, 1.60%)</title><rect x="0.2099%" y="533" width="1.5953%" height="15" fill="rgb(235,36,10)" fg:x="5" fg:w="38"/><text x="0.4599%" y="543.50"></text></g><g><title>__libc_connect (20 samples, 0.84%)</title><rect x="0.9656%" y="517" width="0.8396%" height="15" fill="rgb(251,123,47)" fg:x="23" fg:w="20"/><text x="1.2156%" y="527.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (20 samples, 0.84%)</title><rect x="0.9656%" y="501" width="0.8396%" height="15" fill="rgb(221,13,13)" fg:x="23" fg:w="20"/><text x="1.2156%" y="511.50"></text></g><g><title>do_syscall_64 (20 samples, 0.84%)</title><rect x="0.9656%" y="485" width="0.8396%" height="15" fill="rgb(238,131,9)" fg:x="23" fg:w="20"/><text x="1.2156%" y="495.50"></text></g><g><title>__x64_sys_connect (20 samples, 0.84%)</title><rect x="0.9656%" y="469" width="0.8396%" height="15" fill="rgb(211,50,8)" fg:x="23" fg:w="20"/><text x="1.2156%" y="479.50"></text></g><g><title>__sys_connect (19 samples, 0.80%)</title><rect x="1.0076%" y="453" width="0.7976%" height="15" fill="rgb(245,182,24)" fg:x="24" fg:w="19"/><text x="1.2576%" y="463.50"></text></g><g><title>inet_stream_connect (19 samples, 0.80%)</title><rect x="1.0076%" y="437" width="0.7976%" height="15" fill="rgb(242,14,37)" fg:x="24" fg:w="19"/><text x="1.2576%" y="447.50"></text></g><g><title>release_sock (3 samples, 0.13%)</title><rect x="1.6793%" y="421" width="0.1259%" height="15" fill="rgb(246,228,12)" fg:x="40" fg:w="3"/><text x="1.9293%" y="431.50"></text></g><g><title>__release_sock (3 samples, 0.13%)</title><rect x="1.6793%" y="405" width="0.1259%" height="15" fill="rgb(213,55,15)" fg:x="40" fg:w="3"/><text x="1.9293%" y="415.50"></text></g><g><title>tcp_v4_do_rcv (3 samples, 0.13%)</title><rect x="1.6793%" y="389" width="0.1259%" height="15" fill="rgb(209,9,3)" fg:x="40" fg:w="3"/><text x="1.9293%" y="399.50"></text></g><g><title>tcp_rcv_state_process (3 samples, 0.13%)</title><rect x="1.6793%" y="373" width="0.1259%" height="15" fill="rgb(230,59,30)" fg:x="40" fg:w="3"/><text x="1.9293%" y="383.50"></text></g><g><title>tcp_reset (3 samples, 0.13%)</title><rect x="1.6793%" y="357" width="0.1259%" height="15" fill="rgb(209,121,21)" fg:x="40" fg:w="3"/><text x="1.9293%" y="367.50"></text></g><g><title>tcp_write_queue_purge (1 samples, 0.04%)</title><rect x="1.7632%" y="341" width="0.0420%" height="15" fill="rgb(220,109,13)" fg:x="42" fg:w="1"/><text x="2.0132%" y="351.50"></text></g><g><title>__kfree_skb (1 samples, 0.04%)</title><rect x="1.7632%" y="325" width="0.0420%" height="15" fill="rgb(232,18,1)" fg:x="42" fg:w="1"/><text x="2.0132%" y="335.50"></text></g><g><title>kfree (1 samples, 0.04%)</title><rect x="1.7632%" y="309" width="0.0420%" height="15" fill="rgb(215,41,42)" fg:x="42" fg:w="1"/><text x="2.0132%" y="319.50"></text></g><g><title>__GI_getsockopt (1 samples, 0.04%)</title><rect x="1.8052%" y="533" width="0.0420%" height="15" fill="rgb(224,123,36)" fg:x="43" fg:w="1"/><text x="2.0552%" y="543.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="1.8052%" y="517" width="0.0420%" height="15" fill="rgb(240,125,3)" fg:x="43" fg:w="1"/><text x="2.0552%" y="527.50"></text></g><g><title>do_syscall_64 (1 samples, 0.04%)</title><rect x="1.8052%" y="501" width="0.0420%" height="15" fill="rgb(205,98,50)" fg:x="43" fg:w="1"/><text x="2.0552%" y="511.50"></text></g><g><title>__x64_sys_getsockopt (1 samples, 0.04%)</title><rect x="1.8052%" y="485" width="0.0420%" height="15" fill="rgb(205,185,37)" fg:x="43" fg:w="1"/><text x="2.0552%" y="495.50"></text></g><g><title>__sys_getsockopt (1 samples, 0.04%)</title><rect x="1.8052%" y="469" width="0.0420%" height="15" fill="rgb(238,207,15)" fg:x="43" fg:w="1"/><text x="2.0552%" y="479.50"></text></g><g><title>sock_getsockopt (1 samples, 0.04%)</title><rect x="1.8052%" y="453" width="0.0420%" height="15" fill="rgb(213,199,42)" fg:x="43" fg:w="1"/><text x="2.0552%" y="463.50"></text></g><g><title>__dentry_kill (1 samples, 0.04%)</title><rect x="1.8892%" y="437" width="0.0420%" height="15" fill="rgb(235,201,11)" fg:x="45" fg:w="1"/><text x="2.1392%" y="447.50"></text></g><g><title>iput.part.0 (1 samples, 0.04%)</title><rect x="1.8892%" y="421" width="0.0420%" height="15" fill="rgb(207,46,11)" fg:x="45" fg:w="1"/><text x="2.1392%" y="431.50"></text></g><g><title>__sk_free (1 samples, 0.04%)</title><rect x="1.9312%" y="389" width="0.0420%" height="15" fill="rgb(241,35,35)" fg:x="46" fg:w="1"/><text x="2.1812%" y="399.50"></text></g><g><title>netlink_has_listeners (1 samples, 0.04%)</title><rect x="1.9312%" y="373" width="0.0420%" height="15" fill="rgb(243,32,47)" fg:x="46" fg:w="1"/><text x="2.1812%" y="383.50"></text></g><g><title>__close (4 samples, 0.17%)</title><rect x="1.8472%" y="533" width="0.1679%" height="15" fill="rgb(247,202,23)" fg:x="44" fg:w="4"/><text x="2.0972%" y="543.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 0.17%)</title><rect x="1.8472%" y="517" width="0.1679%" height="15" fill="rgb(219,102,11)" fg:x="44" fg:w="4"/><text x="2.0972%" y="527.50"></text></g><g><title>syscall_exit_to_user_mode (4 samples, 0.17%)</title><rect x="1.8472%" y="501" width="0.1679%" height="15" fill="rgb(243,110,44)" fg:x="44" fg:w="4"/><text x="2.0972%" y="511.50"></text></g><g><title>exit_to_user_mode_prepare (4 samples, 0.17%)</title><rect x="1.8472%" y="485" width="0.1679%" height="15" fill="rgb(222,74,54)" fg:x="44" fg:w="4"/><text x="2.0972%" y="495.50"></text></g><g><title>task_work_run (3 samples, 0.13%)</title><rect x="1.8892%" y="469" width="0.1259%" height="15" fill="rgb(216,99,12)" fg:x="45" fg:w="3"/><text x="2.1392%" y="479.50"></text></g><g><title>__fput (3 samples, 0.13%)</title><rect x="1.8892%" y="453" width="0.1259%" height="15" fill="rgb(226,22,26)" fg:x="45" fg:w="3"/><text x="2.1392%" y="463.50"></text></g><g><title>sock_close (2 samples, 0.08%)</title><rect x="1.9312%" y="437" width="0.0840%" height="15" fill="rgb(217,163,10)" fg:x="46" fg:w="2"/><text x="2.1812%" y="447.50"></text></g><g><title>__sock_release (2 samples, 0.08%)</title><rect x="1.9312%" y="421" width="0.0840%" height="15" fill="rgb(213,25,53)" fg:x="46" fg:w="2"/><text x="2.1812%" y="431.50"></text></g><g><title>inet_release (2 samples, 0.08%)</title><rect x="1.9312%" y="405" width="0.0840%" height="15" fill="rgb(252,105,26)" fg:x="46" fg:w="2"/><text x="2.1812%" y="415.50"></text></g><g><title>tcp_close (1 samples, 0.04%)</title><rect x="1.9731%" y="389" width="0.0420%" height="15" fill="rgb(220,39,43)" fg:x="47" fg:w="1"/><text x="2.2231%" y="399.50"></text></g><g><title>inet_csk_destroy_sock (1 samples, 0.04%)</title><rect x="1.9731%" y="373" width="0.0420%" height="15" fill="rgb(229,68,48)" fg:x="47" fg:w="1"/><text x="2.2231%" y="383.50"></text></g><g><title>tcp_v4_destroy_sock (1 samples, 0.04%)</title><rect x="1.9731%" y="357" width="0.0420%" height="15" fill="rgb(252,8,32)" fg:x="47" fg:w="1"/><text x="2.2231%" y="367.50"></text></g><g><title>tcp_fastopen_destroy_cipher (1 samples, 0.04%)</title><rect x="1.9731%" y="341" width="0.0420%" height="15" fill="rgb(223,20,43)" fg:x="47" fg:w="1"/><text x="2.2231%" y="351.50"></text></g><g><title>[libzmq.so.5.2.4] (44 samples, 1.85%)</title><rect x="0.2099%" y="565" width="1.8472%" height="15" fill="rgb(229,81,49)" fg:x="5" fg:w="44"/><text x="0.4599%" y="575.50">[..</text></g><g><title>[libzmq.so.5.2.4] (44 samples, 1.85%)</title><rect x="0.2099%" y="549" width="1.8472%" height="15" fill="rgb(236,28,36)" fg:x="5" fg:w="44"/><text x="0.4599%" y="559.50">[..</text></g><g><title>getsockopt@plt (1 samples, 0.04%)</title><rect x="2.0151%" y="533" width="0.0420%" height="15" fill="rgb(249,185,26)" fg:x="48" fg:w="1"/><text x="2.2651%" y="543.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.04%)</title><rect x="2.0571%" y="565" width="0.0420%" height="15" fill="rgb(249,174,33)" fg:x="49" fg:w="1"/><text x="2.3071%" y="575.50"></text></g><g><title>exc_page_fault (1 samples, 0.04%)</title><rect x="2.0571%" y="549" width="0.0420%" height="15" fill="rgb(233,201,37)" fg:x="49" fg:w="1"/><text x="2.3071%" y="559.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.04%)</title><rect x="2.0571%" y="533" width="0.0420%" height="15" fill="rgb(221,78,26)" fg:x="49" fg:w="1"/><text x="2.3071%" y="543.50"></text></g><g><title>handle_mm_fault (1 samples, 0.04%)</title><rect x="2.0571%" y="517" width="0.0420%" height="15" fill="rgb(250,127,30)" fg:x="49" fg:w="1"/><text x="2.3071%" y="527.50"></text></g><g><title>__ptep_modify_prot_start (1 samples, 0.04%)</title><rect x="2.0571%" y="501" width="0.0420%" height="15" fill="rgb(230,49,44)" fg:x="49" fg:w="1"/><text x="2.3071%" y="511.50"></text></g><g><title>fput_many (1 samples, 0.04%)</title><rect x="2.0991%" y="485" width="0.0420%" height="15" fill="rgb(229,67,23)" fg:x="50" fg:w="1"/><text x="2.3491%" y="495.50"></text></g><g><title>dequeue_task_fair (1 samples, 0.04%)</title><rect x="2.1411%" y="437" width="0.0420%" height="15" fill="rgb(249,83,47)" fg:x="51" fg:w="1"/><text x="2.3911%" y="447.50"></text></g><g><title>dequeue_entity (1 samples, 0.04%)</title><rect x="2.1411%" y="421" width="0.0420%" height="15" fill="rgb(215,43,3)" fg:x="51" fg:w="1"/><text x="2.3911%" y="431.50"></text></g><g><title>update_load_avg (1 samples, 0.04%)</title><rect x="2.1411%" y="405" width="0.0420%" height="15" fill="rgb(238,154,13)" fg:x="51" fg:w="1"/><text x="2.3911%" y="415.50"></text></g><g><title>__update_load_avg_cfs_rq (1 samples, 0.04%)</title><rect x="2.1411%" y="389" width="0.0420%" height="15" fill="rgb(219,56,2)" fg:x="51" fg:w="1"/><text x="2.3911%" y="399.50"></text></g><g><title>pick_next_task_fair (2 samples, 0.08%)</title><rect x="2.1830%" y="437" width="0.0840%" height="15" fill="rgb(233,0,4)" fg:x="52" fg:w="2"/><text x="2.4330%" y="447.50"></text></g><g><title>newidle_balance (2 samples, 0.08%)</title><rect x="2.1830%" y="421" width="0.0840%" height="15" fill="rgb(235,30,7)" fg:x="52" fg:w="2"/><text x="2.4330%" y="431.50"></text></g><g><title>_nohz_idle_balance (2 samples, 0.08%)</title><rect x="2.1830%" y="405" width="0.0840%" height="15" fill="rgb(250,79,13)" fg:x="52" fg:w="2"/><text x="2.4330%" y="415.50"></text></g><g><title>idle_cpu (1 samples, 0.04%)</title><rect x="2.2250%" y="389" width="0.0420%" height="15" fill="rgb(211,146,34)" fg:x="53" fg:w="1"/><text x="2.4750%" y="399.50"></text></g><g><title>[libzmq.so.5.2.4] (54 samples, 2.27%)</title><rect x="0.0420%" y="581" width="2.2670%" height="15" fill="rgb(228,22,38)" fg:x="1" fg:w="54"/><text x="0.2920%" y="591.50">[..</text></g><g><title>epoll_wait (5 samples, 0.21%)</title><rect x="2.0991%" y="565" width="0.2099%" height="15" fill="rgb(235,168,5)" fg:x="50" fg:w="5"/><text x="2.3491%" y="575.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.21%)</title><rect x="2.0991%" y="549" width="0.2099%" height="15" fill="rgb(221,155,16)" fg:x="50" fg:w="5"/><text x="2.3491%" y="559.50"></text></g><g><title>do_syscall_64 (5 samples, 0.21%)</title><rect x="2.0991%" y="533" width="0.2099%" height="15" fill="rgb(215,215,53)" fg:x="50" fg:w="5"/><text x="2.3491%" y="543.50"></text></g><g><title>__x64_sys_epoll_wait (5 samples, 0.21%)</title><rect x="2.0991%" y="517" width="0.2099%" height="15" fill="rgb(223,4,10)" fg:x="50" fg:w="5"/><text x="2.3491%" y="527.50"></text></g><g><title>do_epoll_wait (5 samples, 0.21%)</title><rect x="2.0991%" y="501" width="0.2099%" height="15" fill="rgb(234,103,6)" fg:x="50" fg:w="5"/><text x="2.3491%" y="511.50"></text></g><g><title>schedule_hrtimeout_range_clock (4 samples, 0.17%)</title><rect x="2.1411%" y="485" width="0.1679%" height="15" fill="rgb(227,97,0)" fg:x="51" fg:w="4"/><text x="2.3911%" y="495.50"></text></g><g><title>schedule (4 samples, 0.17%)</title><rect x="2.1411%" y="469" width="0.1679%" height="15" fill="rgb(234,150,53)" fg:x="51" fg:w="4"/><text x="2.3911%" y="479.50"></text></g><g><title>__schedule (4 samples, 0.17%)</title><rect x="2.1411%" y="453" width="0.1679%" height="15" fill="rgb(228,201,54)" fg:x="51" fg:w="4"/><text x="2.3911%" y="463.50"></text></g><g><title>psi_task_change (1 samples, 0.04%)</title><rect x="2.2670%" y="437" width="0.0420%" height="15" fill="rgb(222,22,37)" fg:x="54" fg:w="1"/><text x="2.5170%" y="447.50"></text></g><g><title>psi_group_change (1 samples, 0.04%)</title><rect x="2.2670%" y="421" width="0.0420%" height="15" fill="rgb(237,53,32)" fg:x="54" fg:w="1"/><text x="2.5170%" y="431.50"></text></g><g><title>[unknown] (55 samples, 2.31%)</title><rect x="0.0420%" y="597" width="2.3090%" height="15" fill="rgb(233,25,53)" fg:x="1" fg:w="55"/><text x="0.2920%" y="607.50">[..</text></g><g><title>__GI___libc_fcntl64 (1 samples, 0.04%)</title><rect x="2.3090%" y="581" width="0.0420%" height="15" fill="rgb(210,40,34)" fg:x="55" fg:w="1"/><text x="2.5590%" y="591.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.04%)</title><rect x="2.3510%" y="469" width="0.0420%" height="15" fill="rgb(241,220,44)" fg:x="56" fg:w="1"/><text x="2.6010%" y="479.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.04%)</title><rect x="2.3510%" y="453" width="0.0420%" height="15" fill="rgb(235,28,35)" fg:x="56" fg:w="1"/><text x="2.6010%" y="463.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.04%)</title><rect x="2.3510%" y="437" width="0.0420%" height="15" fill="rgb(210,56,17)" fg:x="56" fg:w="1"/><text x="2.6010%" y="447.50"></text></g><g><title>freeaddrinfo@plt (1 samples, 0.04%)</title><rect x="2.3510%" y="421" width="0.0420%" height="15" fill="rgb(224,130,29)" fg:x="56" fg:w="1"/><text x="2.6010%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (1 samples, 0.04%)</title><rect x="2.3929%" y="469" width="0.0420%" height="15" fill="rgb(235,212,8)" fg:x="57" fg:w="1"/><text x="2.6429%" y="479.50"></text></g><g><title>[libzmq.so.5.2.4] (3 samples, 0.13%)</title><rect x="2.3510%" y="485" width="0.1259%" height="15" fill="rgb(223,33,50)" fg:x="56" fg:w="3"/><text x="2.6010%" y="495.50"></text></g><g><title>__libc_connect (1 samples, 0.04%)</title><rect x="2.4349%" y="469" width="0.0420%" height="15" fill="rgb(219,149,13)" fg:x="58" fg:w="1"/><text x="2.6849%" y="479.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="2.4349%" y="453" width="0.0420%" height="15" fill="rgb(250,156,29)" fg:x="58" fg:w="1"/><text x="2.6849%" y="463.50"></text></g><g><title>do_syscall_64 (1 samples, 0.04%)</title><rect x="2.4349%" y="437" width="0.0420%" height="15" fill="rgb(216,193,19)" fg:x="58" fg:w="1"/><text x="2.6849%" y="447.50"></text></g><g><title>__x64_sys_connect (1 samples, 0.04%)</title><rect x="2.4349%" y="421" width="0.0420%" height="15" fill="rgb(216,135,14)" fg:x="58" fg:w="1"/><text x="2.6849%" y="431.50"></text></g><g><title>__sys_connect (1 samples, 0.04%)</title><rect x="2.4349%" y="405" width="0.0420%" height="15" fill="rgb(241,47,5)" fg:x="58" fg:w="1"/><text x="2.6849%" y="415.50"></text></g><g><title>inet_stream_connect (1 samples, 0.04%)</title><rect x="2.4349%" y="389" width="0.0420%" height="15" fill="rgb(233,42,35)" fg:x="58" fg:w="1"/><text x="2.6849%" y="399.50"></text></g><g><title>__inet_stream_connect (1 samples, 0.04%)</title><rect x="2.4349%" y="373" width="0.0420%" height="15" fill="rgb(231,13,6)" fg:x="58" fg:w="1"/><text x="2.6849%" y="383.50"></text></g><g><title>tcp_v4_connect (1 samples, 0.04%)</title><rect x="2.4349%" y="357" width="0.0420%" height="15" fill="rgb(207,181,40)" fg:x="58" fg:w="1"/><text x="2.6849%" y="367.50"></text></g><g><title>ip_route_output_flow (1 samples, 0.04%)</title><rect x="2.4349%" y="341" width="0.0420%" height="15" fill="rgb(254,173,49)" fg:x="58" fg:w="1"/><text x="2.6849%" y="351.50"></text></g><g><title>__ip_local_out (1 samples, 0.04%)</title><rect x="2.4769%" y="309" width="0.0420%" height="15" fill="rgb(221,1,38)" fg:x="59" fg:w="1"/><text x="2.7269%" y="319.50"></text></g><g><title>nf_hook_slow (1 samples, 0.04%)</title><rect x="2.4769%" y="293" width="0.0420%" height="15" fill="rgb(206,124,46)" fg:x="59" fg:w="1"/><text x="2.7269%" y="303.50"></text></g><g><title>nft_do_chain_ipv4 (1 samples, 0.04%)</title><rect x="2.4769%" y="277" width="0.0420%" height="15" fill="rgb(249,21,11)" fg:x="59" fg:w="1"/><text x="2.7269%" y="287.50"></text></g><g><title>nft_do_chain (1 samples, 0.04%)</title><rect x="2.4769%" y="261" width="0.0420%" height="15" fill="rgb(222,201,40)" fg:x="59" fg:w="1"/><text x="2.7269%" y="271.50"></text></g><g><title>ip_local_deliver (1 samples, 0.04%)</title><rect x="2.5609%" y="165" width="0.0420%" height="15" fill="rgb(235,61,29)" fg:x="61" fg:w="1"/><text x="2.8109%" y="175.50"></text></g><g><title>nf_hook_slow (1 samples, 0.04%)</title><rect x="2.5609%" y="149" width="0.0420%" height="15" fill="rgb(219,207,3)" fg:x="61" fg:w="1"/><text x="2.8109%" y="159.50"></text></g><g><title>nft_do_chain_ipv4 (1 samples, 0.04%)</title><rect x="2.5609%" y="133" width="0.0420%" height="15" fill="rgb(222,56,46)" fg:x="61" fg:w="1"/><text x="2.8109%" y="143.50"></text></g><g><title>nft_do_chain (1 samples, 0.04%)</title><rect x="2.5609%" y="117" width="0.0420%" height="15" fill="rgb(239,76,54)" fg:x="61" fg:w="1"/><text x="2.8109%" y="127.50"></text></g><g><title>nft_update_chain_stats (1 samples, 0.04%)</title><rect x="2.5609%" y="101" width="0.0420%" height="15" fill="rgb(231,124,27)" fg:x="61" fg:w="1"/><text x="2.8109%" y="111.50"></text></g><g><title>__tcp_transmit_skb (4 samples, 0.17%)</title><rect x="2.4769%" y="341" width="0.1679%" height="15" fill="rgb(249,195,6)" fg:x="59" fg:w="4"/><text x="2.7269%" y="351.50"></text></g><g><title>__ip_queue_xmit (4 samples, 0.17%)</title><rect x="2.4769%" y="325" width="0.1679%" height="15" fill="rgb(237,174,47)" fg:x="59" fg:w="4"/><text x="2.7269%" y="335.50"></text></g><g><title>ip_finish_output2 (3 samples, 0.13%)</title><rect x="2.5189%" y="309" width="0.1259%" height="15" fill="rgb(206,201,31)" fg:x="60" fg:w="3"/><text x="2.7689%" y="319.50"></text></g><g><title>__local_bh_enable_ip (3 samples, 0.13%)</title><rect x="2.5189%" y="293" width="0.1259%" height="15" fill="rgb(231,57,52)" fg:x="60" fg:w="3"/><text x="2.7689%" y="303.50"></text></g><g><title>do_softirq (3 samples, 0.13%)</title><rect x="2.5189%" y="277" width="0.1259%" height="15" fill="rgb(248,177,22)" fg:x="60" fg:w="3"/><text x="2.7689%" y="287.50"></text></g><g><title>do_softirq_own_stack (3 samples, 0.13%)</title><rect x="2.5189%" y="261" width="0.1259%" height="15" fill="rgb(215,211,37)" fg:x="60" fg:w="3"/><text x="2.7689%" y="271.50"></text></g><g><title>asm_call_sysvec_on_stack (2 samples, 0.08%)</title><rect x="2.5609%" y="245" width="0.0840%" height="15" fill="rgb(241,128,51)" fg:x="61" fg:w="2"/><text x="2.8109%" y="255.50"></text></g><g><title>__softirqentry_text_start (2 samples, 0.08%)</title><rect x="2.5609%" y="229" width="0.0840%" height="15" fill="rgb(227,165,31)" fg:x="61" fg:w="2"/><text x="2.8109%" y="239.50"></text></g><g><title>net_rx_action (2 samples, 0.08%)</title><rect x="2.5609%" y="213" width="0.0840%" height="15" fill="rgb(228,167,24)" fg:x="61" fg:w="2"/><text x="2.8109%" y="223.50"></text></g><g><title>process_backlog (2 samples, 0.08%)</title><rect x="2.5609%" y="197" width="0.0840%" height="15" fill="rgb(228,143,12)" fg:x="61" fg:w="2"/><text x="2.8109%" y="207.50"></text></g><g><title>__netif_receive_skb_one_core (2 samples, 0.08%)</title><rect x="2.5609%" y="181" width="0.0840%" height="15" fill="rgb(249,149,8)" fg:x="61" fg:w="2"/><text x="2.8109%" y="191.50"></text></g><g><title>ip_local_deliver_finish (1 samples, 0.04%)</title><rect x="2.6029%" y="165" width="0.0420%" height="15" fill="rgb(243,35,44)" fg:x="62" fg:w="1"/><text x="2.8529%" y="175.50"></text></g><g><title>ip_protocol_deliver_rcu (1 samples, 0.04%)</title><rect x="2.6029%" y="149" width="0.0420%" height="15" fill="rgb(246,89,9)" fg:x="62" fg:w="1"/><text x="2.8529%" y="159.50"></text></g><g><title>tcp_v4_rcv (1 samples, 0.04%)</title><rect x="2.6029%" y="133" width="0.0420%" height="15" fill="rgb(233,213,13)" fg:x="62" fg:w="1"/><text x="2.8529%" y="143.50"></text></g><g><title>tcp_v4_send_reset (1 samples, 0.04%)</title><rect x="2.6029%" y="117" width="0.0420%" height="15" fill="rgb(233,141,41)" fg:x="62" fg:w="1"/><text x="2.8529%" y="127.50"></text></g><g><title>ip_send_unicast_reply (1 samples, 0.04%)</title><rect x="2.6029%" y="101" width="0.0420%" height="15" fill="rgb(239,167,4)" fg:x="62" fg:w="1"/><text x="2.8529%" y="111.50"></text></g><g><title>ip_setup_cork (1 samples, 0.04%)</title><rect x="2.6029%" y="85" width="0.0420%" height="15" fill="rgb(209,217,16)" fg:x="62" fg:w="1"/><text x="2.8529%" y="95.50"></text></g><g><title>__inet_stream_connect (5 samples, 0.21%)</title><rect x="2.4769%" y="389" width="0.2099%" height="15" fill="rgb(219,88,35)" fg:x="59" fg:w="5"/><text x="2.7269%" y="399.50"></text></g><g><title>tcp_v4_connect (5 samples, 0.21%)</title><rect x="2.4769%" y="373" width="0.2099%" height="15" fill="rgb(220,193,23)" fg:x="59" fg:w="5"/><text x="2.7269%" y="383.50"></text></g><g><title>tcp_connect (5 samples, 0.21%)</title><rect x="2.4769%" y="357" width="0.2099%" height="15" fill="rgb(230,90,52)" fg:x="59" fg:w="5"/><text x="2.7269%" y="367.50"></text></g><g><title>inet_sk_rebuild_header (1 samples, 0.04%)</title><rect x="2.6448%" y="341" width="0.0420%" height="15" fill="rgb(252,106,19)" fg:x="63" fg:w="1"/><text x="2.8948%" y="351.50"></text></g><g><title>__sk_dst_check (1 samples, 0.04%)</title><rect x="2.6448%" y="325" width="0.0420%" height="15" fill="rgb(206,74,20)" fg:x="63" fg:w="1"/><text x="2.8948%" y="335.50"></text></g><g><title>ipv4_dst_check (1 samples, 0.04%)</title><rect x="2.6448%" y="309" width="0.0420%" height="15" fill="rgb(230,138,44)" fg:x="63" fg:w="1"/><text x="2.8948%" y="319.50"></text></g><g><title>[libzmq.so.5.2.4] (9 samples, 0.38%)</title><rect x="2.3510%" y="533" width="0.3778%" height="15" fill="rgb(235,182,43)" fg:x="56" fg:w="9"/><text x="2.6010%" y="543.50"></text></g><g><title>[libzmq.so.5.2.4] (9 samples, 0.38%)</title><rect x="2.3510%" y="517" width="0.3778%" height="15" fill="rgb(242,16,51)" fg:x="56" fg:w="9"/><text x="2.6010%" y="527.50"></text></g><g><title>[libzmq.so.5.2.4] (9 samples, 0.38%)</title><rect x="2.3510%" y="501" width="0.3778%" height="15" fill="rgb(248,9,4)" fg:x="56" fg:w="9"/><text x="2.6010%" y="511.50"></text></g><g><title>__libc_connect (6 samples, 0.25%)</title><rect x="2.4769%" y="485" width="0.2519%" height="15" fill="rgb(210,31,22)" fg:x="59" fg:w="6"/><text x="2.7269%" y="495.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.25%)</title><rect x="2.4769%" y="469" width="0.2519%" height="15" fill="rgb(239,54,39)" fg:x="59" fg:w="6"/><text x="2.7269%" y="479.50"></text></g><g><title>do_syscall_64 (6 samples, 0.25%)</title><rect x="2.4769%" y="453" width="0.2519%" height="15" fill="rgb(230,99,41)" fg:x="59" fg:w="6"/><text x="2.7269%" y="463.50"></text></g><g><title>__x64_sys_connect (6 samples, 0.25%)</title><rect x="2.4769%" y="437" width="0.2519%" height="15" fill="rgb(253,106,12)" fg:x="59" fg:w="6"/><text x="2.7269%" y="447.50"></text></g><g><title>__sys_connect (6 samples, 0.25%)</title><rect x="2.4769%" y="421" width="0.2519%" height="15" fill="rgb(213,46,41)" fg:x="59" fg:w="6"/><text x="2.7269%" y="431.50"></text></g><g><title>inet_stream_connect (6 samples, 0.25%)</title><rect x="2.4769%" y="405" width="0.2519%" height="15" fill="rgb(215,133,35)" fg:x="59" fg:w="6"/><text x="2.7269%" y="415.50"></text></g><g><title>release_sock (1 samples, 0.04%)</title><rect x="2.6868%" y="389" width="0.0420%" height="15" fill="rgb(213,28,5)" fg:x="64" fg:w="1"/><text x="2.9368%" y="399.50"></text></g><g><title>__release_sock (1 samples, 0.04%)</title><rect x="2.6868%" y="373" width="0.0420%" height="15" fill="rgb(215,77,49)" fg:x="64" fg:w="1"/><text x="2.9368%" y="383.50"></text></g><g><title>tcp_v4_do_rcv (1 samples, 0.04%)</title><rect x="2.6868%" y="357" width="0.0420%" height="15" fill="rgb(248,100,22)" fg:x="64" fg:w="1"/><text x="2.9368%" y="367.50"></text></g><g><title>tcp_rcv_state_process (1 samples, 0.04%)</title><rect x="2.6868%" y="341" width="0.0420%" height="15" fill="rgb(208,67,9)" fg:x="64" fg:w="1"/><text x="2.9368%" y="351.50"></text></g><g><title>tcp_reset (1 samples, 0.04%)</title><rect x="2.6868%" y="325" width="0.0420%" height="15" fill="rgb(219,133,21)" fg:x="64" fg:w="1"/><text x="2.9368%" y="335.50"></text></g><g><title>tcp_done (1 samples, 0.04%)</title><rect x="2.6868%" y="309" width="0.0420%" height="15" fill="rgb(246,46,29)" fg:x="64" fg:w="1"/><text x="2.9368%" y="319.50"></text></g><g><title>inet_csk_clear_xmit_timers (1 samples, 0.04%)</title><rect x="2.6868%" y="293" width="0.0420%" height="15" fill="rgb(246,185,52)" fg:x="64" fg:w="1"/><text x="2.9368%" y="303.50"></text></g><g><title>sk_stop_timer (1 samples, 0.04%)</title><rect x="2.6868%" y="277" width="0.0420%" height="15" fill="rgb(252,136,11)" fg:x="64" fg:w="1"/><text x="2.9368%" y="287.50"></text></g><g><title>del_timer (1 samples, 0.04%)</title><rect x="2.6868%" y="261" width="0.0420%" height="15" fill="rgb(219,138,53)" fg:x="64" fg:w="1"/><text x="2.9368%" y="271.50"></text></g><g><title>lock_timer_base (1 samples, 0.04%)</title><rect x="2.6868%" y="245" width="0.0420%" height="15" fill="rgb(211,51,23)" fg:x="64" fg:w="1"/><text x="2.9368%" y="255.50"></text></g><g><title>__GI___clone (10 samples, 0.42%)</title><rect x="2.3510%" y="597" width="0.4198%" height="15" fill="rgb(247,221,28)" fg:x="56" fg:w="10"/><text x="2.6010%" y="607.50"></text></g><g><title>start_thread (10 samples, 0.42%)</title><rect x="2.3510%" y="581" width="0.4198%" height="15" fill="rgb(251,222,45)" fg:x="56" fg:w="10"/><text x="2.6010%" y="591.50"></text></g><g><title>[libzmq.so.5.2.4] (10 samples, 0.42%)</title><rect x="2.3510%" y="565" width="0.4198%" height="15" fill="rgb(217,162,53)" fg:x="56" fg:w="10"/><text x="2.6010%" y="575.50"></text></g><g><title>[libzmq.so.5.2.4] (10 samples, 0.42%)</title><rect x="2.3510%" y="549" width="0.4198%" height="15" fill="rgb(229,93,14)" fg:x="56" fg:w="10"/><text x="2.6010%" y="559.50"></text></g><g><title>epoll_wait (1 samples, 0.04%)</title><rect x="2.7288%" y="533" width="0.0420%" height="15" fill="rgb(209,67,49)" fg:x="65" fg:w="1"/><text x="2.9788%" y="543.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="2.7288%" y="517" width="0.0420%" height="15" fill="rgb(213,87,29)" fg:x="65" fg:w="1"/><text x="2.9788%" y="527.50"></text></g><g><title>do_syscall_64 (1 samples, 0.04%)</title><rect x="2.7288%" y="501" width="0.0420%" height="15" fill="rgb(205,151,52)" fg:x="65" fg:w="1"/><text x="2.9788%" y="511.50"></text></g><g><title>__x64_sys_epoll_wait (1 samples, 0.04%)</title><rect x="2.7288%" y="485" width="0.0420%" height="15" fill="rgb(253,215,39)" fg:x="65" fg:w="1"/><text x="2.9788%" y="495.50"></text></g><g><title>do_epoll_wait (1 samples, 0.04%)</title><rect x="2.7288%" y="469" width="0.0420%" height="15" fill="rgb(221,220,41)" fg:x="65" fg:w="1"/><text x="2.9788%" y="479.50"></text></g><g><title>__x64_sys_connect (1 samples, 0.04%)</title><rect x="2.7708%" y="565" width="0.0420%" height="15" fill="rgb(218,133,21)" fg:x="66" fg:w="1"/><text x="3.0208%" y="575.50"></text></g><g><title>__sys_connect (1 samples, 0.04%)</title><rect x="2.7708%" y="549" width="0.0420%" height="15" fill="rgb(221,193,43)" fg:x="66" fg:w="1"/><text x="3.0208%" y="559.50"></text></g><g><title>inet_stream_connect (1 samples, 0.04%)</title><rect x="2.7708%" y="533" width="0.0420%" height="15" fill="rgb(240,128,52)" fg:x="66" fg:w="1"/><text x="3.0208%" y="543.50"></text></g><g><title>__inet_stream_connect (1 samples, 0.04%)</title><rect x="2.7708%" y="517" width="0.0420%" height="15" fill="rgb(253,114,12)" fg:x="66" fg:w="1"/><text x="3.0208%" y="527.50"></text></g><g><title>tcp_v4_connect (1 samples, 0.04%)</title><rect x="2.7708%" y="501" width="0.0420%" height="15" fill="rgb(215,223,47)" fg:x="66" fg:w="1"/><text x="3.0208%" y="511.50"></text></g><g><title>tcp_connect (1 samples, 0.04%)</title><rect x="2.7708%" y="485" width="0.0420%" height="15" fill="rgb(248,225,23)" fg:x="66" fg:w="1"/><text x="3.0208%" y="495.50"></text></g><g><title>__tcp_transmit_skb (1 samples, 0.04%)</title><rect x="2.7708%" y="469" width="0.0420%" height="15" fill="rgb(250,108,0)" fg:x="66" fg:w="1"/><text x="3.0208%" y="479.50"></text></g><g><title>__ip_queue_xmit (1 samples, 0.04%)</title><rect x="2.7708%" y="453" width="0.0420%" height="15" fill="rgb(228,208,7)" fg:x="66" fg:w="1"/><text x="3.0208%" y="463.50"></text></g><g><title>__ip_local_out (1 samples, 0.04%)</title><rect x="2.7708%" y="437" width="0.0420%" height="15" fill="rgb(244,45,10)" fg:x="66" fg:w="1"/><text x="3.0208%" y="447.50"></text></g><g><title>ip_send_check (1 samples, 0.04%)</title><rect x="2.7708%" y="421" width="0.0420%" height="15" fill="rgb(207,125,25)" fg:x="66" fg:w="1"/><text x="3.0208%" y="431.50"></text></g><g><title>reweight_entity (1 samples, 0.04%)</title><rect x="2.8128%" y="453" width="0.0420%" height="15" fill="rgb(210,195,18)" fg:x="67" fg:w="1"/><text x="3.0628%" y="463.50"></text></g><g><title>__x64_sys_epoll_wait (2 samples, 0.08%)</title><rect x="2.8128%" y="565" width="0.0840%" height="15" fill="rgb(249,80,12)" fg:x="67" fg:w="2"/><text x="3.0628%" y="575.50"></text></g><g><title>do_epoll_wait (2 samples, 0.08%)</title><rect x="2.8128%" y="549" width="0.0840%" height="15" fill="rgb(221,65,9)" fg:x="67" fg:w="2"/><text x="3.0628%" y="559.50"></text></g><g><title>schedule_hrtimeout_range_clock (2 samples, 0.08%)</title><rect x="2.8128%" y="533" width="0.0840%" height="15" fill="rgb(235,49,36)" fg:x="67" fg:w="2"/><text x="3.0628%" y="543.50"></text></g><g><title>schedule (2 samples, 0.08%)</title><rect x="2.8128%" y="517" width="0.0840%" height="15" fill="rgb(225,32,20)" fg:x="67" fg:w="2"/><text x="3.0628%" y="527.50"></text></g><g><title>__schedule (2 samples, 0.08%)</title><rect x="2.8128%" y="501" width="0.0840%" height="15" fill="rgb(215,141,46)" fg:x="67" fg:w="2"/><text x="3.0628%" y="511.50"></text></g><g><title>dequeue_task_fair (2 samples, 0.08%)</title><rect x="2.8128%" y="485" width="0.0840%" height="15" fill="rgb(250,160,47)" fg:x="67" fg:w="2"/><text x="3.0628%" y="495.50"></text></g><g><title>dequeue_entity (2 samples, 0.08%)</title><rect x="2.8128%" y="469" width="0.0840%" height="15" fill="rgb(216,222,40)" fg:x="67" fg:w="2"/><text x="3.0628%" y="479.50"></text></g><g><title>update_curr (1 samples, 0.04%)</title><rect x="2.8547%" y="453" width="0.0420%" height="15" fill="rgb(234,217,39)" fg:x="68" fg:w="1"/><text x="3.1047%" y="463.50"></text></g><g><title>cpuacct_charge (1 samples, 0.04%)</title><rect x="2.8547%" y="437" width="0.0420%" height="15" fill="rgb(207,178,40)" fg:x="68" fg:w="1"/><text x="3.1047%" y="447.50"></text></g><g><title>do_syscall_64 (4 samples, 0.17%)</title><rect x="2.7708%" y="581" width="0.1679%" height="15" fill="rgb(221,136,13)" fg:x="66" fg:w="4"/><text x="3.0208%" y="591.50"></text></g><g><title>__x64_sys_socket (1 samples, 0.04%)</title><rect x="2.8967%" y="565" width="0.0420%" height="15" fill="rgb(249,199,10)" fg:x="69" fg:w="1"/><text x="3.1467%" y="575.50"></text></g><g><title>__sys_socket (1 samples, 0.04%)</title><rect x="2.8967%" y="549" width="0.0420%" height="15" fill="rgb(249,222,13)" fg:x="69" fg:w="1"/><text x="3.1467%" y="559.50"></text></g><g><title>sock_alloc_file (1 samples, 0.04%)</title><rect x="2.8967%" y="533" width="0.0420%" height="15" fill="rgb(244,185,38)" fg:x="69" fg:w="1"/><text x="3.1467%" y="543.50"></text></g><g><title>alloc_file_pseudo (1 samples, 0.04%)</title><rect x="2.8967%" y="517" width="0.0420%" height="15" fill="rgb(236,202,9)" fg:x="69" fg:w="1"/><text x="3.1467%" y="527.50"></text></g><g><title>alloc_file (1 samples, 0.04%)</title><rect x="2.8967%" y="501" width="0.0420%" height="15" fill="rgb(250,229,37)" fg:x="69" fg:w="1"/><text x="3.1467%" y="511.50"></text></g><g><title>alloc_empty_file (1 samples, 0.04%)</title><rect x="2.8967%" y="485" width="0.0420%" height="15" fill="rgb(206,174,23)" fg:x="69" fg:w="1"/><text x="3.1467%" y="495.50"></text></g><g><title>__alloc_file (1 samples, 0.04%)</title><rect x="2.8967%" y="469" width="0.0420%" height="15" fill="rgb(211,33,43)" fg:x="69" fg:w="1"/><text x="3.1467%" y="479.50"></text></g><g><title>kmem_cache_alloc (1 samples, 0.04%)</title><rect x="2.8967%" y="453" width="0.0420%" height="15" fill="rgb(245,58,50)" fg:x="69" fg:w="1"/><text x="3.1467%" y="463.50"></text></g><g><title>memcg_slab_post_alloc_hook (1 samples, 0.04%)</title><rect x="2.8967%" y="437" width="0.0420%" height="15" fill="rgb(244,68,36)" fg:x="69" fg:w="1"/><text x="3.1467%" y="447.50"></text></g><g><title>ZMQbg/IO/0 (71 samples, 2.98%)</title><rect x="0.0000%" y="613" width="2.9807%" height="15" fill="rgb(232,229,15)" fg:x="0" fg:w="71"/><text x="0.2500%" y="623.50">ZMQ..</text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.21%)</title><rect x="2.7708%" y="597" width="0.2099%" height="15" fill="rgb(254,30,23)" fg:x="66" fg:w="5"/><text x="3.0208%" y="607.50"></text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.04%)</title><rect x="2.9387%" y="581" width="0.0420%" height="15" fill="rgb(235,160,14)" fg:x="70" fg:w="1"/><text x="3.1887%" y="591.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.04%)</title><rect x="2.9387%" y="565" width="0.0420%" height="15" fill="rgb(212,155,44)" fg:x="70" fg:w="1"/><text x="3.1887%" y="575.50"></text></g><g><title>task_work_run (1 samples, 0.04%)</title><rect x="2.9387%" y="549" width="0.0420%" height="15" fill="rgb(226,2,50)" fg:x="70" fg:w="1"/><text x="3.1887%" y="559.50"></text></g><g><title>__fput (1 samples, 0.04%)</title><rect x="2.9387%" y="533" width="0.0420%" height="15" fill="rgb(234,177,6)" fg:x="70" fg:w="1"/><text x="3.1887%" y="543.50"></text></g><g><title>mntput_no_expire (1 samples, 0.04%)</title><rect x="2.9387%" y="517" width="0.0420%" height="15" fill="rgb(217,24,9)" fg:x="70" fg:w="1"/><text x="3.1887%" y="527.50"></text></g><g><title>ZMQbg/Reaper (1 samples, 0.04%)</title><rect x="2.9807%" y="613" width="0.0420%" height="15" fill="rgb(220,13,46)" fg:x="71" fg:w="1"/><text x="3.2307%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="2.9807%" y="597" width="0.0420%" height="15" fill="rgb(239,221,27)" fg:x="71" fg:w="1"/><text x="3.2307%" y="607.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.04%)</title><rect x="2.9807%" y="581" width="0.0420%" height="15" fill="rgb(222,198,25)" fg:x="71" fg:w="1"/><text x="3.2307%" y="591.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.04%)</title><rect x="2.9807%" y="565" width="0.0420%" height="15" fill="rgb(211,99,13)" fg:x="71" fg:w="1"/><text x="3.2307%" y="575.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.04%)</title><rect x="2.9807%" y="549" width="0.0420%" height="15" fill="rgb(232,111,31)" fg:x="71" fg:w="1"/><text x="3.2307%" y="559.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.04%)</title><rect x="2.9807%" y="533" width="0.0420%" height="15" fill="rgb(245,82,37)" fg:x="71" fg:w="1"/><text x="3.2307%" y="543.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.04%)</title><rect x="2.9807%" y="517" width="0.0420%" height="15" fill="rgb(227,149,46)" fg:x="71" fg:w="1"/><text x="3.2307%" y="527.50"></text></g><g><title>operator new (1 samples, 0.04%)</title><rect x="2.9807%" y="501" width="0.0420%" height="15" fill="rgb(218,36,50)" fg:x="71" fg:w="1"/><text x="3.2307%" y="511.50"></text></g><g><title>operator new (1 samples, 0.04%)</title><rect x="2.9807%" y="485" width="0.0420%" height="15" fill="rgb(226,80,48)" fg:x="71" fg:w="1"/><text x="3.2307%" y="495.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.04%)</title><rect x="2.9807%" y="469" width="0.0420%" height="15" fill="rgb(238,224,15)" fg:x="71" fg:w="1"/><text x="3.2307%" y="479.50"></text></g><g><title>tcache_init (1 samples, 0.04%)</title><rect x="2.9807%" y="453" width="0.0420%" height="15" fill="rgb(241,136,10)" fg:x="71" fg:w="1"/><text x="3.2307%" y="463.50"></text></g><g><title>tcache_init (1 samples, 0.04%)</title><rect x="2.9807%" y="437" width="0.0420%" height="15" fill="rgb(208,32,45)" fg:x="71" fg:w="1"/><text x="3.2307%" y="447.50"></text></g><g><title>arena_get2 (1 samples, 0.04%)</title><rect x="2.9807%" y="421" width="0.0420%" height="15" fill="rgb(207,135,9)" fg:x="71" fg:w="1"/><text x="3.2307%" y="431.50"></text></g><g><title>arena_get2 (1 samples, 0.04%)</title><rect x="2.9807%" y="405" width="0.0420%" height="15" fill="rgb(206,86,44)" fg:x="71" fg:w="1"/><text x="3.2307%" y="415.50"></text></g><g><title>_int_new_arena (1 samples, 0.04%)</title><rect x="2.9807%" y="389" width="0.0420%" height="15" fill="rgb(245,177,15)" fg:x="71" fg:w="1"/><text x="3.2307%" y="399.50"></text></g><g><title>new_heap (1 samples, 0.04%)</title><rect x="2.9807%" y="373" width="0.0420%" height="15" fill="rgb(206,64,50)" fg:x="71" fg:w="1"/><text x="3.2307%" y="383.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.04%)</title><rect x="2.9807%" y="357" width="0.0420%" height="15" fill="rgb(234,36,40)" fg:x="71" fg:w="1"/><text x="3.2307%" y="367.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.04%)</title><rect x="2.9807%" y="341" width="0.0420%" height="15" fill="rgb(213,64,8)" fg:x="71" fg:w="1"/><text x="3.2307%" y="351.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="2.9807%" y="325" width="0.0420%" height="15" fill="rgb(210,75,36)" fg:x="71" fg:w="1"/><text x="3.2307%" y="335.50"></text></g><g><title>do_syscall_64 (1 samples, 0.04%)</title><rect x="2.9807%" y="309" width="0.0420%" height="15" fill="rgb(229,88,21)" fg:x="71" fg:w="1"/><text x="3.2307%" y="319.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.04%)</title><rect x="2.9807%" y="293" width="0.0420%" height="15" fill="rgb(252,204,47)" fg:x="71" fg:w="1"/><text x="3.2307%" y="303.50"></text></g><g><title>do_mmap (1 samples, 0.04%)</title><rect x="2.9807%" y="277" width="0.0420%" height="15" fill="rgb(208,77,27)" fg:x="71" fg:w="1"/><text x="3.2307%" y="287.50"></text></g><g><title>mmap_region (1 samples, 0.04%)</title><rect x="2.9807%" y="261" width="0.0420%" height="15" fill="rgb(221,76,26)" fg:x="71" fg:w="1"/><text x="3.2307%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.13%)</title><rect x="3.0227%" y="565" width="0.1259%" height="15" fill="rgb(225,139,18)" fg:x="72" fg:w="3"/><text x="3.2727%" y="575.50"></text></g><g><title>&lt;colmet_node::backends::metric::Metric as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="3.1486%" y="517" width="0.0420%" height="15" fill="rgb(230,137,11)" fg:x="75" fg:w="1"/><text x="3.3986%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="3.1486%" y="501" width="0.0420%" height="15" fill="rgb(212,28,1)" fg:x="75" fg:w="1"/><text x="3.3986%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="3.1486%" y="485" width="0.0420%" height="15" fill="rgb(248,164,17)" fg:x="75" fg:w="1"/><text x="3.3986%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.04%)</title><rect x="3.1486%" y="469" width="0.0420%" height="15" fill="rgb(222,171,42)" fg:x="75" fg:w="1"/><text x="3.3986%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.04%)</title><rect x="3.1486%" y="453" width="0.0420%" height="15" fill="rgb(243,84,45)" fg:x="75" fg:w="1"/><text x="3.3986%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.04%)</title><rect x="3.1486%" y="437" width="0.0420%" height="15" fill="rgb(252,49,23)" fg:x="75" fg:w="1"/><text x="3.3986%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="3.1486%" y="421" width="0.0420%" height="15" fill="rgb(215,19,7)" fg:x="75" fg:w="1"/><text x="3.3986%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="3.1486%" y="405" width="0.0420%" height="15" fill="rgb(238,81,41)" fg:x="75" fg:w="1"/><text x="3.3986%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.04%)</title><rect x="3.1486%" y="389" width="0.0420%" height="15" fill="rgb(210,199,37)" fg:x="75" fg:w="1"/><text x="3.3986%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="3.1486%" y="373" width="0.0420%" height="15" fill="rgb(244,192,49)" fg:x="75" fg:w="1"/><text x="3.3986%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="3.1486%" y="357" width="0.0420%" height="15" fill="rgb(226,211,11)" fg:x="75" fg:w="1"/><text x="3.3986%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="3.1486%" y="341" width="0.0420%" height="15" fill="rgb(236,162,54)" fg:x="75" fg:w="1"/><text x="3.3986%" y="351.50"></text></g><g><title>__rdl_alloc (1 samples, 0.04%)</title><rect x="3.1486%" y="325" width="0.0420%" height="15" fill="rgb(220,229,9)" fg:x="75" fg:w="1"/><text x="3.3986%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.04%)</title><rect x="3.1486%" y="309" width="0.0420%" height="15" fill="rgb(250,87,22)" fg:x="75" fg:w="1"/><text x="3.3986%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.21%)</title><rect x="3.0227%" y="581" width="0.2099%" height="15" fill="rgb(239,43,17)" fg:x="72" fg:w="5"/><text x="3.2727%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.08%)</title><rect x="3.1486%" y="565" width="0.0840%" height="15" fill="rgb(231,177,25)" fg:x="75" fg:w="2"/><text x="3.3986%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.08%)</title><rect x="3.1486%" y="549" width="0.0840%" height="15" fill="rgb(219,179,1)" fg:x="75" fg:w="2"/><text x="3.3986%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.08%)</title><rect x="3.1486%" y="533" width="0.0840%" height="15" fill="rgb(238,219,53)" fg:x="75" fg:w="2"/><text x="3.3986%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="3.1906%" y="517" width="0.0420%" height="15" fill="rgb(232,167,36)" fg:x="76" fg:w="1"/><text x="3.4406%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="3.1906%" y="501" width="0.0420%" height="15" fill="rgb(244,19,51)" fg:x="76" fg:w="1"/><text x="3.4406%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.04%)</title><rect x="3.1906%" y="485" width="0.0420%" height="15" fill="rgb(224,6,22)" fg:x="76" fg:w="1"/><text x="3.4406%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="3.1906%" y="469" width="0.0420%" height="15" fill="rgb(224,145,5)" fg:x="76" fg:w="1"/><text x="3.4406%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="3.1906%" y="453" width="0.0420%" height="15" fill="rgb(234,130,49)" fg:x="76" fg:w="1"/><text x="3.4406%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="3.1906%" y="437" width="0.0420%" height="15" fill="rgb(254,6,2)" fg:x="76" fg:w="1"/><text x="3.4406%" y="447.50"></text></g><g><title>__rdl_alloc (1 samples, 0.04%)</title><rect x="3.1906%" y="421" width="0.0420%" height="15" fill="rgb(208,96,46)" fg:x="76" fg:w="1"/><text x="3.4406%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.04%)</title><rect x="3.1906%" y="405" width="0.0420%" height="15" fill="rgb(239,3,39)" fg:x="76" fg:w="1"/><text x="3.4406%" y="415.50"></text></g><g><title>[libzmq.so.5.2.4] (6 samples, 0.25%)</title><rect x="3.2326%" y="581" width="0.2519%" height="15" fill="rgb(233,210,1)" fg:x="77" fg:w="6"/><text x="3.4826%" y="591.50"></text></g><g><title>__GI___clock_gettime (3 samples, 0.13%)</title><rect x="3.4845%" y="581" width="0.1259%" height="15" fill="rgb(244,137,37)" fg:x="83" fg:w="3"/><text x="3.7345%" y="591.50"></text></g><g><title>__GI___clock_nanosleep (1 samples, 0.04%)</title><rect x="3.6104%" y="581" width="0.0420%" height="15" fill="rgb(240,136,2)" fg:x="86" fg:w="1"/><text x="3.8604%" y="591.50"></text></g><g><title>__GI___libc_free (12 samples, 0.50%)</title><rect x="3.6524%" y="581" width="0.5038%" height="15" fill="rgb(239,18,37)" fg:x="87" fg:w="12"/><text x="3.9024%" y="591.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.04%)</title><rect x="4.1562%" y="581" width="0.0420%" height="15" fill="rgb(218,185,22)" fg:x="99" fg:w="1"/><text x="4.4062%" y="591.50"></text></g><g><title>__GI___nanosleep (5 samples, 0.21%)</title><rect x="4.1982%" y="581" width="0.2099%" height="15" fill="rgb(225,218,4)" fg:x="100" fg:w="5"/><text x="4.4482%" y="591.50"></text></g><g><title>_int_free (4 samples, 0.17%)</title><rect x="4.4081%" y="581" width="0.1679%" height="15" fill="rgb(230,182,32)" fg:x="105" fg:w="4"/><text x="4.6581%" y="591.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="4.7019%" y="565" width="0.0420%" height="15" fill="rgb(242,56,43)" fg:x="112" fg:w="1"/><text x="4.9519%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="4.7019%" y="549" width="0.0420%" height="15" fill="rgb(233,99,24)" fg:x="112" fg:w="1"/><text x="4.9519%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="4.7019%" y="533" width="0.0420%" height="15" fill="rgb(234,209,42)" fg:x="112" fg:w="1"/><text x="4.9519%" y="543.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.04%)</title><rect x="4.7019%" y="517" width="0.0420%" height="15" fill="rgb(227,7,12)" fg:x="112" fg:w="1"/><text x="4.9519%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.04%)</title><rect x="4.7019%" y="501" width="0.0420%" height="15" fill="rgb(245,203,43)" fg:x="112" fg:w="1"/><text x="4.9519%" y="511.50"></text></g><g><title>[[heap]] (42 samples, 1.76%)</title><rect x="3.0227%" y="597" width="1.7632%" height="15" fill="rgb(238,205,33)" fg:x="72" fg:w="42"/><text x="3.2727%" y="607.50"></text></g><g><title>colmet_node::backends::BackendsManager::make_measure (5 samples, 0.21%)</title><rect x="4.5760%" y="581" width="0.2099%" height="15" fill="rgb(231,56,7)" fg:x="109" fg:w="5"/><text x="4.8260%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,std::collections::hash::map::HashMap&lt;i32,alloc::vec::Vec&lt;colmet_node::backends::metric::Metric&gt;&gt;&gt;&gt; (1 samples, 0.04%)</title><rect x="4.7439%" y="565" width="0.0420%" height="15" fill="rgb(244,186,29)" fg:x="113" fg:w="1"/><text x="4.9939%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,std::collections::hash::map::HashMap&lt;i32,alloc::vec::Vec&lt;colmet_node::backends::metric::Metric&gt;&gt;,std::collections::hash::map::RandomState&gt;&gt; (1 samples, 0.04%)</title><rect x="4.7439%" y="549" width="0.0420%" height="15" fill="rgb(234,111,31)" fg:x="113" fg:w="1"/><text x="4.9939%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,std::collections::hash::map::HashMap&lt;i32,alloc::vec::Vec&lt;colmet_node::backends::metric::Metric&gt;&gt;)&gt;&gt; (1 samples, 0.04%)</title><rect x="4.7439%" y="533" width="0.0420%" height="15" fill="rgb(241,149,10)" fg:x="113" fg:w="1"/><text x="4.9939%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.04%)</title><rect x="4.7859%" y="581" width="0.0420%" height="15" fill="rgb(249,206,44)" fg:x="114" fg:w="1"/><text x="5.0359%" y="591.50"></text></g><g><title>[libzmq.so.5.2.4] (39 samples, 1.64%)</title><rect x="4.8279%" y="581" width="1.6373%" height="15" fill="rgb(251,153,30)" fg:x="115" fg:w="39"/><text x="5.0779%" y="591.50"></text></g><g><title>[libzmq.so.5.2.4] (37 samples, 1.55%)</title><rect x="4.9118%" y="565" width="1.5533%" height="15" fill="rgb(239,152,38)" fg:x="117" fg:w="37"/><text x="5.1618%" y="575.50"></text></g><g><title>[libzmq.so.5.2.4] (37 samples, 1.55%)</title><rect x="4.9118%" y="549" width="1.5533%" height="15" fill="rgb(249,139,47)" fg:x="117" fg:w="37"/><text x="5.1618%" y="559.50"></text></g><g><title>[libzmq.so.5.2.4] (37 samples, 1.55%)</title><rect x="4.9118%" y="533" width="1.5533%" height="15" fill="rgb(244,64,35)" fg:x="117" fg:w="37"/><text x="5.1618%" y="543.50"></text></g><g><title>__GI___poll (37 samples, 1.55%)</title><rect x="4.9118%" y="517" width="1.5533%" height="15" fill="rgb(216,46,15)" fg:x="117" fg:w="37"/><text x="5.1618%" y="527.50"></text></g><g><title>entry_SYSCALL_64 (37 samples, 1.55%)</title><rect x="4.9118%" y="501" width="1.5533%" height="15" fill="rgb(250,74,19)" fg:x="117" fg:w="37"/><text x="5.1618%" y="511.50"></text></g><g><title>__GI___libc_free (1 samples, 0.04%)</title><rect x="6.4652%" y="581" width="0.0420%" height="15" fill="rgb(249,42,33)" fg:x="154" fg:w="1"/><text x="6.7152%" y="591.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.04%)</title><rect x="6.5071%" y="581" width="0.0420%" height="15" fill="rgb(242,149,17)" fg:x="155" fg:w="1"/><text x="6.7571%" y="591.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (9 samples, 0.38%)</title><rect x="6.5491%" y="581" width="0.3778%" height="15" fill="rgb(244,29,21)" fg:x="156" fg:w="9"/><text x="6.7991%" y="591.50"></text></g><g><title>[[stack]] (66 samples, 2.77%)</title><rect x="4.7859%" y="597" width="2.7708%" height="15" fill="rgb(220,130,37)" fg:x="114" fg:w="66"/><text x="5.0359%" y="607.50">[[..</text></g><g><title>zmq::Error::from_raw (15 samples, 0.63%)</title><rect x="6.9270%" y="581" width="0.6297%" height="15" fill="rgb(211,67,2)" fg:x="165" fg:w="15"/><text x="7.1770%" y="591.50"></text></g><g><title>[libzmq.so.5.2.4] (5 samples, 0.21%)</title><rect x="7.5567%" y="597" width="0.2099%" height="15" fill="rgb(235,68,52)" fg:x="180" fg:w="5"/><text x="7.8067%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.21%)</title><rect x="7.7666%" y="581" width="0.2099%" height="15" fill="rgb(246,142,3)" fg:x="185" fg:w="5"/><text x="8.0166%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::is_empty_singleton (5 samples, 0.21%)</title><rect x="7.7666%" y="565" width="0.2099%" height="15" fill="rgb(241,25,7)" fg:x="185" fg:w="5"/><text x="8.0166%" y="575.50"></text></g><g><title>[libzmq.so.5.2.4] (15 samples, 0.63%)</title><rect x="7.9765%" y="581" width="0.6297%" height="15" fill="rgb(242,119,39)" fg:x="190" fg:w="15"/><text x="8.2265%" y="591.50"></text></g><g><title>__GI___clock_gettime (6 samples, 0.25%)</title><rect x="8.6062%" y="581" width="0.2519%" height="15" fill="rgb(241,98,45)" fg:x="205" fg:w="6"/><text x="8.8562%" y="591.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="8.9001%" y="565" width="0.0420%" height="15" fill="rgb(254,28,30)" fg:x="212" fg:w="1"/><text x="9.1501%" y="575.50"></text></g><g><title>__GI___clock_nanosleep (42 samples, 1.76%)</title><rect x="8.8581%" y="581" width="1.7632%" height="15" fill="rgb(241,142,54)" fg:x="211" fg:w="42"/><text x="9.1081%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (40 samples, 1.68%)</title><rect x="8.9421%" y="565" width="1.6793%" height="15" fill="rgb(222,85,15)" fg:x="213" fg:w="40"/><text x="9.1921%" y="575.50"></text></g><g><title>__GI___libc_free (1 samples, 0.04%)</title><rect x="10.6213%" y="581" width="0.0420%" height="15" fill="rgb(210,85,47)" fg:x="253" fg:w="1"/><text x="10.8713%" y="591.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.13%)</title><rect x="10.6633%" y="581" width="0.1259%" height="15" fill="rgb(224,206,25)" fg:x="254" fg:w="3"/><text x="10.9133%" y="591.50"></text></g><g><title>__GI___poll (1 samples, 0.04%)</title><rect x="10.7893%" y="581" width="0.0420%" height="15" fill="rgb(243,201,19)" fg:x="257" fg:w="1"/><text x="11.0393%" y="591.50"></text></g><g><title>__vdso_clock_gettime (7 samples, 0.29%)</title><rect x="10.8312%" y="581" width="0.2939%" height="15" fill="rgb(236,59,4)" fg:x="258" fg:w="7"/><text x="11.0812%" y="591.50"></text></g><g><title>_init (1 samples, 0.04%)</title><rect x="11.1251%" y="581" width="0.0420%" height="15" fill="rgb(254,179,45)" fg:x="265" fg:w="1"/><text x="11.3751%" y="591.50"></text></g><g><title>colmet_node::backends::BackendsManager::make_measure (1 samples, 0.04%)</title><rect x="11.1671%" y="581" width="0.0420%" height="15" fill="rgb(226,14,10)" fg:x="266" fg:w="1"/><text x="11.4171%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (49 samples, 2.06%)</title><rect x="12.4685%" y="485" width="2.0571%" height="15" fill="rgb(244,27,41)" fg:x="297" fg:w="49"/><text x="12.7185%" y="495.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (49 samples, 2.06%)</title><rect x="12.4685%" y="469" width="2.0571%" height="15" fill="rgb(235,35,32)" fg:x="297" fg:w="49"/><text x="12.7185%" y="479.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (49 samples, 2.06%)</title><rect x="12.4685%" y="453" width="2.0571%" height="15" fill="rgb(218,68,31)" fg:x="297" fg:w="49"/><text x="12.7185%" y="463.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (49 samples, 2.06%)</title><rect x="12.4685%" y="437" width="2.0571%" height="15" fill="rgb(207,120,37)" fg:x="297" fg:w="49"/><text x="12.7185%" y="447.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (49 samples, 2.06%)</title><rect x="12.4685%" y="421" width="2.0571%" height="15" fill="rgb(227,98,0)" fg:x="297" fg:w="49"/><text x="12.7185%" y="431.50">a..</text></g><g><title>alloc::alloc::alloc (49 samples, 2.06%)</title><rect x="12.4685%" y="405" width="2.0571%" height="15" fill="rgb(207,7,3)" fg:x="297" fg:w="49"/><text x="12.7185%" y="415.50">a..</text></g><g><title>__rdl_alloc (49 samples, 2.06%)</title><rect x="12.4685%" y="389" width="2.0571%" height="15" fill="rgb(206,98,19)" fg:x="297" fg:w="49"/><text x="12.7185%" y="399.50">_..</text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (49 samples, 2.06%)</title><rect x="12.4685%" y="373" width="2.0571%" height="15" fill="rgb(217,5,26)" fg:x="297" fg:w="49"/><text x="12.7185%" y="383.50">s..</text></g><g><title>__GI___libc_malloc (48 samples, 2.02%)</title><rect x="12.5105%" y="357" width="2.0151%" height="15" fill="rgb(235,190,38)" fg:x="298" fg:w="48"/><text x="12.7605%" y="367.50">_..</text></g><g><title>tcache_get (16 samples, 0.67%)</title><rect x="13.8539%" y="341" width="0.6717%" height="15" fill="rgb(247,86,24)" fg:x="330" fg:w="16"/><text x="14.1039%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (58 samples, 2.43%)</title><rect x="12.4265%" y="565" width="2.4349%" height="15" fill="rgb(205,101,16)" fg:x="296" fg:w="58"/><text x="12.6765%" y="575.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (57 samples, 2.39%)</title><rect x="12.4685%" y="549" width="2.3929%" height="15" fill="rgb(246,168,33)" fg:x="297" fg:w="57"/><text x="12.7185%" y="559.50">&lt;a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (57 samples, 2.39%)</title><rect x="12.4685%" y="533" width="2.3929%" height="15" fill="rgb(231,114,1)" fg:x="297" fg:w="57"/><text x="12.7185%" y="543.50">al..</text></g><g><title>alloc::slice::hack::to_vec (57 samples, 2.39%)</title><rect x="12.4685%" y="517" width="2.3929%" height="15" fill="rgb(207,184,53)" fg:x="297" fg:w="57"/><text x="12.7185%" y="527.50">al..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (57 samples, 2.39%)</title><rect x="12.4685%" y="501" width="2.3929%" height="15" fill="rgb(224,95,51)" fg:x="297" fg:w="57"/><text x="12.7185%" y="511.50">&lt;T..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (8 samples, 0.34%)</title><rect x="14.5256%" y="485" width="0.3359%" height="15" fill="rgb(212,188,45)" fg:x="346" fg:w="8"/><text x="14.7756%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.34%)</title><rect x="14.5256%" y="469" width="0.3359%" height="15" fill="rgb(223,154,38)" fg:x="346" fg:w="8"/><text x="14.7756%" y="479.50"></text></g><g><title>__memmove_avx_unaligned_erms (8 samples, 0.34%)</title><rect x="14.5256%" y="453" width="0.3359%" height="15" fill="rgb(251,22,52)" fg:x="346" fg:w="8"/><text x="14.7756%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.13%)</title><rect x="14.9034%" y="549" width="0.1259%" height="15" fill="rgb(229,209,22)" fg:x="355" fg:w="3"/><text x="15.1534%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (10 samples, 0.42%)</title><rect x="15.0294%" y="453" width="0.4198%" height="15" fill="rgb(234,138,34)" fg:x="358" fg:w="10"/><text x="15.2794%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10 samples, 0.42%)</title><rect x="15.0294%" y="437" width="0.4198%" height="15" fill="rgb(212,95,11)" fg:x="358" fg:w="10"/><text x="15.2794%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 0.42%)</title><rect x="15.0294%" y="421" width="0.4198%" height="15" fill="rgb(240,179,47)" fg:x="358" fg:w="10"/><text x="15.2794%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.38%)</title><rect x="15.0714%" y="405" width="0.3778%" height="15" fill="rgb(240,163,11)" fg:x="359" fg:w="9"/><text x="15.3214%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.38%)</title><rect x="15.0714%" y="389" width="0.3778%" height="15" fill="rgb(236,37,12)" fg:x="359" fg:w="9"/><text x="15.3214%" y="399.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.38%)</title><rect x="15.0714%" y="373" width="0.3778%" height="15" fill="rgb(232,164,16)" fg:x="359" fg:w="9"/><text x="15.3214%" y="383.50"></text></g><g><title>__rdl_alloc (9 samples, 0.38%)</title><rect x="15.0714%" y="357" width="0.3778%" height="15" fill="rgb(244,205,15)" fg:x="359" fg:w="9"/><text x="15.3214%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (9 samples, 0.38%)</title><rect x="15.0714%" y="341" width="0.3778%" height="15" fill="rgb(223,117,47)" fg:x="359" fg:w="9"/><text x="15.3214%" y="351.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.34%)</title><rect x="15.1134%" y="325" width="0.3359%" height="15" fill="rgb(244,107,35)" fg:x="360" fg:w="8"/><text x="15.3634%" y="335.50"></text></g><g><title>tcache_get (1 samples, 0.04%)</title><rect x="15.4072%" y="309" width="0.0420%" height="15" fill="rgb(205,140,8)" fg:x="367" fg:w="1"/><text x="15.6572%" y="319.50"></text></g><g><title>&lt;colmet_node::backends::metric::Metric as core::clone::Clone&gt;::clone (14 samples, 0.59%)</title><rect x="15.0294%" y="549" width="0.5877%" height="15" fill="rgb(228,84,46)" fg:x="358" fg:w="14"/><text x="15.2794%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (14 samples, 0.59%)</title><rect x="15.0294%" y="533" width="0.5877%" height="15" fill="rgb(254,188,9)" fg:x="358" fg:w="14"/><text x="15.2794%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (14 samples, 0.59%)</title><rect x="15.0294%" y="517" width="0.5877%" height="15" fill="rgb(206,112,54)" fg:x="358" fg:w="14"/><text x="15.2794%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (14 samples, 0.59%)</title><rect x="15.0294%" y="501" width="0.5877%" height="15" fill="rgb(216,84,49)" fg:x="358" fg:w="14"/><text x="15.2794%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (14 samples, 0.59%)</title><rect x="15.0294%" y="485" width="0.5877%" height="15" fill="rgb(214,194,35)" fg:x="358" fg:w="14"/><text x="15.2794%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (14 samples, 0.59%)</title><rect x="15.0294%" y="469" width="0.5877%" height="15" fill="rgb(249,28,3)" fg:x="358" fg:w="14"/><text x="15.2794%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4 samples, 0.17%)</title><rect x="15.4492%" y="453" width="0.1679%" height="15" fill="rgb(222,56,52)" fg:x="368" fg:w="4"/><text x="15.6992%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.17%)</title><rect x="15.4492%" y="437" width="0.1679%" height="15" fill="rgb(245,217,50)" fg:x="368" fg:w="4"/><text x="15.6992%" y="447.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.13%)</title><rect x="15.4912%" y="421" width="0.1259%" height="15" fill="rgb(213,201,24)" fg:x="369" fg:w="3"/><text x="15.7412%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.13%)</title><rect x="15.7431%" y="501" width="0.1259%" height="15" fill="rgb(248,116,28)" fg:x="375" fg:w="3"/><text x="15.9931%" y="511.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (3 samples, 0.13%)</title><rect x="15.7431%" y="485" width="0.1259%" height="15" fill="rgb(219,72,43)" fg:x="375" fg:w="3"/><text x="15.9931%" y="495.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (3 samples, 0.13%)</title><rect x="15.7431%" y="469" width="0.1259%" height="15" fill="rgb(209,138,14)" fg:x="375" fg:w="3"/><text x="15.9931%" y="479.50"></text></g><g><title>colmet_node::backends::BackendsManager::sort_waiting_metrics (7 samples, 0.29%)</title><rect x="15.6171%" y="549" width="0.2939%" height="15" fill="rgb(222,18,33)" fg:x="372" fg:w="7"/><text x="15.8671%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key (5 samples, 0.21%)</title><rect x="15.7011%" y="533" width="0.2099%" height="15" fill="rgb(213,199,7)" fg:x="374" fg:w="5"/><text x="15.9511%" y="543.50"></text></g><g><title>alloc::slice::merge_sort (5 samples, 0.21%)</title><rect x="15.7011%" y="517" width="0.2099%" height="15" fill="rgb(250,110,10)" fg:x="374" fg:w="5"/><text x="15.9511%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.04%)</title><rect x="15.8690%" y="501" width="0.0420%" height="15" fill="rgb(248,123,6)" fg:x="378" fg:w="1"/><text x="16.1190%" y="511.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="15.8690%" y="485" width="0.0420%" height="15" fill="rgb(206,91,31)" fg:x="378" fg:w="1"/><text x="16.1190%" y="495.50"></text></g><g><title>__GI___libc_free (3 samples, 0.13%)</title><rect x="15.9530%" y="405" width="0.1259%" height="15" fill="rgb(211,154,13)" fg:x="380" fg:w="3"/><text x="16.2030%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;colmet_node::backends::metric::Metric&gt; (8 samples, 0.34%)</title><rect x="15.9110%" y="549" width="0.3359%" height="15" fill="rgb(225,148,7)" fg:x="379" fg:w="8"/><text x="16.1610%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (8 samples, 0.34%)</title><rect x="15.9110%" y="533" width="0.3359%" height="15" fill="rgb(220,160,43)" fg:x="379" fg:w="8"/><text x="16.1610%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (8 samples, 0.34%)</title><rect x="15.9110%" y="517" width="0.3359%" height="15" fill="rgb(213,52,39)" fg:x="379" fg:w="8"/><text x="16.1610%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (8 samples, 0.34%)</title><rect x="15.9110%" y="501" width="0.3359%" height="15" fill="rgb(243,137,7)" fg:x="379" fg:w="8"/><text x="16.1610%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.34%)</title><rect x="15.9110%" y="485" width="0.3359%" height="15" fill="rgb(230,79,13)" fg:x="379" fg:w="8"/><text x="16.1610%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 0.34%)</title><rect x="15.9110%" y="469" width="0.3359%" height="15" fill="rgb(247,105,23)" fg:x="379" fg:w="8"/><text x="16.1610%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.34%)</title><rect x="15.9110%" y="453" width="0.3359%" height="15" fill="rgb(223,179,41)" fg:x="379" fg:w="8"/><text x="16.1610%" y="463.50"></text></g><g><title>__rdl_dealloc (8 samples, 0.34%)</title><rect x="15.9110%" y="437" width="0.3359%" height="15" fill="rgb(218,9,34)" fg:x="379" fg:w="8"/><text x="16.1610%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (8 samples, 0.34%)</title><rect x="15.9110%" y="421" width="0.3359%" height="15" fill="rgb(222,106,8)" fg:x="379" fg:w="8"/><text x="16.1610%" y="431.50"></text></g><g><title>_int_free (4 samples, 0.17%)</title><rect x="16.0789%" y="405" width="0.1679%" height="15" fill="rgb(211,220,0)" fg:x="383" fg:w="4"/><text x="16.3289%" y="415.50"></text></g><g><title>colmet_node::backends::BackendsManager::get_sleep_time (34 samples, 1.43%)</title><rect x="14.8615%" y="565" width="1.4274%" height="15" fill="rgb(229,52,16)" fg:x="354" fg:w="34"/><text x="15.1115%" y="575.50"></text></g><g><title>log::max_level (1 samples, 0.04%)</title><rect x="16.2469%" y="549" width="0.0420%" height="15" fill="rgb(212,155,18)" fg:x="387" fg:w="1"/><text x="16.4969%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.04%)</title><rect x="16.2469%" y="533" width="0.0420%" height="15" fill="rgb(242,21,14)" fg:x="387" fg:w="1"/><text x="16.4969%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.04%)</title><rect x="16.2469%" y="517" width="0.0420%" height="15" fill="rgb(222,19,48)" fg:x="387" fg:w="1"/><text x="16.4969%" y="527.50"></text></g><g><title>__GI___libc_free (6 samples, 0.25%)</title><rect x="16.7086%" y="469" width="0.2519%" height="15" fill="rgb(232,45,27)" fg:x="398" fg:w="6"/><text x="16.9586%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.38%)</title><rect x="16.7086%" y="533" width="0.3778%" height="15" fill="rgb(249,103,42)" fg:x="398" fg:w="9"/><text x="16.9586%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.38%)</title><rect x="16.7086%" y="517" width="0.3778%" height="15" fill="rgb(246,81,33)" fg:x="398" fg:w="9"/><text x="16.9586%" y="527.50"></text></g><g><title>__rdl_dealloc (9 samples, 0.38%)</title><rect x="16.7086%" y="501" width="0.3778%" height="15" fill="rgb(252,33,42)" fg:x="398" fg:w="9"/><text x="16.9586%" y="511.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (9 samples, 0.38%)</title><rect x="16.7086%" y="485" width="0.3778%" height="15" fill="rgb(209,212,41)" fg:x="398" fg:w="9"/><text x="16.9586%" y="495.50"></text></g><g><title>_int_free (3 samples, 0.13%)</title><rect x="16.9605%" y="469" width="0.1259%" height="15" fill="rgb(207,154,6)" fg:x="404" fg:w="3"/><text x="17.2105%" y="479.50"></text></g><g><title>tcache_put (2 samples, 0.08%)</title><rect x="17.0025%" y="453" width="0.0840%" height="15" fill="rgb(223,64,47)" fg:x="405" fg:w="2"/><text x="17.2525%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.55%)</title><rect x="16.6247%" y="549" width="0.5458%" height="15" fill="rgb(211,161,38)" fg:x="396" fg:w="13"/><text x="16.8747%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.08%)</title><rect x="17.0865%" y="533" width="0.0840%" height="15" fill="rgb(219,138,40)" fg:x="407" fg:w="2"/><text x="17.3365%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (12 samples, 0.50%)</title><rect x="17.3384%" y="389" width="0.5038%" height="15" fill="rgb(241,228,46)" fg:x="413" fg:w="12"/><text x="17.5884%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (12 samples, 0.50%)</title><rect x="17.3384%" y="373" width="0.5038%" height="15" fill="rgb(223,209,38)" fg:x="413" fg:w="12"/><text x="17.5884%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (12 samples, 0.50%)</title><rect x="17.3384%" y="357" width="0.5038%" height="15" fill="rgb(236,164,45)" fg:x="413" fg:w="12"/><text x="17.5884%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.50%)</title><rect x="17.3384%" y="341" width="0.5038%" height="15" fill="rgb(231,15,5)" fg:x="413" fg:w="12"/><text x="17.5884%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.50%)</title><rect x="17.3384%" y="325" width="0.5038%" height="15" fill="rgb(252,35,15)" fg:x="413" fg:w="12"/><text x="17.5884%" y="335.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.46%)</title><rect x="17.3804%" y="309" width="0.4618%" height="15" fill="rgb(248,181,18)" fg:x="414" fg:w="11"/><text x="17.6304%" y="319.50"></text></g><g><title>__rdl_alloc (11 samples, 0.46%)</title><rect x="17.3804%" y="293" width="0.4618%" height="15" fill="rgb(233,39,42)" fg:x="414" fg:w="11"/><text x="17.6304%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (11 samples, 0.46%)</title><rect x="17.3804%" y="277" width="0.4618%" height="15" fill="rgb(238,110,33)" fg:x="414" fg:w="11"/><text x="17.6304%" y="287.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.46%)</title><rect x="17.3804%" y="261" width="0.4618%" height="15" fill="rgb(233,195,10)" fg:x="414" fg:w="11"/><text x="17.6304%" y="271.50"></text></g><g><title>tcache_get (8 samples, 0.34%)</title><rect x="17.5063%" y="245" width="0.3359%" height="15" fill="rgb(254,105,3)" fg:x="417" fg:w="8"/><text x="17.7563%" y="255.50"></text></g><g><title>&lt;colmet_node::backends::metric::Metric as core::clone::Clone&gt;::clone (29 samples, 1.22%)</title><rect x="17.1704%" y="485" width="1.2175%" height="15" fill="rgb(221,225,9)" fg:x="409" fg:w="29"/><text x="17.4204%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (27 samples, 1.13%)</title><rect x="17.2544%" y="469" width="1.1335%" height="15" fill="rgb(224,227,45)" fg:x="411" fg:w="27"/><text x="17.5044%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (25 samples, 1.05%)</title><rect x="17.3384%" y="453" width="1.0495%" height="15" fill="rgb(229,198,43)" fg:x="413" fg:w="25"/><text x="17.5884%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (25 samples, 1.05%)</title><rect x="17.3384%" y="437" width="1.0495%" height="15" fill="rgb(206,209,35)" fg:x="413" fg:w="25"/><text x="17.5884%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (25 samples, 1.05%)</title><rect x="17.3384%" y="421" width="1.0495%" height="15" fill="rgb(245,195,53)" fg:x="413" fg:w="25"/><text x="17.5884%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (25 samples, 1.05%)</title><rect x="17.3384%" y="405" width="1.0495%" height="15" fill="rgb(240,92,26)" fg:x="413" fg:w="25"/><text x="17.5884%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (13 samples, 0.55%)</title><rect x="17.8421%" y="389" width="0.5458%" height="15" fill="rgb(207,40,23)" fg:x="425" fg:w="13"/><text x="18.0921%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.55%)</title><rect x="17.8421%" y="373" width="0.5458%" height="15" fill="rgb(223,111,35)" fg:x="425" fg:w="13"/><text x="18.0921%" y="383.50"></text></g><g><title>__memmove_avx_unaligned_erms (13 samples, 0.55%)</title><rect x="17.8421%" y="357" width="0.5458%" height="15" fill="rgb(229,147,28)" fg:x="425" fg:w="13"/><text x="18.0921%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (38 samples, 1.60%)</title><rect x="17.1704%" y="549" width="1.5953%" height="15" fill="rgb(211,29,28)" fg:x="409" fg:w="38"/><text x="17.4204%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (38 samples, 1.60%)</title><rect x="17.1704%" y="533" width="1.5953%" height="15" fill="rgb(228,72,33)" fg:x="409" fg:w="38"/><text x="17.4204%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (38 samples, 1.60%)</title><rect x="17.1704%" y="517" width="1.5953%" height="15" fill="rgb(205,214,31)" fg:x="409" fg:w="38"/><text x="17.4204%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (38 samples, 1.60%)</title><rect x="17.1704%" y="501" width="1.5953%" height="15" fill="rgb(224,111,15)" fg:x="409" fg:w="38"/><text x="17.4204%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9 samples, 0.38%)</title><rect x="18.3879%" y="485" width="0.3778%" height="15" fill="rgb(253,21,26)" fg:x="438" fg:w="9"/><text x="18.6379%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.38%)</title><rect x="18.3879%" y="469" width="0.3778%" height="15" fill="rgb(245,139,43)" fg:x="438" fg:w="9"/><text x="18.6379%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.38%)</title><rect x="18.3879%" y="453" width="0.3778%" height="15" fill="rgb(252,170,7)" fg:x="438" fg:w="9"/><text x="18.6379%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.34%)</title><rect x="18.4299%" y="437" width="0.3359%" height="15" fill="rgb(231,118,14)" fg:x="439" fg:w="8"/><text x="18.6799%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.34%)</title><rect x="18.4299%" y="421" width="0.3359%" height="15" fill="rgb(238,83,0)" fg:x="439" fg:w="8"/><text x="18.6799%" y="431.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.34%)</title><rect x="18.4299%" y="405" width="0.3359%" height="15" fill="rgb(221,39,39)" fg:x="439" fg:w="8"/><text x="18.6799%" y="415.50"></text></g><g><title>__rdl_alloc (8 samples, 0.34%)</title><rect x="18.4299%" y="389" width="0.3359%" height="15" fill="rgb(222,119,46)" fg:x="439" fg:w="8"/><text x="18.6799%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8 samples, 0.34%)</title><rect x="18.4299%" y="373" width="0.3359%" height="15" fill="rgb(222,165,49)" fg:x="439" fg:w="8"/><text x="18.6799%" y="383.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.34%)</title><rect x="18.4299%" y="357" width="0.3359%" height="15" fill="rgb(219,113,52)" fg:x="439" fg:w="8"/><text x="18.6799%" y="367.50"></text></g><g><title>tcache_get (6 samples, 0.25%)</title><rect x="18.5139%" y="341" width="0.2519%" height="15" fill="rgb(214,7,15)" fg:x="441" fg:w="6"/><text x="18.7639%" y="351.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.08%)</title><rect x="18.7657%" y="549" width="0.0840%" height="15" fill="rgb(235,32,4)" fg:x="447" fg:w="2"/><text x="19.0157%" y="559.50"></text></g><g><title>core::ptr::read (2 samples, 0.08%)</title><rect x="18.7657%" y="533" width="0.0840%" height="15" fill="rgb(238,90,54)" fg:x="447" fg:w="2"/><text x="19.0157%" y="543.50"></text></g><g><title>&lt;colmet_node::backends::METRICS_VERSION as core::ops::deref::Deref&gt;::deref (4 samples, 0.17%)</title><rect x="18.8497%" y="549" width="0.1679%" height="15" fill="rgb(213,208,19)" fg:x="449" fg:w="4"/><text x="19.0997%" y="559.50"></text></g><g><title>&lt;colmet_node::backends::METRICS_VERSION as core::ops::deref::Deref&gt;::deref::__stability (4 samples, 0.17%)</title><rect x="18.8497%" y="533" width="0.1679%" height="15" fill="rgb(233,156,4)" fg:x="449" fg:w="4"/><text x="19.0997%" y="543.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (4 samples, 0.17%)</title><rect x="18.8497%" y="517" width="0.1679%" height="15" fill="rgb(207,194,5)" fg:x="449" fg:w="4"/><text x="19.0997%" y="527.50"></text></g><g><title>&lt;colmet_node::backends::cpu::CpuBackend as colmet_node::backends::Backend&gt;::return_values (1 samples, 0.04%)</title><rect x="19.0176%" y="549" width="0.0420%" height="15" fill="rgb(206,111,30)" fg:x="453" fg:w="1"/><text x="19.2676%" y="559.50"></text></g><g><title>colmet_node::backends::cpu::get_metric_values (1 samples, 0.04%)</title><rect x="19.0176%" y="533" width="0.0420%" height="15" fill="rgb(243,70,54)" fg:x="453" fg:w="1"/><text x="19.2676%" y="543.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_string (1 samples, 0.04%)</title><rect x="19.0176%" y="517" width="0.0420%" height="15" fill="rgb(242,28,8)" fg:x="453" fg:w="1"/><text x="19.2676%" y="527.50"></text></g><g><title>std::io::default_read_to_string (1 samples, 0.04%)</title><rect x="19.0176%" y="501" width="0.0420%" height="15" fill="rgb(219,106,18)" fg:x="453" fg:w="1"/><text x="19.2676%" y="511.50"></text></g><g><title>std::io::append_to_string (1 samples, 0.04%)</title><rect x="19.0176%" y="485" width="0.0420%" height="15" fill="rgb(244,222,10)" fg:x="453" fg:w="1"/><text x="19.2676%" y="495.50"></text></g><g><title>std::io::default_read_to_string::{{closure}} (1 samples, 0.04%)</title><rect x="19.0176%" y="469" width="0.0420%" height="15" fill="rgb(236,179,52)" fg:x="453" fg:w="1"/><text x="19.2676%" y="479.50"></text></g><g><title>std::io::default_read_to_end (1 samples, 0.04%)</title><rect x="19.0176%" y="453" width="0.0420%" height="15" fill="rgb(213,23,39)" fg:x="453" fg:w="1"/><text x="19.2676%" y="463.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (1 samples, 0.04%)</title><rect x="19.0176%" y="437" width="0.0420%" height="15" fill="rgb(238,48,10)" fg:x="453" fg:w="1"/><text x="19.2676%" y="447.50"></text></g><g><title>std::sys::unix::fs::File::read_buf (1 samples, 0.04%)</title><rect x="19.0176%" y="421" width="0.0420%" height="15" fill="rgb(251,196,23)" fg:x="453" fg:w="1"/><text x="19.2676%" y="431.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (1 samples, 0.04%)</title><rect x="19.0176%" y="405" width="0.0420%" height="15" fill="rgb(250,152,24)" fg:x="453" fg:w="1"/><text x="19.2676%" y="415.50"></text></g><g><title>__libc_read (1 samples, 0.04%)</title><rect x="19.0176%" y="389" width="0.0420%" height="15" fill="rgb(209,150,17)" fg:x="453" fg:w="1"/><text x="19.2676%" y="399.50"></text></g><g><title>__libc_read (1 samples, 0.04%)</title><rect x="19.0176%" y="373" width="0.0420%" height="15" fill="rgb(234,202,34)" fg:x="453" fg:w="1"/><text x="19.2676%" y="383.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="19.0176%" y="357" width="0.0420%" height="15" fill="rgb(253,148,53)" fg:x="453" fg:w="1"/><text x="19.2676%" y="367.50"></text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.04%)</title><rect x="19.0176%" y="341" width="0.0420%" height="15" fill="rgb(218,129,16)" fg:x="453" fg:w="1"/><text x="19.2676%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.04%)</title><rect x="19.0596%" y="357" width="0.0420%" height="15" fill="rgb(216,85,19)" fg:x="454" fg:w="1"/><text x="19.3096%" y="367.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.04%)</title><rect x="19.0596%" y="341" width="0.0420%" height="15" fill="rgb(235,228,7)" fg:x="454" fg:w="1"/><text x="19.3096%" y="351.50"></text></g><g><title>_int_realloc (1 samples, 0.04%)</title><rect x="19.0596%" y="325" width="0.0420%" height="15" fill="rgb(245,175,0)" fg:x="454" fg:w="1"/><text x="19.3096%" y="335.50"></text></g><g><title>_int_malloc (1 samples, 0.04%)</title><rect x="19.0596%" y="309" width="0.0420%" height="15" fill="rgb(208,168,36)" fg:x="454" fg:w="1"/><text x="19.3096%" y="319.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.04%)</title><rect x="19.0596%" y="293" width="0.0420%" height="15" fill="rgb(246,171,24)" fg:x="454" fg:w="1"/><text x="19.3096%" y="303.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.08%)</title><rect x="19.1016%" y="357" width="0.0840%" height="15" fill="rgb(215,142,24)" fg:x="455" fg:w="2"/><text x="19.3516%" y="367.50"></text></g><g><title>do_syscall_64 (2 samples, 0.08%)</title><rect x="19.1016%" y="341" width="0.0840%" height="15" fill="rgb(250,187,7)" fg:x="455" fg:w="2"/><text x="19.3516%" y="351.50"></text></g><g><title>ksys_read (2 samples, 0.08%)</title><rect x="19.1016%" y="325" width="0.0840%" height="15" fill="rgb(228,66,33)" fg:x="455" fg:w="2"/><text x="19.3516%" y="335.50"></text></g><g><title>vfs_read (2 samples, 0.08%)</title><rect x="19.1016%" y="309" width="0.0840%" height="15" fill="rgb(234,215,21)" fg:x="455" fg:w="2"/><text x="19.3516%" y="319.50"></text></g><g><title>new_sync_read (2 samples, 0.08%)</title><rect x="19.1016%" y="293" width="0.0840%" height="15" fill="rgb(222,191,20)" fg:x="455" fg:w="2"/><text x="19.3516%" y="303.50"></text></g><g><title>seq_read_iter (2 samples, 0.08%)</title><rect x="19.1016%" y="277" width="0.0840%" height="15" fill="rgb(245,79,54)" fg:x="455" fg:w="2"/><text x="19.3516%" y="287.50"></text></g><g><title>memcg_stat_show (2 samples, 0.08%)</title><rect x="19.1016%" y="261" width="0.0840%" height="15" fill="rgb(240,10,37)" fg:x="455" fg:w="2"/><text x="19.3516%" y="271.50"></text></g><g><title>cpumask_next (1 samples, 0.04%)</title><rect x="19.1436%" y="245" width="0.0420%" height="15" fill="rgb(214,192,32)" fg:x="456" fg:w="1"/><text x="19.3936%" y="255.50"></text></g><g><title>_find_next_bit.constprop.0 (1 samples, 0.04%)</title><rect x="19.1436%" y="229" width="0.0420%" height="15" fill="rgb(209,36,54)" fg:x="456" fg:w="1"/><text x="19.3936%" y="239.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_string (4 samples, 0.17%)</title><rect x="19.0596%" y="517" width="0.1679%" height="15" fill="rgb(220,10,11)" fg:x="454" fg:w="4"/><text x="19.3096%" y="527.50"></text></g><g><title>std::io::default_read_to_string (4 samples, 0.17%)</title><rect x="19.0596%" y="501" width="0.1679%" height="15" fill="rgb(221,106,17)" fg:x="454" fg:w="4"/><text x="19.3096%" y="511.50"></text></g><g><title>std::io::append_to_string (4 samples, 0.17%)</title><rect x="19.0596%" y="485" width="0.1679%" height="15" fill="rgb(251,142,44)" fg:x="454" fg:w="4"/><text x="19.3096%" y="495.50"></text></g><g><title>std::io::default_read_to_string::{{closure}} (4 samples, 0.17%)</title><rect x="19.0596%" y="469" width="0.1679%" height="15" fill="rgb(238,13,15)" fg:x="454" fg:w="4"/><text x="19.3096%" y="479.50"></text></g><g><title>std::io::default_read_to_end (4 samples, 0.17%)</title><rect x="19.0596%" y="453" width="0.1679%" height="15" fill="rgb(208,107,27)" fg:x="454" fg:w="4"/><text x="19.3096%" y="463.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (4 samples, 0.17%)</title><rect x="19.0596%" y="437" width="0.1679%" height="15" fill="rgb(205,136,37)" fg:x="454" fg:w="4"/><text x="19.3096%" y="447.50"></text></g><g><title>std::sys::unix::fs::File::read_buf (4 samples, 0.17%)</title><rect x="19.0596%" y="421" width="0.1679%" height="15" fill="rgb(250,205,27)" fg:x="454" fg:w="4"/><text x="19.3096%" y="431.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (4 samples, 0.17%)</title><rect x="19.0596%" y="405" width="0.1679%" height="15" fill="rgb(210,80,43)" fg:x="454" fg:w="4"/><text x="19.3096%" y="415.50"></text></g><g><title>__libc_read (4 samples, 0.17%)</title><rect x="19.0596%" y="389" width="0.1679%" height="15" fill="rgb(247,160,36)" fg:x="454" fg:w="4"/><text x="19.3096%" y="399.50"></text></g><g><title>__libc_read (4 samples, 0.17%)</title><rect x="19.0596%" y="373" width="0.1679%" height="15" fill="rgb(234,13,49)" fg:x="454" fg:w="4"/><text x="19.3096%" y="383.50"></text></g><g><title>syscall_return_via_sysret (1 samples, 0.04%)</title><rect x="19.1856%" y="357" width="0.0420%" height="15" fill="rgb(234,122,0)" fg:x="457" fg:w="1"/><text x="19.4356%" y="367.50"></text></g><g><title>do_syscall_64 (1 samples, 0.04%)</title><rect x="19.2275%" y="405" width="0.0420%" height="15" fill="rgb(207,146,38)" fg:x="458" fg:w="1"/><text x="19.4775%" y="415.50"></text></g><g><title>__x64_sys_close (1 samples, 0.04%)</title><rect x="19.2275%" y="389" width="0.0420%" height="15" fill="rgb(207,177,25)" fg:x="458" fg:w="1"/><text x="19.4775%" y="399.50"></text></g><g><title>__close_fd (1 samples, 0.04%)</title><rect x="19.2275%" y="373" width="0.0420%" height="15" fill="rgb(211,178,42)" fg:x="458" fg:w="1"/><text x="19.4775%" y="383.50"></text></g><g><title>pick_file (1 samples, 0.04%)</title><rect x="19.2275%" y="357" width="0.0420%" height="15" fill="rgb(230,69,54)" fg:x="458" fg:w="1"/><text x="19.4775%" y="367.50"></text></g><g><title>kfree (1 samples, 0.04%)</title><rect x="19.2695%" y="325" width="0.0420%" height="15" fill="rgb(214,135,41)" fg:x="459" fg:w="1"/><text x="19.5195%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::fs::File&gt; (3 samples, 0.13%)</title><rect x="19.2275%" y="517" width="0.1259%" height="15" fill="rgb(237,67,25)" fg:x="458" fg:w="3"/><text x="19.4775%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::fs::File&gt; (3 samples, 0.13%)</title><rect x="19.2275%" y="501" width="0.1259%" height="15" fill="rgb(222,189,50)" fg:x="458" fg:w="3"/><text x="19.4775%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::fd::FileDesc&gt; (3 samples, 0.13%)</title><rect x="19.2275%" y="485" width="0.1259%" height="15" fill="rgb(245,148,34)" fg:x="458" fg:w="3"/><text x="19.4775%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::os::fd::owned::OwnedFd&gt; (3 samples, 0.13%)</title><rect x="19.2275%" y="469" width="0.1259%" height="15" fill="rgb(222,29,6)" fg:x="458" fg:w="3"/><text x="19.4775%" y="479.50"></text></g><g><title>&lt;std::os::fd::owned::OwnedFd as core::ops::drop::Drop&gt;::drop (3 samples, 0.13%)</title><rect x="19.2275%" y="453" width="0.1259%" height="15" fill="rgb(221,189,43)" fg:x="458" fg:w="3"/><text x="19.4775%" y="463.50"></text></g><g><title>__close (3 samples, 0.13%)</title><rect x="19.2275%" y="437" width="0.1259%" height="15" fill="rgb(207,36,27)" fg:x="458" fg:w="3"/><text x="19.4775%" y="447.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3 samples, 0.13%)</title><rect x="19.2275%" y="421" width="0.1259%" height="15" fill="rgb(217,90,24)" fg:x="458" fg:w="3"/><text x="19.4775%" y="431.50"></text></g><g><title>syscall_exit_to_user_mode (2 samples, 0.08%)</title><rect x="19.2695%" y="405" width="0.0840%" height="15" fill="rgb(224,66,35)" fg:x="459" fg:w="2"/><text x="19.5195%" y="415.50"></text></g><g><title>exit_to_user_mode_prepare (2 samples, 0.08%)</title><rect x="19.2695%" y="389" width="0.0840%" height="15" fill="rgb(221,13,50)" fg:x="459" fg:w="2"/><text x="19.5195%" y="399.50"></text></g><g><title>task_work_run (2 samples, 0.08%)</title><rect x="19.2695%" y="373" width="0.0840%" height="15" fill="rgb(236,68,49)" fg:x="459" fg:w="2"/><text x="19.5195%" y="383.50"></text></g><g><title>__fput (2 samples, 0.08%)</title><rect x="19.2695%" y="357" width="0.0840%" height="15" fill="rgb(229,146,28)" fg:x="459" fg:w="2"/><text x="19.5195%" y="367.50"></text></g><g><title>kernfs_fop_release (2 samples, 0.08%)</title><rect x="19.2695%" y="341" width="0.0840%" height="15" fill="rgb(225,31,38)" fg:x="459" fg:w="2"/><text x="19.5195%" y="351.50"></text></g><g><title>seq_release (1 samples, 0.04%)</title><rect x="19.3115%" y="325" width="0.0420%" height="15" fill="rgb(250,208,3)" fg:x="460" fg:w="1"/><text x="19.5615%" y="335.50"></text></g><g><title>kfree (1 samples, 0.04%)</title><rect x="19.3115%" y="309" width="0.0420%" height="15" fill="rgb(246,54,23)" fg:x="460" fg:w="1"/><text x="19.5615%" y="319.50"></text></g><g><title>refill_obj_stock (1 samples, 0.04%)</title><rect x="19.3115%" y="293" width="0.0420%" height="15" fill="rgb(243,76,11)" fg:x="460" fg:w="1"/><text x="19.5615%" y="303.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.04%)</title><rect x="19.3535%" y="517" width="0.0420%" height="15" fill="rgb(245,21,50)" fg:x="461" fg:w="1"/><text x="19.6035%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.04%)</title><rect x="19.3535%" y="501" width="0.0420%" height="15" fill="rgb(228,9,43)" fg:x="461" fg:w="1"/><text x="19.6035%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.04%)</title><rect x="19.3535%" y="485" width="0.0420%" height="15" fill="rgb(208,100,47)" fg:x="461" fg:w="1"/><text x="19.6035%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.04%)</title><rect x="19.3535%" y="469" width="0.0420%" height="15" fill="rgb(232,26,8)" fg:x="461" fg:w="1"/><text x="19.6035%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.04%)</title><rect x="19.3535%" y="453" width="0.0420%" height="15" fill="rgb(216,166,38)" fg:x="461" fg:w="1"/><text x="19.6035%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (1 samples, 0.04%)</title><rect x="19.3535%" y="437" width="0.0420%" height="15" fill="rgb(251,202,51)" fg:x="461" fg:w="1"/><text x="19.6035%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (1 samples, 0.04%)</title><rect x="19.3535%" y="421" width="0.0420%" height="15" fill="rgb(254,216,34)" fg:x="461" fg:w="1"/><text x="19.6035%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (1 samples, 0.04%)</title><rect x="19.3535%" y="405" width="0.0420%" height="15" fill="rgb(251,32,27)" fg:x="461" fg:w="1"/><text x="19.6035%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1 samples, 0.04%)</title><rect x="19.3535%" y="389" width="0.0420%" height="15" fill="rgb(208,127,28)" fg:x="461" fg:w="1"/><text x="19.6035%" y="399.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (1 samples, 0.04%)</title><rect x="19.3535%" y="373" width="0.0420%" height="15" fill="rgb(224,137,22)" fg:x="461" fg:w="1"/><text x="19.6035%" y="383.50"></text></g><g><title>colmet_node::backends::memory::get_metric_values (9 samples, 0.38%)</title><rect x="19.0596%" y="533" width="0.3778%" height="15" fill="rgb(254,70,32)" fg:x="454" fg:w="9"/><text x="19.3096%" y="543.50"></text></g><g><title>std::fs::File::open (1 samples, 0.04%)</title><rect x="19.3955%" y="517" width="0.0420%" height="15" fill="rgb(229,75,37)" fg:x="462" fg:w="1"/><text x="19.6455%" y="527.50"></text></g><g><title>std::fs::OpenOptions::open (1 samples, 0.04%)</title><rect x="19.3955%" y="501" width="0.0420%" height="15" fill="rgb(252,64,23)" fg:x="462" fg:w="1"/><text x="19.6455%" y="511.50"></text></g><g><title>std::fs::OpenOptions::_open (1 samples, 0.04%)</title><rect x="19.3955%" y="485" width="0.0420%" height="15" fill="rgb(232,162,48)" fg:x="462" fg:w="1"/><text x="19.6455%" y="495.50"></text></g><g><title>std::sys::unix::fs::File::open (1 samples, 0.04%)</title><rect x="19.3955%" y="469" width="0.0420%" height="15" fill="rgb(246,160,12)" fg:x="462" fg:w="1"/><text x="19.6455%" y="479.50"></text></g><g><title>std::sys::unix::fs::File::open_c (1 samples, 0.04%)</title><rect x="19.3955%" y="453" width="0.0420%" height="15" fill="rgb(247,166,0)" fg:x="462" fg:w="1"/><text x="19.6455%" y="463.50"></text></g><g><title>std::sys::unix::cvt_r (1 samples, 0.04%)</title><rect x="19.3955%" y="437" width="0.0420%" height="15" fill="rgb(249,219,21)" fg:x="462" fg:w="1"/><text x="19.6455%" y="447.50"></text></g><g><title>std::sys::unix::fs::File::open_c::{{closure}} (1 samples, 0.04%)</title><rect x="19.3955%" y="421" width="0.0420%" height="15" fill="rgb(205,209,3)" fg:x="462" fg:w="1"/><text x="19.6455%" y="431.50"></text></g><g><title>__libc_open64 (1 samples, 0.04%)</title><rect x="19.3955%" y="405" width="0.0420%" height="15" fill="rgb(243,44,1)" fg:x="462" fg:w="1"/><text x="19.6455%" y="415.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="19.3955%" y="389" width="0.0420%" height="15" fill="rgb(206,159,16)" fg:x="462" fg:w="1"/><text x="19.6455%" y="399.50"></text></g><g><title>do_syscall_64 (1 samples, 0.04%)</title><rect x="19.3955%" y="373" width="0.0420%" height="15" fill="rgb(244,77,30)" fg:x="462" fg:w="1"/><text x="19.6455%" y="383.50"></text></g><g><title>__x64_sys_openat (1 samples, 0.04%)</title><rect x="19.3955%" y="357" width="0.0420%" height="15" fill="rgb(218,69,12)" fg:x="462" fg:w="1"/><text x="19.6455%" y="367.50"></text></g><g><title>do_sys_openat2 (1 samples, 0.04%)</title><rect x="19.3955%" y="341" width="0.0420%" height="15" fill="rgb(212,87,7)" fg:x="462" fg:w="1"/><text x="19.6455%" y="351.50"></text></g><g><title>do_filp_open (1 samples, 0.04%)</title><rect x="19.3955%" y="325" width="0.0420%" height="15" fill="rgb(245,114,25)" fg:x="462" fg:w="1"/><text x="19.6455%" y="335.50"></text></g><g><title>path_openat (1 samples, 0.04%)</title><rect x="19.3955%" y="309" width="0.0420%" height="15" fill="rgb(210,61,42)" fg:x="462" fg:w="1"/><text x="19.6455%" y="319.50"></text></g><g><title>link_path_walk.part.0 (1 samples, 0.04%)</title><rect x="19.3955%" y="293" width="0.0420%" height="15" fill="rgb(211,52,33)" fg:x="462" fg:w="1"/><text x="19.6455%" y="303.50"></text></g><g><title>&lt;colmet_node::backends::memory::MemoryBackend as colmet_node::backends::Backend&gt;::return_values (10 samples, 0.42%)</title><rect x="19.0596%" y="549" width="0.4198%" height="15" fill="rgb(234,58,33)" fg:x="454" fg:w="10"/><text x="19.3096%" y="559.50"></text></g><g><title>colmet_node::utils::wait_file (1 samples, 0.04%)</title><rect x="19.4374%" y="533" width="0.0420%" height="15" fill="rgb(220,115,36)" fg:x="463" fg:w="1"/><text x="19.6874%" y="543.50"></text></g><g><title>std::path::Path::exists (1 samples, 0.04%)</title><rect x="19.4374%" y="517" width="0.0420%" height="15" fill="rgb(243,153,54)" fg:x="463" fg:w="1"/><text x="19.6874%" y="527.50"></text></g><g><title>std::fs::metadata (1 samples, 0.04%)</title><rect x="19.4374%" y="501" width="0.0420%" height="15" fill="rgb(251,47,18)" fg:x="463" fg:w="1"/><text x="19.6874%" y="511.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.04%)</title><rect x="19.4374%" y="485" width="0.0420%" height="15" fill="rgb(242,102,42)" fg:x="463" fg:w="1"/><text x="19.6874%" y="495.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.04%)</title><rect x="19.4374%" y="469" width="0.0420%" height="15" fill="rgb(234,31,38)" fg:x="463" fg:w="1"/><text x="19.6874%" y="479.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.04%)</title><rect x="19.4374%" y="453" width="0.0420%" height="15" fill="rgb(221,117,51)" fg:x="463" fg:w="1"/><text x="19.6874%" y="463.50"></text></g><g><title>statx (1 samples, 0.04%)</title><rect x="19.4374%" y="437" width="0.0420%" height="15" fill="rgb(212,20,18)" fg:x="463" fg:w="1"/><text x="19.6874%" y="447.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="19.4374%" y="421" width="0.0420%" height="15" fill="rgb(245,133,36)" fg:x="463" fg:w="1"/><text x="19.6874%" y="431.50"></text></g><g><title>do_syscall_64 (1 samples, 0.04%)</title><rect x="19.4374%" y="405" width="0.0420%" height="15" fill="rgb(212,6,19)" fg:x="463" fg:w="1"/><text x="19.6874%" y="415.50"></text></g><g><title>__x64_sys_statx (1 samples, 0.04%)</title><rect x="19.4374%" y="389" width="0.0420%" height="15" fill="rgb(218,1,36)" fg:x="463" fg:w="1"/><text x="19.6874%" y="399.50"></text></g><g><title>do_statx (1 samples, 0.04%)</title><rect x="19.4374%" y="373" width="0.0420%" height="15" fill="rgb(246,84,54)" fg:x="463" fg:w="1"/><text x="19.6874%" y="383.50"></text></g><g><title>vfs_statx (1 samples, 0.04%)</title><rect x="19.4374%" y="357" width="0.0420%" height="15" fill="rgb(242,110,6)" fg:x="463" fg:w="1"/><text x="19.6874%" y="367.50"></text></g><g><title>filename_lookup (1 samples, 0.04%)</title><rect x="19.4374%" y="341" width="0.0420%" height="15" fill="rgb(214,47,5)" fg:x="463" fg:w="1"/><text x="19.6874%" y="351.50"></text></g><g><title>path_lookupat (1 samples, 0.04%)</title><rect x="19.4374%" y="325" width="0.0420%" height="15" fill="rgb(218,159,25)" fg:x="463" fg:w="1"/><text x="19.6874%" y="335.50"></text></g><g><title>link_path_walk.part.0 (1 samples, 0.04%)</title><rect x="19.4374%" y="309" width="0.0420%" height="15" fill="rgb(215,211,28)" fg:x="463" fg:w="1"/><text x="19.6874%" y="319.50"></text></g><g><title>walk_component (1 samples, 0.04%)</title><rect x="19.4374%" y="293" width="0.0420%" height="15" fill="rgb(238,59,32)" fg:x="463" fg:w="1"/><text x="19.6874%" y="303.50"></text></g><g><title>lookup_fast (1 samples, 0.04%)</title><rect x="19.4374%" y="277" width="0.0420%" height="15" fill="rgb(226,82,3)" fg:x="463" fg:w="1"/><text x="19.6874%" y="287.50"></text></g><g><title>kernfs_dop_revalidate (1 samples, 0.04%)</title><rect x="19.4374%" y="261" width="0.0420%" height="15" fill="rgb(240,164,32)" fg:x="463" fg:w="1"/><text x="19.6874%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.13%)</title><rect x="19.5634%" y="517" width="0.1259%" height="15" fill="rgb(232,46,7)" fg:x="466" fg:w="3"/><text x="19.8134%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (3 samples, 0.13%)</title><rect x="19.5634%" y="501" width="0.1259%" height="15" fill="rgb(229,129,53)" fg:x="466" fg:w="3"/><text x="19.8134%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (5 samples, 0.21%)</title><rect x="19.5214%" y="533" width="0.2099%" height="15" fill="rgb(234,188,29)" fg:x="465" fg:w="5"/><text x="19.7714%" y="543.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.04%)</title><rect x="19.6893%" y="517" width="0.0420%" height="15" fill="rgb(246,141,4)" fg:x="469" fg:w="1"/><text x="19.9393%" y="527.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="19.6893%" y="501" width="0.0420%" height="15" fill="rgb(229,23,39)" fg:x="469" fg:w="1"/><text x="19.9393%" y="511.50"></text></g><g><title>colmet_node::backends::BackendsManager::get_metrics_to_collect_now (7 samples, 0.29%)</title><rect x="19.4794%" y="549" width="0.2939%" height="15" fill="rgb(206,12,3)" fg:x="464" fg:w="7"/><text x="19.7294%" y="559.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.04%)</title><rect x="19.7313%" y="533" width="0.0420%" height="15" fill="rgb(252,226,20)" fg:x="470" fg:w="1"/><text x="19.9813%" y="543.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.04%)</title><rect x="19.7313%" y="517" width="0.0420%" height="15" fill="rgb(216,123,35)" fg:x="470" fg:w="1"/><text x="19.9813%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.04%)</title><rect x="19.7313%" y="501" width="0.0420%" height="15" fill="rgb(212,68,40)" fg:x="470" fg:w="1"/><text x="19.9813%" y="511.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (1 samples, 0.04%)</title><rect x="19.7733%" y="517" width="0.0420%" height="15" fill="rgb(254,125,32)" fg:x="471" fg:w="1"/><text x="20.0233%" y="527.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (1 samples, 0.04%)</title><rect x="19.7733%" y="501" width="0.0420%" height="15" fill="rgb(253,97,22)" fg:x="471" fg:w="1"/><text x="20.0233%" y="511.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (1 samples, 0.04%)</title><rect x="19.7733%" y="485" width="0.0420%" height="15" fill="rgb(241,101,14)" fg:x="471" fg:w="1"/><text x="20.0233%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.04%)</title><rect x="19.7733%" y="469" width="0.0420%" height="15" fill="rgb(238,103,29)" fg:x="471" fg:w="1"/><text x="20.0233%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (1 samples, 0.04%)</title><rect x="19.7733%" y="453" width="0.0420%" height="15" fill="rgb(233,195,47)" fg:x="471" fg:w="1"/><text x="20.0233%" y="463.50"></text></g><g><title>__GI___libc_free (9 samples, 0.38%)</title><rect x="19.9412%" y="389" width="0.3778%" height="15" fill="rgb(246,218,30)" fg:x="475" fg:w="9"/><text x="20.1912%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;colmet_node::backends::metric::Metric,alloc::alloc::Global&gt;&gt; (15 samples, 0.63%)</title><rect x="19.8153%" y="517" width="0.6297%" height="15" fill="rgb(219,145,47)" fg:x="472" fg:w="15"/><text x="20.0653%" y="527.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.63%)</title><rect x="19.8153%" y="501" width="0.6297%" height="15" fill="rgb(243,12,26)" fg:x="472" fg:w="15"/><text x="20.0653%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;colmet_node::backends::metric::Metric&gt;&gt; (12 samples, 0.50%)</title><rect x="19.9412%" y="485" width="0.5038%" height="15" fill="rgb(214,87,16)" fg:x="475" fg:w="12"/><text x="20.1912%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.50%)</title><rect x="19.9412%" y="469" width="0.5038%" height="15" fill="rgb(208,99,42)" fg:x="475" fg:w="12"/><text x="20.1912%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12 samples, 0.50%)</title><rect x="19.9412%" y="453" width="0.5038%" height="15" fill="rgb(253,99,2)" fg:x="475" fg:w="12"/><text x="20.1912%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 0.50%)</title><rect x="19.9412%" y="437" width="0.5038%" height="15" fill="rgb(220,168,23)" fg:x="475" fg:w="12"/><text x="20.1912%" y="447.50"></text></g><g><title>__rdl_dealloc (12 samples, 0.50%)</title><rect x="19.9412%" y="421" width="0.5038%" height="15" fill="rgb(242,38,24)" fg:x="475" fg:w="12"/><text x="20.1912%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (12 samples, 0.50%)</title><rect x="19.9412%" y="405" width="0.5038%" height="15" fill="rgb(225,182,9)" fg:x="475" fg:w="12"/><text x="20.1912%" y="415.50"></text></g><g><title>_int_free (3 samples, 0.13%)</title><rect x="20.3191%" y="389" width="0.1259%" height="15" fill="rgb(243,178,37)" fg:x="484" fg:w="3"/><text x="20.5691%" y="399.50"></text></g><g><title>tcache_put (1 samples, 0.04%)</title><rect x="20.4030%" y="373" width="0.0420%" height="15" fill="rgb(232,139,19)" fg:x="486" fg:w="1"/><text x="20.6530%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;colmet_node::backends::metric::Metric&gt;&gt; (17 samples, 0.71%)</title><rect x="19.7733%" y="549" width="0.7137%" height="15" fill="rgb(225,201,24)" fg:x="471" fg:w="17"/><text x="20.0233%" y="559.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.71%)</title><rect x="19.7733%" y="533" width="0.7137%" height="15" fill="rgb(221,47,46)" fg:x="471" fg:w="17"/><text x="20.0233%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[colmet_node::backends::metric::Metric]&gt; (1 samples, 0.04%)</title><rect x="20.4450%" y="517" width="0.0420%" height="15" fill="rgb(249,23,13)" fg:x="487" fg:w="1"/><text x="20.6950%" y="527.50"></text></g><g><title>__GI___libc_free (5 samples, 0.21%)</title><rect x="20.5290%" y="405" width="0.2099%" height="15" fill="rgb(219,9,5)" fg:x="489" fg:w="5"/><text x="20.7790%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18 samples, 0.76%)</title><rect x="20.4870%" y="469" width="0.7557%" height="15" fill="rgb(254,171,16)" fg:x="488" fg:w="18"/><text x="20.7370%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 0.76%)</title><rect x="20.4870%" y="453" width="0.7557%" height="15" fill="rgb(230,171,20)" fg:x="488" fg:w="18"/><text x="20.7370%" y="463.50"></text></g><g><title>__rdl_dealloc (18 samples, 0.76%)</title><rect x="20.4870%" y="437" width="0.7557%" height="15" fill="rgb(210,71,41)" fg:x="488" fg:w="18"/><text x="20.7370%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (18 samples, 0.76%)</title><rect x="20.4870%" y="421" width="0.7557%" height="15" fill="rgb(206,173,20)" fg:x="488" fg:w="18"/><text x="20.7370%" y="431.50"></text></g><g><title>_int_free (12 samples, 0.50%)</title><rect x="20.7389%" y="405" width="0.5038%" height="15" fill="rgb(233,88,34)" fg:x="494" fg:w="12"/><text x="20.9889%" y="415.50"></text></g><g><title>tcache_put (2 samples, 0.08%)</title><rect x="21.1587%" y="389" width="0.0840%" height="15" fill="rgb(223,209,46)" fg:x="504" fg:w="2"/><text x="21.4087%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;colmet_node::backends::metric::Metric&gt; (28 samples, 1.18%)</title><rect x="20.4870%" y="549" width="1.1755%" height="15" fill="rgb(250,43,18)" fg:x="488" fg:w="28"/><text x="20.7370%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (28 samples, 1.18%)</title><rect x="20.4870%" y="533" width="1.1755%" height="15" fill="rgb(208,13,10)" fg:x="488" fg:w="28"/><text x="20.7370%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (28 samples, 1.18%)</title><rect x="20.4870%" y="517" width="1.1755%" height="15" fill="rgb(212,200,36)" fg:x="488" fg:w="28"/><text x="20.7370%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (28 samples, 1.18%)</title><rect x="20.4870%" y="501" width="1.1755%" height="15" fill="rgb(225,90,30)" fg:x="488" fg:w="28"/><text x="20.7370%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 1.18%)</title><rect x="20.4870%" y="485" width="1.1755%" height="15" fill="rgb(236,182,39)" fg:x="488" fg:w="28"/><text x="20.7370%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (10 samples, 0.42%)</title><rect x="21.2427%" y="469" width="0.4198%" height="15" fill="rgb(212,144,35)" fg:x="506" fg:w="10"/><text x="21.4927%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,std::collections::hash::map::HashMap&lt;i32,alloc::vec::Vec&lt;colmet_node::backends::metric::Metric&gt;&gt;&gt;&gt; (10 samples, 0.42%)</title><rect x="21.6625%" y="549" width="0.4198%" height="15" fill="rgb(228,63,44)" fg:x="516" fg:w="10"/><text x="21.9125%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,std::collections::hash::map::HashMap&lt;i32,alloc::vec::Vec&lt;colmet_node::backends::metric::Metric&gt;&gt;,std::collections::hash::map::RandomState&gt;&gt; (10 samples, 0.42%)</title><rect x="21.6625%" y="533" width="0.4198%" height="15" fill="rgb(228,109,6)" fg:x="516" fg:w="10"/><text x="21.9125%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,std::collections::hash::map::HashMap&lt;i32,alloc::vec::Vec&lt;colmet_node::backends::metric::Metric&gt;&gt;)&gt;&gt; (10 samples, 0.42%)</title><rect x="21.6625%" y="517" width="0.4198%" height="15" fill="rgb(238,117,24)" fg:x="516" fg:w="10"/><text x="21.9125%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="22.0403%" y="501" width="0.0420%" height="15" fill="rgb(242,26,26)" fg:x="525" fg:w="1"/><text x="22.2903%" y="511.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::is_empty_singleton (1 samples, 0.04%)</title><rect x="22.0403%" y="485" width="0.0420%" height="15" fill="rgb(221,92,48)" fg:x="525" fg:w="1"/><text x="22.2903%" y="495.50"></text></g><g><title>colmet_node::backends::BackendsManager::make_measure (139 samples, 5.84%)</title><rect x="16.2888%" y="565" width="5.8354%" height="15" fill="rgb(209,209,32)" fg:x="388" fg:w="139"/><text x="16.5388%" y="575.50">colmet_..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::is_empty (1 samples, 0.04%)</title><rect x="22.0823%" y="549" width="0.0420%" height="15" fill="rgb(221,70,22)" fg:x="526" fg:w="1"/><text x="22.3323%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::is_empty (1 samples, 0.04%)</title><rect x="22.0823%" y="533" width="0.0420%" height="15" fill="rgb(248,145,5)" fg:x="526" fg:w="1"/><text x="22.3323%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::len (1 samples, 0.04%)</title><rect x="22.0823%" y="517" width="0.0420%" height="15" fill="rgb(226,116,26)" fg:x="526" fg:w="1"/><text x="22.3323%" y="527.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.04%)</title><rect x="22.1243%" y="549" width="0.0420%" height="15" fill="rgb(244,5,17)" fg:x="527" fg:w="1"/><text x="22.3743%" y="559.50"></text></g><g><title>core::time::Duration::as_nanos (1 samples, 0.04%)</title><rect x="22.1662%" y="549" width="0.0420%" height="15" fill="rgb(252,159,33)" fg:x="528" fg:w="1"/><text x="22.4162%" y="559.50"></text></g><g><title>core::time::Duration::from_nanos (3 samples, 0.13%)</title><rect x="22.2082%" y="549" width="0.1259%" height="15" fill="rgb(206,71,0)" fg:x="529" fg:w="3"/><text x="22.4582%" y="559.50"></text></g><g><title>__libc_disable_asynccancel (8 samples, 0.34%)</title><rect x="25.1889%" y="485" width="0.3359%" height="15" fill="rgb(233,118,54)" fg:x="600" fg:w="8"/><text x="25.4389%" y="495.50"></text></g><g><title>__libc_enable_asynccancel (2 samples, 0.08%)</title><rect x="25.5248%" y="485" width="0.0840%" height="15" fill="rgb(234,83,48)" fg:x="608" fg:w="2"/><text x="25.7748%" y="495.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.04%)</title><rect x="25.6087%" y="485" width="0.0420%" height="15" fill="rgb(228,3,54)" fg:x="610" fg:w="1"/><text x="25.8587%" y="495.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="25.6507%" y="485" width="0.0420%" height="15" fill="rgb(226,155,13)" fg:x="611" fg:w="1"/><text x="25.9007%" y="495.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.04%)</title><rect x="25.6507%" y="469" width="0.0420%" height="15" fill="rgb(241,28,37)" fg:x="611" fg:w="1"/><text x="25.9007%" y="479.50"></text></g><g><title>entry_SYSCALL_64 (4 samples, 0.17%)</title><rect x="25.6927%" y="485" width="0.1679%" height="15" fill="rgb(233,93,10)" fg:x="612" fg:w="4"/><text x="25.9427%" y="495.50"></text></g><g><title>_cond_resched (4 samples, 0.17%)</title><rect x="30.3946%" y="389" width="0.1679%" height="15" fill="rgb(225,113,19)" fg:x="724" fg:w="4"/><text x="30.6446%" y="399.50"></text></g><g><title>rcu_all_qs (2 samples, 0.08%)</title><rect x="30.4786%" y="373" width="0.0840%" height="15" fill="rgb(241,2,18)" fg:x="726" fg:w="2"/><text x="30.7286%" y="383.50"></text></g><g><title>_raw_spin_unlock_irqrestore (3 samples, 0.13%)</title><rect x="30.5626%" y="389" width="0.1259%" height="15" fill="rgb(228,207,21)" fg:x="728" fg:w="3"/><text x="30.8126%" y="399.50"></text></g><g><title>hrtimer_active (3 samples, 0.13%)</title><rect x="30.6885%" y="389" width="0.1259%" height="15" fill="rgb(213,211,35)" fg:x="731" fg:w="3"/><text x="30.9385%" y="399.50"></text></g><g><title>__x86_retpoline_rax (1 samples, 0.04%)</title><rect x="31.1083%" y="373" width="0.0420%" height="15" fill="rgb(209,83,10)" fg:x="741" fg:w="1"/><text x="31.3583%" y="383.50"></text></g><g><title>_raw_spin_lock_irqsave (4 samples, 0.17%)</title><rect x="31.1503%" y="373" width="0.1679%" height="15" fill="rgb(209,164,1)" fg:x="742" fg:w="4"/><text x="31.4003%" y="383.50"></text></g><g><title>__x86_retpoline_rax (2 samples, 0.08%)</title><rect x="31.5701%" y="341" width="0.0840%" height="15" fill="rgb(213,184,43)" fg:x="752" fg:w="2"/><text x="31.8201%" y="351.50"></text></g><g><title>ktime_get (8 samples, 0.34%)</title><rect x="31.5701%" y="357" width="0.3359%" height="15" fill="rgb(231,61,34)" fg:x="752" fg:w="8"/><text x="31.8201%" y="367.50"></text></g><g><title>read_tsc (6 samples, 0.25%)</title><rect x="31.6541%" y="341" width="0.2519%" height="15" fill="rgb(235,75,3)" fg:x="754" fg:w="6"/><text x="31.9041%" y="351.50"></text></g><g><title>clockevents_program_event (54 samples, 2.27%)</title><rect x="31.3182%" y="373" width="2.2670%" height="15" fill="rgb(220,106,47)" fg:x="746" fg:w="54"/><text x="31.5682%" y="383.50">c..</text></g><g><title>lapic_next_deadline (40 samples, 1.68%)</title><rect x="31.9060%" y="357" width="1.6793%" height="15" fill="rgb(210,196,33)" fg:x="760" fg:w="40"/><text x="32.1560%" y="367.50"></text></g><g><title>native_write_msr (20 samples, 0.84%)</title><rect x="32.7456%" y="341" width="0.8396%" height="15" fill="rgb(229,154,42)" fg:x="780" fg:w="20"/><text x="32.9956%" y="351.50"></text></g><g><title>enqueue_hrtimer (19 samples, 0.80%)</title><rect x="33.5852%" y="373" width="0.7976%" height="15" fill="rgb(228,114,26)" fg:x="800" fg:w="19"/><text x="33.8352%" y="383.50"></text></g><g><title>timerqueue_add (15 samples, 0.63%)</title><rect x="33.7531%" y="357" width="0.6297%" height="15" fill="rgb(208,144,1)" fg:x="804" fg:w="15"/><text x="34.0031%" y="367.50"></text></g><g><title>rb_insert_color (2 samples, 0.08%)</title><rect x="34.2989%" y="341" width="0.0840%" height="15" fill="rgb(239,112,37)" fg:x="817" fg:w="2"/><text x="34.5489%" y="351.50"></text></g><g><title>get_nohz_timer_target (2 samples, 0.08%)</title><rect x="34.3829%" y="373" width="0.0840%" height="15" fill="rgb(210,96,50)" fg:x="819" fg:w="2"/><text x="34.6329%" y="383.50"></text></g><g><title>hrtimer_reprogram (2 samples, 0.08%)</title><rect x="34.4668%" y="373" width="0.0840%" height="15" fill="rgb(222,178,2)" fg:x="821" fg:w="2"/><text x="34.7168%" y="383.50"></text></g><g><title>__x86_retpoline_rax (1 samples, 0.04%)</title><rect x="35.0126%" y="357" width="0.0420%" height="15" fill="rgb(226,74,18)" fg:x="834" fg:w="1"/><text x="35.2626%" y="367.50"></text></g><g><title>ktime_get (23 samples, 0.97%)</title><rect x="34.5508%" y="373" width="0.9656%" height="15" fill="rgb(225,67,54)" fg:x="823" fg:w="23"/><text x="34.8008%" y="383.50"></text></g><g><title>read_tsc (11 samples, 0.46%)</title><rect x="35.0546%" y="357" width="0.4618%" height="15" fill="rgb(251,92,32)" fg:x="835" fg:w="11"/><text x="35.3046%" y="367.50"></text></g><g><title>hrtimer_start_range_ns (117 samples, 4.91%)</title><rect x="30.8144%" y="389" width="4.9118%" height="15" fill="rgb(228,149,22)" fg:x="734" fg:w="117"/><text x="31.0644%" y="399.50">hrtime..</text></g><g><title>tick_program_event (5 samples, 0.21%)</title><rect x="35.5164%" y="373" width="0.2099%" height="15" fill="rgb(243,54,13)" fg:x="846" fg:w="5"/><text x="35.7664%" y="383.50"></text></g><g><title>_raw_spin_lock (4 samples, 0.17%)</title><rect x="38.3291%" y="341" width="0.1679%" height="15" fill="rgb(243,180,28)" fg:x="913" fg:w="4"/><text x="38.5791%" y="351.50"></text></g><g><title>intel_pmu_disable_all (1 samples, 0.04%)</title><rect x="38.4971%" y="341" width="0.0420%" height="15" fill="rgb(208,167,24)" fg:x="917" fg:w="1"/><text x="38.7471%" y="351.50"></text></g><g><title>__perf_event_task_sched_out (17 samples, 0.71%)</title><rect x="37.9933%" y="357" width="0.7137%" height="15" fill="rgb(245,73,45)" fg:x="905" fg:w="17"/><text x="38.2433%" y="367.50"></text></g><g><title>x86_pmu_disable (4 samples, 0.17%)</title><rect x="38.5390%" y="341" width="0.1679%" height="15" fill="rgb(237,203,48)" fg:x="918" fg:w="4"/><text x="38.7890%" y="351.50"></text></g><g><title>_raw_spin_lock (4 samples, 0.17%)</title><rect x="38.7070%" y="357" width="0.1679%" height="15" fill="rgb(211,197,16)" fg:x="922" fg:w="4"/><text x="38.9570%" y="367.50"></text></g><g><title>__list_del_entry_valid (1 samples, 0.04%)</title><rect x="41.0160%" y="325" width="0.0420%" height="15" fill="rgb(243,99,51)" fg:x="977" fg:w="1"/><text x="41.2660%" y="335.50"></text></g><g><title>clear_buddies (3 samples, 0.13%)</title><rect x="41.0579%" y="325" width="0.1259%" height="15" fill="rgb(215,123,29)" fg:x="978" fg:w="3"/><text x="41.3079%" y="335.50"></text></g><g><title>reweight_entity (13 samples, 0.55%)</title><rect x="41.1839%" y="325" width="0.5458%" height="15" fill="rgb(239,186,37)" fg:x="981" fg:w="13"/><text x="41.4339%" y="335.50"></text></g><g><title>update_cfs_group (24 samples, 1.01%)</title><rect x="41.7296%" y="325" width="1.0076%" height="15" fill="rgb(252,136,39)" fg:x="994" fg:w="24"/><text x="41.9796%" y="335.50"></text></g><g><title>__calc_delta (1 samples, 0.04%)</title><rect x="43.5768%" y="309" width="0.0420%" height="15" fill="rgb(223,213,32)" fg:x="1038" fg:w="1"/><text x="43.8268%" y="319.50"></text></g><g><title>cpuacct_charge (33 samples, 1.39%)</title><rect x="43.6188%" y="309" width="1.3854%" height="15" fill="rgb(233,115,5)" fg:x="1039" fg:w="33"/><text x="43.8688%" y="319.50"></text></g><g><title>update_curr (55 samples, 2.31%)</title><rect x="42.7372%" y="325" width="2.3090%" height="15" fill="rgb(207,226,44)" fg:x="1018" fg:w="55"/><text x="42.9872%" y="335.50">u..</text></g><g><title>update_min_vruntime (1 samples, 0.04%)</title><rect x="45.0042%" y="309" width="0.0420%" height="15" fill="rgb(208,126,0)" fg:x="1072" fg:w="1"/><text x="45.2542%" y="319.50"></text></g><g><title>__update_load_avg_cfs_rq (19 samples, 0.80%)</title><rect x="45.4660%" y="309" width="0.7976%" height="15" fill="rgb(244,66,21)" fg:x="1083" fg:w="19"/><text x="45.7160%" y="319.50"></text></g><g><title>dequeue_entity (169 samples, 7.09%)</title><rect x="39.7565%" y="341" width="7.0949%" height="15" fill="rgb(222,97,12)" fg:x="947" fg:w="169"/><text x="40.0065%" y="351.50">dequeue_en..</text></g><g><title>update_load_avg (43 samples, 1.81%)</title><rect x="45.0462%" y="325" width="1.8052%" height="15" fill="rgb(219,213,19)" fg:x="1073" fg:w="43"/><text x="45.2962%" y="335.50">u..</text></g><g><title>__update_load_avg_se (14 samples, 0.59%)</title><rect x="46.2636%" y="309" width="0.5877%" height="15" fill="rgb(252,169,30)" fg:x="1102" fg:w="14"/><text x="46.5136%" y="319.50"></text></g><g><title>dequeue_task_fair (193 samples, 8.10%)</title><rect x="38.8749%" y="357" width="8.1024%" height="15" fill="rgb(206,32,51)" fg:x="926" fg:w="193"/><text x="39.1249%" y="367.50">dequeue_tas..</text></g><g><title>update_min_vruntime (3 samples, 0.13%)</title><rect x="46.8514%" y="341" width="0.1259%" height="15" fill="rgb(250,172,42)" fg:x="1116" fg:w="3"/><text x="47.1014%" y="351.50"></text></g><g><title>__perf_event_task_sched_in (125 samples, 5.25%)</title><rect x="47.4391%" y="341" width="5.2477%" height="15" fill="rgb(209,34,43)" fg:x="1130" fg:w="125"/><text x="47.6891%" y="351.50">__perf..</text></g><g><title>__intel_pmu_enable_all.constprop.0 (120 samples, 5.04%)</title><rect x="47.6490%" y="325" width="5.0378%" height="15" fill="rgb(223,11,35)" fg:x="1135" fg:w="120"/><text x="47.8990%" y="335.50">__inte..</text></g><g><title>native_write_msr (118 samples, 4.95%)</title><rect x="47.7330%" y="309" width="4.9538%" height="15" fill="rgb(251,219,26)" fg:x="1137" fg:w="118"/><text x="47.9830%" y="319.50">native..</text></g><g><title>asm_call_sysvec_on_stack (1 samples, 0.04%)</title><rect x="52.7288%" y="309" width="0.0420%" height="15" fill="rgb(231,119,3)" fg:x="1256" fg:w="1"/><text x="52.9788%" y="319.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="52.7288%" y="293" width="0.0420%" height="15" fill="rgb(216,97,11)" fg:x="1256" fg:w="1"/><text x="52.9788%" y="303.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.04%)</title><rect x="52.7288%" y="277" width="0.0420%" height="15" fill="rgb(223,59,9)" fg:x="1256" fg:w="1"/><text x="52.9788%" y="287.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.04%)</title><rect x="52.7288%" y="261" width="0.0420%" height="15" fill="rgb(233,93,31)" fg:x="1256" fg:w="1"/><text x="52.9788%" y="271.50"></text></g><g><title>tick_sched_timer (1 samples, 0.04%)</title><rect x="52.7288%" y="245" width="0.0420%" height="15" fill="rgb(239,81,33)" fg:x="1256" fg:w="1"/><text x="52.9788%" y="255.50"></text></g><g><title>tick_sched_handle (1 samples, 0.04%)</title><rect x="52.7288%" y="229" width="0.0420%" height="15" fill="rgb(213,120,34)" fg:x="1256" fg:w="1"/><text x="52.9788%" y="239.50"></text></g><g><title>update_process_times (1 samples, 0.04%)</title><rect x="52.7288%" y="213" width="0.0420%" height="15" fill="rgb(243,49,53)" fg:x="1256" fg:w="1"/><text x="52.9788%" y="223.50"></text></g><g><title>account_system_index_time (1 samples, 0.04%)</title><rect x="52.7288%" y="197" width="0.0420%" height="15" fill="rgb(247,216,33)" fg:x="1256" fg:w="1"/><text x="52.9788%" y="207.50"></text></g><g><title>cpuacct_account_field (1 samples, 0.04%)</title><rect x="52.7288%" y="181" width="0.0420%" height="15" fill="rgb(226,26,14)" fg:x="1256" fg:w="1"/><text x="52.9788%" y="191.50"></text></g><g><title>finish_task_switch (139 samples, 5.84%)</title><rect x="46.9773%" y="357" width="5.8354%" height="15" fill="rgb(215,49,53)" fg:x="1119" fg:w="139"/><text x="47.2273%" y="367.50">finish_..</text></g><g><title>asm_sysvec_apic_timer_interrupt (3 samples, 0.13%)</title><rect x="52.6868%" y="341" width="0.1259%" height="15" fill="rgb(245,162,40)" fg:x="1255" fg:w="3"/><text x="52.9368%" y="351.50"></text></g><g><title>sysvec_apic_timer_interrupt (2 samples, 0.08%)</title><rect x="52.7288%" y="325" width="0.0840%" height="15" fill="rgb(229,68,17)" fg:x="1256" fg:w="2"/><text x="52.9788%" y="335.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.04%)</title><rect x="52.7708%" y="309" width="0.0420%" height="15" fill="rgb(213,182,10)" fg:x="1257" fg:w="1"/><text x="53.0208%" y="319.50"></text></g><g><title>do_softirq_own_stack (1 samples, 0.04%)</title><rect x="52.7708%" y="293" width="0.0420%" height="15" fill="rgb(245,125,30)" fg:x="1257" fg:w="1"/><text x="53.0208%" y="303.50"></text></g><g><title>asm_call_sysvec_on_stack (1 samples, 0.04%)</title><rect x="52.7708%" y="277" width="0.0420%" height="15" fill="rgb(232,202,2)" fg:x="1257" fg:w="1"/><text x="53.0208%" y="287.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="52.7708%" y="261" width="0.0420%" height="15" fill="rgb(237,140,51)" fg:x="1257" fg:w="1"/><text x="53.0208%" y="271.50"></text></g><g><title>run_rebalance_domains (1 samples, 0.04%)</title><rect x="52.7708%" y="245" width="0.0420%" height="15" fill="rgb(236,157,25)" fg:x="1257" fg:w="1"/><text x="53.0208%" y="255.50"></text></g><g><title>update_blocked_averages (1 samples, 0.04%)</title><rect x="52.7708%" y="229" width="0.0420%" height="15" fill="rgb(219,209,0)" fg:x="1257" fg:w="1"/><text x="53.0208%" y="239.50"></text></g><g><title>update_load_avg (1 samples, 0.04%)</title><rect x="52.7708%" y="213" width="0.0420%" height="15" fill="rgb(240,116,54)" fg:x="1257" fg:w="1"/><text x="53.0208%" y="223.50"></text></g><g><title>__update_load_avg_cfs_rq (1 samples, 0.04%)</title><rect x="52.7708%" y="197" width="0.0420%" height="15" fill="rgb(216,10,36)" fg:x="1257" fg:w="1"/><text x="53.0208%" y="207.50"></text></g><g><title>hrtick_update (1 samples, 0.04%)</title><rect x="52.8128%" y="357" width="0.0420%" height="15" fill="rgb(222,72,44)" fg:x="1258" fg:w="1"/><text x="53.0628%" y="367.50"></text></g><g><title>_raw_spin_lock_irqsave (18 samples, 0.76%)</title><rect x="55.0378%" y="309" width="0.7557%" height="15" fill="rgb(232,159,9)" fg:x="1311" fg:w="18"/><text x="55.2878%" y="319.50"></text></g><g><title>_raw_spin_unlock_irqrestore (1 samples, 0.04%)</title><rect x="55.7935%" y="309" width="0.0420%" height="15" fill="rgb(210,39,32)" fg:x="1329" fg:w="1"/><text x="56.0435%" y="319.50"></text></g><g><title>cpumask_next (4 samples, 0.17%)</title><rect x="55.8354%" y="309" width="0.1679%" height="15" fill="rgb(216,194,45)" fg:x="1330" fg:w="4"/><text x="56.0854%" y="319.50"></text></g><g><title>_find_next_bit.constprop.0 (2 samples, 0.08%)</title><rect x="55.9194%" y="293" width="0.0840%" height="15" fill="rgb(218,18,35)" fg:x="1332" fg:w="2"/><text x="56.1694%" y="303.50"></text></g><g><title>idle_cpu (26 samples, 1.09%)</title><rect x="56.0034%" y="309" width="1.0915%" height="15" fill="rgb(207,83,51)" fg:x="1334" fg:w="26"/><text x="56.2534%" y="319.50"></text></g><g><title>__update_load_avg_cfs_rq (2 samples, 0.08%)</title><rect x="57.0949%" y="293" width="0.0840%" height="15" fill="rgb(225,63,43)" fg:x="1360" fg:w="2"/><text x="57.3449%" y="303.50"></text></g><g><title>update_dl_rq_load_avg (1 samples, 0.04%)</title><rect x="57.1788%" y="293" width="0.0420%" height="15" fill="rgb(207,57,36)" fg:x="1362" fg:w="1"/><text x="57.4288%" y="303.50"></text></g><g><title>update_rq_clock (1 samples, 0.04%)</title><rect x="57.2208%" y="293" width="0.0420%" height="15" fill="rgb(216,99,33)" fg:x="1363" fg:w="1"/><text x="57.4708%" y="303.50"></text></g><g><title>update_blocked_averages (6 samples, 0.25%)</title><rect x="57.0949%" y="309" width="0.2519%" height="15" fill="rgb(225,42,16)" fg:x="1360" fg:w="6"/><text x="57.3449%" y="319.50"></text></g><g><title>update_rt_rq_load_avg (2 samples, 0.08%)</title><rect x="57.2628%" y="293" width="0.0840%" height="15" fill="rgb(220,201,45)" fg:x="1364" fg:w="2"/><text x="57.5128%" y="303.50"></text></g><g><title>_nohz_idle_balance (82 samples, 3.44%)</title><rect x="54.6599%" y="325" width="3.4425%" height="15" fill="rgb(225,33,4)" fg:x="1302" fg:w="82"/><text x="54.9099%" y="335.50">_no..</text></g><g><title>update_rq_clock (18 samples, 0.76%)</title><rect x="57.3468%" y="309" width="0.7557%" height="15" fill="rgb(224,33,50)" fg:x="1366" fg:w="18"/><text x="57.5968%" y="319.50"></text></g><g><title>sched_clock_cpu (5 samples, 0.21%)</title><rect x="57.8925%" y="293" width="0.2099%" height="15" fill="rgb(246,198,51)" fg:x="1379" fg:w="5"/><text x="58.1425%" y="303.50"></text></g><g><title>sched_clock (5 samples, 0.21%)</title><rect x="57.8925%" y="277" width="0.2099%" height="15" fill="rgb(205,22,4)" fg:x="1379" fg:w="5"/><text x="58.1425%" y="287.50"></text></g><g><title>native_sched_clock (4 samples, 0.17%)</title><rect x="57.9345%" y="261" width="0.1679%" height="15" fill="rgb(206,3,8)" fg:x="1380" fg:w="4"/><text x="58.1845%" y="271.50"></text></g><g><title>pick_next_task_fair (126 samples, 5.29%)</title><rect x="52.8547%" y="357" width="5.2897%" height="15" fill="rgb(251,23,15)" fg:x="1259" fg:w="126"/><text x="53.1047%" y="367.50">pick_n..</text></g><g><title>newidle_balance (118 samples, 4.95%)</title><rect x="53.1906%" y="341" width="4.9538%" height="15" fill="rgb(252,88,28)" fg:x="1267" fg:w="118"/><text x="53.4406%" y="351.50">newidl..</text></g><g><title>load_balance (1 samples, 0.04%)</title><rect x="58.1024%" y="325" width="0.0420%" height="15" fill="rgb(212,127,14)" fg:x="1384" fg:w="1"/><text x="58.3524%" y="335.50"></text></g><g><title>find_busiest_group (1 samples, 0.04%)</title><rect x="58.1024%" y="309" width="0.0420%" height="15" fill="rgb(247,145,37)" fg:x="1384" fg:w="1"/><text x="58.3524%" y="319.50"></text></g><g><title>update_sd_lb_stats.constprop.0 (1 samples, 0.04%)</title><rect x="58.1024%" y="293" width="0.0420%" height="15" fill="rgb(209,117,53)" fg:x="1384" fg:w="1"/><text x="58.3524%" y="303.50"></text></g><g><title>pick_next_task_idle (13 samples, 0.55%)</title><rect x="58.1444%" y="357" width="0.5458%" height="15" fill="rgb(212,90,42)" fg:x="1385" fg:w="13"/><text x="58.3944%" y="367.50"></text></g><g><title>__update_idle_core (10 samples, 0.42%)</title><rect x="58.2704%" y="341" width="0.4198%" height="15" fill="rgb(218,164,37)" fg:x="1388" fg:w="10"/><text x="58.5204%" y="351.50"></text></g><g><title>psi_task_change (39 samples, 1.64%)</title><rect x="58.6902%" y="357" width="1.6373%" height="15" fill="rgb(246,65,34)" fg:x="1398" fg:w="39"/><text x="58.9402%" y="367.50"></text></g><g><title>psi_group_change (27 samples, 1.13%)</title><rect x="59.1940%" y="341" width="1.1335%" height="15" fill="rgb(231,100,33)" fg:x="1410" fg:w="27"/><text x="59.4440%" y="351.50"></text></g><g><title>record_times (6 samples, 0.25%)</title><rect x="60.0756%" y="325" width="0.2519%" height="15" fill="rgb(228,126,14)" fg:x="1431" fg:w="6"/><text x="60.3256%" y="335.50"></text></g><g><title>sched_clock_cpu (2 samples, 0.08%)</title><rect x="60.2435%" y="309" width="0.0840%" height="15" fill="rgb(215,173,21)" fg:x="1435" fg:w="2"/><text x="60.4935%" y="319.50"></text></g><g><title>sched_clock (2 samples, 0.08%)</title><rect x="60.2435%" y="293" width="0.0840%" height="15" fill="rgb(210,6,40)" fg:x="1435" fg:w="2"/><text x="60.4935%" y="303.50"></text></g><g><title>native_sched_clock (2 samples, 0.08%)</title><rect x="60.2435%" y="277" width="0.0840%" height="15" fill="rgb(212,48,18)" fg:x="1435" fg:w="2"/><text x="60.4935%" y="287.50"></text></g><g><title>psi_task_switch (2 samples, 0.08%)</title><rect x="60.3275%" y="357" width="0.0840%" height="15" fill="rgb(230,214,11)" fg:x="1437" fg:w="2"/><text x="60.5775%" y="367.50"></text></g><g><title>put_prev_task_fair (26 samples, 1.09%)</title><rect x="60.4114%" y="357" width="1.0915%" height="15" fill="rgb(254,105,39)" fg:x="1439" fg:w="26"/><text x="60.6614%" y="367.50"></text></g><g><title>put_prev_entity (10 samples, 0.42%)</title><rect x="61.0831%" y="341" width="0.4198%" height="15" fill="rgb(245,158,5)" fg:x="1455" fg:w="10"/><text x="61.3331%" y="351.50"></text></g><g><title>check_cfs_rq_runtime (5 samples, 0.21%)</title><rect x="61.2930%" y="325" width="0.2099%" height="15" fill="rgb(249,208,11)" fg:x="1460" fg:w="5"/><text x="61.5430%" y="335.50"></text></g><g><title>do_nanosleep (771 samples, 32.37%)</title><rect x="29.4710%" y="405" width="32.3678%" height="15" fill="rgb(210,39,28)" fg:x="702" fg:w="771"/><text x="29.7210%" y="415.50">do_nanosleep</text></g><g><title>schedule (622 samples, 26.11%)</title><rect x="35.7263%" y="389" width="26.1125%" height="15" fill="rgb(211,56,53)" fg:x="851" fg:w="622"/><text x="35.9763%" y="399.50">schedule</text></g><g><title>__schedule (605 samples, 25.40%)</title><rect x="36.4400%" y="373" width="25.3988%" height="15" fill="rgb(226,201,30)" fg:x="868" fg:w="605"/><text x="36.6900%" y="383.50">__schedule</text></g><g><title>update_rq_clock (8 samples, 0.34%)</title><rect x="61.5029%" y="357" width="0.3359%" height="15" fill="rgb(239,101,34)" fg:x="1465" fg:w="8"/><text x="61.7529%" y="367.50"></text></g><g><title>sched_clock_cpu (8 samples, 0.34%)</title><rect x="61.5029%" y="341" width="0.3359%" height="15" fill="rgb(226,209,5)" fg:x="1465" fg:w="8"/><text x="61.7529%" y="351.50"></text></g><g><title>sched_clock (7 samples, 0.29%)</title><rect x="61.5449%" y="325" width="0.2939%" height="15" fill="rgb(250,105,47)" fg:x="1466" fg:w="7"/><text x="61.7949%" y="335.50"></text></g><g><title>native_sched_clock (6 samples, 0.25%)</title><rect x="61.5869%" y="309" width="0.2519%" height="15" fill="rgb(230,72,3)" fg:x="1467" fg:w="6"/><text x="61.8369%" y="319.50"></text></g><g><title>common_nsleep (804 samples, 33.75%)</title><rect x="28.3795%" y="437" width="33.7531%" height="15" fill="rgb(232,218,39)" fg:x="676" fg:w="804"/><text x="28.6295%" y="447.50">common_nsleep</text></g><g><title>hrtimer_nanosleep (791 samples, 33.21%)</title><rect x="28.9253%" y="421" width="33.2074%" height="15" fill="rgb(248,166,6)" fg:x="689" fg:w="791"/><text x="29.1753%" y="431.50">hrtimer_nanosleep</text></g><g><title>hrtimer_init_sleeper (7 samples, 0.29%)</title><rect x="61.8388%" y="405" width="0.2939%" height="15" fill="rgb(247,89,20)" fg:x="1473" fg:w="7"/><text x="62.0888%" y="415.50"></text></g><g><title>__hrtimer_init (7 samples, 0.29%)</title><rect x="61.8388%" y="389" width="0.2939%" height="15" fill="rgb(248,130,54)" fg:x="1473" fg:w="7"/><text x="62.0888%" y="399.50"></text></g><g><title>copy_user_enhanced_fast_string (1 samples, 0.04%)</title><rect x="62.1746%" y="405" width="0.0420%" height="15" fill="rgb(234,196,4)" fg:x="1481" fg:w="1"/><text x="62.4246%" y="415.50"></text></g><g><title>__x64_sys_clock_nanosleep (857 samples, 35.98%)</title><rect x="26.7422%" y="453" width="35.9782%" height="15" fill="rgb(250,143,31)" fg:x="637" fg:w="857"/><text x="26.9922%" y="463.50">__x64_sys_clock_nanosleep</text></g><g><title>get_timespec64 (14 samples, 0.59%)</title><rect x="62.1327%" y="437" width="0.5877%" height="15" fill="rgb(211,110,34)" fg:x="1480" fg:w="14"/><text x="62.3827%" y="447.50"></text></g><g><title>_copy_from_user (13 samples, 0.55%)</title><rect x="62.1746%" y="421" width="0.5458%" height="15" fill="rgb(215,124,48)" fg:x="1481" fg:w="13"/><text x="62.4246%" y="431.50"></text></g><g><title>copy_user_generic_unrolled (12 samples, 0.50%)</title><rect x="62.2166%" y="405" width="0.5038%" height="15" fill="rgb(216,46,13)" fg:x="1482" fg:w="12"/><text x="62.4666%" y="415.50"></text></g><g><title>__x86_retpoline_rax (2 samples, 0.08%)</title><rect x="62.7204%" y="453" width="0.0840%" height="15" fill="rgb(205,184,25)" fg:x="1494" fg:w="2"/><text x="62.9704%" y="463.50"></text></g><g><title>do_syscall_64 (874 samples, 36.69%)</title><rect x="26.1545%" y="469" width="36.6919%" height="15" fill="rgb(228,1,10)" fg:x="623" fg:w="874"/><text x="26.4045%" y="479.50">do_syscall_64</text></g><g><title>syscall_enter_from_user_mode (1 samples, 0.04%)</title><rect x="62.8044%" y="453" width="0.0420%" height="15" fill="rgb(213,116,27)" fg:x="1496" fg:w="1"/><text x="63.0544%" y="463.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="62.8044%" y="437" width="0.0420%" height="15" fill="rgb(241,95,50)" fg:x="1496" fg:w="1"/><text x="63.0544%" y="447.50"></text></g><g><title>fpregs_assert_state_consistent (4 samples, 0.17%)</title><rect x="66.2469%" y="437" width="0.1679%" height="15" fill="rgb(238,48,32)" fg:x="1578" fg:w="4"/><text x="66.4969%" y="447.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (981 samples, 41.18%)</title><rect x="25.8606%" y="485" width="41.1839%" height="15" fill="rgb(235,113,49)" fg:x="616" fg:w="981"/><text x="26.1106%" y="495.50">entry_SYSCALL_64_after_hwframe</text></g><g><title>syscall_exit_to_user_mode (100 samples, 4.20%)</title><rect x="62.8463%" y="469" width="4.1982%" height="15" fill="rgb(205,127,43)" fg:x="1497" fg:w="100"/><text x="63.0963%" y="479.50">sysca..</text></g><g><title>exit_to_user_mode_prepare (23 samples, 0.97%)</title><rect x="66.0789%" y="453" width="0.9656%" height="15" fill="rgb(250,162,2)" fg:x="1574" fg:w="23"/><text x="66.3289%" y="463.50"></text></g><g><title>switch_fpu_return (15 samples, 0.63%)</title><rect x="66.4148%" y="437" width="0.6297%" height="15" fill="rgb(220,13,41)" fg:x="1582" fg:w="15"/><text x="66.6648%" y="447.50"></text></g><g><title>copy_kernel_to_fpregs (2 samples, 0.08%)</title><rect x="66.9605%" y="421" width="0.0840%" height="15" fill="rgb(249,221,25)" fg:x="1595" fg:w="2"/><text x="67.2105%" y="431.50"></text></g><g><title>std::thread::sleep (1,114 samples, 46.77%)</title><rect x="22.3342%" y="549" width="46.7674%" height="15" fill="rgb(215,208,19)" fg:x="532" fg:w="1114"/><text x="22.5842%" y="559.50">std::thread::sleep</text></g><g><title>std::sys::unix::thread::Thread::sleep (1,114 samples, 46.77%)</title><rect x="22.3342%" y="533" width="46.7674%" height="15" fill="rgb(236,175,2)" fg:x="532" fg:w="1114"/><text x="22.5842%" y="543.50">std::sys::unix::thread::Thread::sleep</text></g><g><title>__GI___nanosleep (1,091 samples, 45.80%)</title><rect x="23.2997%" y="517" width="45.8018%" height="15" fill="rgb(241,52,2)" fg:x="555" fg:w="1091"/><text x="23.5497%" y="527.50">__GI___nanosleep</text></g><g><title>__GI___clock_nanosleep (1,084 samples, 45.51%)</title><rect x="23.5936%" y="501" width="45.5080%" height="15" fill="rgb(248,140,14)" fg:x="562" fg:w="1084"/><text x="23.8436%" y="511.50">__GI___clock_nanosleep</text></g><g><title>syscall_return_via_sysret (49 samples, 2.06%)</title><rect x="67.0445%" y="485" width="2.0571%" height="15" fill="rgb(253,22,42)" fg:x="1597" fg:w="49"/><text x="67.2945%" y="495.50">s..</text></g><g><title>std::time::SystemTime::duration_since (4 samples, 0.17%)</title><rect x="69.1016%" y="549" width="0.1679%" height="15" fill="rgb(234,61,47)" fg:x="1646" fg:w="4"/><text x="69.3516%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (4 samples, 0.17%)</title><rect x="69.1016%" y="533" width="0.1679%" height="15" fill="rgb(208,226,15)" fg:x="1646" fg:w="4"/><text x="69.3516%" y="543.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (3 samples, 0.13%)</title><rect x="69.1436%" y="517" width="0.1259%" height="15" fill="rgb(217,221,4)" fg:x="1647" fg:w="3"/><text x="69.3936%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (2 samples, 0.08%)</title><rect x="69.1856%" y="501" width="0.0840%" height="15" fill="rgb(212,174,34)" fg:x="1648" fg:w="2"/><text x="69.4356%" y="511.50"></text></g><g><title>core::cmp::PartialOrd::ge (2 samples, 0.08%)</title><rect x="69.1856%" y="485" width="0.0840%" height="15" fill="rgb(253,83,4)" fg:x="1648" fg:w="2"/><text x="69.4356%" y="495.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (2 samples, 0.08%)</title><rect x="69.1856%" y="469" width="0.0840%" height="15" fill="rgb(250,195,49)" fg:x="1648" fg:w="2"/><text x="69.4356%" y="479.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (2 samples, 0.08%)</title><rect x="69.1856%" y="453" width="0.0840%" height="15" fill="rgb(241,192,25)" fg:x="1648" fg:w="2"/><text x="69.4356%" y="463.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (2 samples, 0.08%)</title><rect x="69.1856%" y="437" width="0.0840%" height="15" fill="rgb(208,124,10)" fg:x="1648" fg:w="2"/><text x="69.4356%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (2 samples, 0.08%)</title><rect x="69.1856%" y="421" width="0.0840%" height="15" fill="rgb(222,33,0)" fg:x="1648" fg:w="2"/><text x="69.4356%" y="431.50"></text></g><g><title>colmet_node::sleep_to_round_timestamp (1,139 samples, 47.82%)</title><rect x="22.1243%" y="565" width="47.8170%" height="15" fill="rgb(234,209,28)" fg:x="527" fg:w="1139"/><text x="22.3743%" y="575.50">colmet_node::sleep_to_round_timestamp</text></g><g><title>std::time::SystemTime::now (16 samples, 0.67%)</title><rect x="69.2695%" y="549" width="0.6717%" height="15" fill="rgb(224,11,23)" fg:x="1650" fg:w="16"/><text x="69.5195%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (16 samples, 0.67%)</title><rect x="69.2695%" y="533" width="0.6717%" height="15" fill="rgb(232,99,1)" fg:x="1650" fg:w="16"/><text x="69.5195%" y="543.50"></text></g><g><title>std::sys::unix::time::inner::now (16 samples, 0.67%)</title><rect x="69.2695%" y="517" width="0.6717%" height="15" fill="rgb(237,95,45)" fg:x="1650" fg:w="16"/><text x="69.5195%" y="527.50"></text></g><g><title>__GI___clock_gettime (15 samples, 0.63%)</title><rect x="69.3115%" y="501" width="0.6297%" height="15" fill="rgb(208,109,11)" fg:x="1651" fg:w="15"/><text x="69.5615%" y="511.50"></text></g><g><title>__vdso_clock_gettime (14 samples, 0.59%)</title><rect x="69.3535%" y="485" width="0.5877%" height="15" fill="rgb(216,190,48)" fg:x="1652" fg:w="14"/><text x="69.6035%" y="495.50"></text></g><g><title>[[vdso]] (8 samples, 0.34%)</title><rect x="69.6054%" y="469" width="0.3359%" height="15" fill="rgb(251,171,36)" fg:x="1658" fg:w="8"/><text x="69.8554%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;zmq::message::Message&gt; (13 samples, 0.55%)</title><rect x="70.1092%" y="549" width="0.5458%" height="15" fill="rgb(230,62,22)" fg:x="1670" fg:w="13"/><text x="70.3592%" y="559.50"></text></g><g><title>&lt;zmq::message::Message as core::ops::drop::Drop&gt;::drop (13 samples, 0.55%)</title><rect x="70.1092%" y="533" width="0.5458%" height="15" fill="rgb(225,114,35)" fg:x="1670" fg:w="13"/><text x="70.3592%" y="543.50"></text></g><g><title>zmq_msg_close (2 samples, 0.08%)</title><rect x="70.5709%" y="517" width="0.0840%" height="15" fill="rgb(215,118,42)" fg:x="1681" fg:w="2"/><text x="70.8209%" y="527.50"></text></g><g><title>log::max_level (5 samples, 0.21%)</title><rect x="70.6549%" y="549" width="0.2099%" height="15" fill="rgb(243,119,21)" fg:x="1683" fg:w="5"/><text x="70.9049%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (5 samples, 0.21%)</title><rect x="70.6549%" y="533" width="0.2099%" height="15" fill="rgb(252,177,53)" fg:x="1683" fg:w="5"/><text x="70.9049%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_load (5 samples, 0.21%)</title><rect x="70.6549%" y="517" width="0.2099%" height="15" fill="rgb(237,209,29)" fg:x="1683" fg:w="5"/><text x="70.9049%" y="527.50"></text></g><g><title>zmq::errno_to_error (8 samples, 0.34%)</title><rect x="70.9068%" y="533" width="0.3359%" height="15" fill="rgb(212,65,23)" fg:x="1689" fg:w="8"/><text x="71.1568%" y="543.50"></text></g><g><title>zmq::Error::from_raw (6 samples, 0.25%)</title><rect x="70.9908%" y="517" width="0.2519%" height="15" fill="rgb(230,222,46)" fg:x="1691" fg:w="6"/><text x="71.2408%" y="527.50"></text></g><g><title>__libc_disable_asynccancel (5 samples, 0.21%)</title><rect x="75.8186%" y="437" width="0.2099%" height="15" fill="rgb(215,135,32)" fg:x="1806" fg:w="5"/><text x="76.0686%" y="447.50"></text></g><g><title>__libc_enable_asynccancel (6 samples, 0.25%)</title><rect x="76.0285%" y="437" width="0.2519%" height="15" fill="rgb(246,101,22)" fg:x="1811" fg:w="6"/><text x="76.2785%" y="447.50"></text></g><g><title>entry_SYSCALL_64 (5 samples, 0.21%)</title><rect x="76.2804%" y="437" width="0.2099%" height="15" fill="rgb(206,107,13)" fg:x="1817" fg:w="5"/><text x="76.5304%" y="447.50"></text></g><g><title>__fdget (1 samples, 0.04%)</title><rect x="80.0168%" y="373" width="0.0420%" height="15" fill="rgb(250,100,44)" fg:x="1906" fg:w="1"/><text x="80.2668%" y="383.50"></text></g><g><title>rcu_read_unlock_strict (1 samples, 0.04%)</title><rect x="80.7725%" y="341" width="0.0420%" height="15" fill="rgb(231,147,38)" fg:x="1924" fg:w="1"/><text x="81.0225%" y="351.50"></text></g><g><title>__fget_light (19 samples, 0.80%)</title><rect x="80.0588%" y="373" width="0.7976%" height="15" fill="rgb(229,8,40)" fg:x="1907" fg:w="19"/><text x="80.3088%" y="383.50"></text></g><g><title>__fget_files (11 samples, 0.46%)</title><rect x="80.3946%" y="357" width="0.4618%" height="15" fill="rgb(221,135,30)" fg:x="1915" fg:w="11"/><text x="80.6446%" y="367.50"></text></g><g><title>restore_regs_and_return_to_kernel (1 samples, 0.04%)</title><rect x="80.8144%" y="341" width="0.0420%" height="15" fill="rgb(249,193,18)" fg:x="1925" fg:w="1"/><text x="81.0644%" y="351.50"></text></g><g><title>copy_user_enhanced_fast_string (5 samples, 0.21%)</title><rect x="81.1083%" y="357" width="0.2099%" height="15" fill="rgb(209,133,39)" fg:x="1932" fg:w="5"/><text x="81.3583%" y="367.50"></text></g><g><title>_copy_from_user (34 samples, 1.43%)</title><rect x="80.8564%" y="373" width="1.4274%" height="15" fill="rgb(232,100,14)" fg:x="1926" fg:w="34"/><text x="81.1064%" y="383.50"></text></g><g><title>copy_user_generic_unrolled (23 samples, 0.97%)</title><rect x="81.3182%" y="357" width="0.9656%" height="15" fill="rgb(224,185,1)" fg:x="1937" fg:w="23"/><text x="81.5682%" y="367.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="82.2838%" y="373" width="0.0420%" height="15" fill="rgb(223,139,8)" fg:x="1960" fg:w="1"/><text x="82.5338%" y="383.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="82.2838%" y="357" width="0.0420%" height="15" fill="rgb(232,213,38)" fg:x="1960" fg:w="1"/><text x="82.5338%" y="367.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.04%)</title><rect x="82.2838%" y="341" width="0.0420%" height="15" fill="rgb(207,94,22)" fg:x="1960" fg:w="1"/><text x="82.5338%" y="351.50"></text></g><g><title>do_softirq_own_stack (1 samples, 0.04%)</title><rect x="82.2838%" y="325" width="0.0420%" height="15" fill="rgb(219,183,54)" fg:x="1960" fg:w="1"/><text x="82.5338%" y="335.50"></text></g><g><title>asm_call_sysvec_on_stack (1 samples, 0.04%)</title><rect x="82.2838%" y="309" width="0.0420%" height="15" fill="rgb(216,185,54)" fg:x="1960" fg:w="1"/><text x="82.5338%" y="319.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="82.2838%" y="293" width="0.0420%" height="15" fill="rgb(254,217,39)" fg:x="1960" fg:w="1"/><text x="82.5338%" y="303.50"></text></g><g><title>run_rebalance_domains (1 samples, 0.04%)</title><rect x="82.2838%" y="277" width="0.0420%" height="15" fill="rgb(240,178,23)" fg:x="1960" fg:w="1"/><text x="82.5338%" y="287.50"></text></g><g><title>update_blocked_averages (1 samples, 0.04%)</title><rect x="82.2838%" y="261" width="0.0420%" height="15" fill="rgb(218,11,47)" fg:x="1960" fg:w="1"/><text x="82.5338%" y="271.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.04%)</title><rect x="82.2838%" y="245" width="0.0420%" height="15" fill="rgb(218,51,51)" fg:x="1960" fg:w="1"/><text x="82.5338%" y="255.50"></text></g><g><title>eventfd_poll (13 samples, 0.55%)</title><rect x="82.3258%" y="373" width="0.5458%" height="15" fill="rgb(238,126,27)" fg:x="1961" fg:w="13"/><text x="82.5758%" y="383.50"></text></g><g><title>do_sys_poll (124 samples, 5.21%)</title><rect x="77.9177%" y="389" width="5.2057%" height="15" fill="rgb(249,202,22)" fg:x="1856" fg:w="124"/><text x="78.1677%" y="399.50">do_sys..</text></g><g><title>poll_freewait (6 samples, 0.25%)</title><rect x="82.8715%" y="373" width="0.2519%" height="15" fill="rgb(254,195,49)" fg:x="1974" fg:w="6"/><text x="83.1215%" y="383.50"></text></g><g><title>__x64_sys_poll (149 samples, 6.26%)</title><rect x="76.9941%" y="405" width="6.2552%" height="15" fill="rgb(208,123,14)" fg:x="1834" fg:w="149"/><text x="77.2441%" y="415.50">__x64_sy..</text></g><g><title>poll_select_set_timeout (3 samples, 0.13%)</title><rect x="83.1234%" y="389" width="0.1259%" height="15" fill="rgb(224,200,8)" fg:x="1980" fg:w="3"/><text x="83.3734%" y="399.50"></text></g><g><title>do_syscall_64 (162 samples, 6.80%)</title><rect x="76.6163%" y="421" width="6.8010%" height="15" fill="rgb(217,61,36)" fg:x="1825" fg:w="162"/><text x="76.8663%" y="431.50">do_syscal..</text></g><g><title>syscall_enter_from_user_mode (4 samples, 0.17%)</title><rect x="83.2494%" y="405" width="0.1679%" height="15" fill="rgb(206,35,45)" fg:x="1983" fg:w="4"/><text x="83.4994%" y="415.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (258 samples, 10.83%)</title><rect x="76.4903%" y="437" width="10.8312%" height="15" fill="rgb(217,65,33)" fg:x="1822" fg:w="258"/><text x="76.7403%" y="447.50">entry_SYSCALL_64..</text></g><g><title>syscall_exit_to_user_mode (93 samples, 3.90%)</title><rect x="83.4173%" y="421" width="3.9043%" height="15" fill="rgb(222,158,48)" fg:x="1987" fg:w="93"/><text x="83.6673%" y="431.50">sysc..</text></g><g><title>exit_to_user_mode_prepare (6 samples, 0.25%)</title><rect x="87.0697%" y="405" width="0.2519%" height="15" fill="rgb(254,2,54)" fg:x="2074" fg:w="6"/><text x="87.3197%" y="415.50"></text></g><g><title>fpregs_assert_state_consistent (3 samples, 0.13%)</title><rect x="87.1956%" y="389" width="0.1259%" height="15" fill="rgb(250,143,38)" fg:x="2077" fg:w="3"/><text x="87.4456%" y="399.50"></text></g><g><title>__GI___poll (325 samples, 13.64%)</title><rect x="75.2309%" y="453" width="13.6440%" height="15" fill="rgb(248,25,0)" fg:x="1792" fg:w="325"/><text x="75.4809%" y="463.50">__GI___poll</text></g><g><title>syscall_return_via_sysret (37 samples, 1.55%)</title><rect x="87.3216%" y="437" width="1.5533%" height="15" fill="rgb(206,152,27)" fg:x="2080" fg:w="37"/><text x="87.5716%" y="447.50"></text></g><g><title>[libzmq.so.5.2.4] (335 samples, 14.06%)</title><rect x="75.0210%" y="469" width="14.0638%" height="15" fill="rgb(240,77,30)" fg:x="1787" fg:w="335"/><text x="75.2710%" y="479.50">[libzmq.so.5.2.4]</text></g><g><title>poll@plt (5 samples, 0.21%)</title><rect x="88.8749%" y="453" width="0.2099%" height="15" fill="rgb(231,5,3)" fg:x="2117" fg:w="5"/><text x="89.1249%" y="463.50"></text></g><g><title>[libzmq.so.5.2.4] (362 samples, 15.20%)</title><rect x="74.0134%" y="485" width="15.1973%" height="15" fill="rgb(207,226,32)" fg:x="1763" fg:w="362"/><text x="74.2634%" y="495.50">[libzmq.so.5.2.4]</text></g><g><title>__errno_location@plt (3 samples, 0.13%)</title><rect x="89.0848%" y="469" width="0.1259%" height="15" fill="rgb(222,207,47)" fg:x="2122" fg:w="3"/><text x="89.3348%" y="479.50"></text></g><g><title>__errno_location (15 samples, 0.63%)</title><rect x="89.2107%" y="485" width="0.6297%" height="15" fill="rgb(229,115,45)" fg:x="2125" fg:w="15"/><text x="89.4607%" y="495.50"></text></g><g><title>[libzmq.so.5.2.4] (447 samples, 18.77%)</title><rect x="71.3266%" y="517" width="18.7657%" height="15" fill="rgb(224,191,6)" fg:x="1699" fg:w="447"/><text x="71.5766%" y="527.50">[libzmq.so.5.2.4]</text></g><g><title>[libzmq.so.5.2.4] (427 samples, 17.93%)</title><rect x="72.1662%" y="501" width="17.9261%" height="15" fill="rgb(230,227,24)" fg:x="1719" fg:w="427"/><text x="72.4162%" y="511.50">[libzmq.so.5.2.4]</text></g><g><title>__errno_location@plt (6 samples, 0.25%)</title><rect x="89.8405%" y="485" width="0.2519%" height="15" fill="rgb(228,80,19)" fg:x="2140" fg:w="6"/><text x="90.0905%" y="495.50"></text></g><g><title>zmq::Socket::recv (459 samples, 19.27%)</title><rect x="70.8648%" y="549" width="19.2695%" height="15" fill="rgb(247,229,0)" fg:x="1688" fg:w="459"/><text x="71.1148%" y="559.50">zmq::Socket::recv</text></g><g><title>zmq_msg_recv (450 samples, 18.89%)</title><rect x="71.2427%" y="533" width="18.8917%" height="15" fill="rgb(237,194,15)" fg:x="1697" fg:w="450"/><text x="71.4927%" y="543.50">zmq_msg_recv</text></g><g><title>__libc_pause (1 samples, 0.04%)</title><rect x="90.0924%" y="517" width="0.0420%" height="15" fill="rgb(219,203,20)" fg:x="2146" fg:w="1"/><text x="90.3424%" y="527.50"></text></g><g><title>[libzmq.so.5.2.4] (1 samples, 0.04%)</title><rect x="90.0924%" y="501" width="0.0420%" height="15" fill="rgb(234,128,8)" fg:x="2146" fg:w="1"/><text x="90.3424%" y="511.50"></text></g><g><title>&lt;zmq_sys::ffi::zmq_msg_t as core::default::Default&gt;::default (1 samples, 0.04%)</title><rect x="90.2183%" y="517" width="0.0420%" height="15" fill="rgb(248,202,8)" fg:x="2149" fg:w="1"/><text x="90.4683%" y="527.50"></text></g><g><title>core::mem::zeroed (1 samples, 0.04%)</title><rect x="90.2183%" y="501" width="0.0420%" height="15" fill="rgb(206,104,37)" fg:x="2149" fg:w="1"/><text x="90.4683%" y="511.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::zeroed (1 samples, 0.04%)</title><rect x="90.2183%" y="485" width="0.0420%" height="15" fill="rgb(223,8,27)" fg:x="2149" fg:w="1"/><text x="90.4683%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (1 samples, 0.04%)</title><rect x="90.2183%" y="469" width="0.0420%" height="15" fill="rgb(216,217,28)" fg:x="2149" fg:w="1"/><text x="90.4683%" y="479.50"></text></g><g><title>core::intrinsics::write_bytes (1 samples, 0.04%)</title><rect x="90.2183%" y="453" width="0.0420%" height="15" fill="rgb(249,199,1)" fg:x="2149" fg:w="1"/><text x="90.4683%" y="463.50"></text></g><g><title>[libzmq.so.5.2.4] (12 samples, 0.50%)</title><rect x="90.6801%" y="501" width="0.5038%" height="15" fill="rgb(240,85,17)" fg:x="2160" fg:w="12"/><text x="90.9301%" y="511.50"></text></g><g><title>colmet_node::zeromq::ZmqSender::receive_config (515 samples, 21.62%)</title><rect x="69.9412%" y="565" width="21.6205%" height="15" fill="rgb(206,108,45)" fg:x="1666" fg:w="515"/><text x="70.1912%" y="575.50">colmet_node::zeromq::ZmqSender::re..</text></g><g><title>zmq::message::Message::new (34 samples, 1.43%)</title><rect x="90.1343%" y="549" width="1.4274%" height="15" fill="rgb(245,210,41)" fg:x="2147" fg:w="34"/><text x="90.3843%" y="559.50"></text></g><g><title>zmq::message::Message::alloc (34 samples, 1.43%)</title><rect x="90.1343%" y="533" width="1.4274%" height="15" fill="rgb(206,13,37)" fg:x="2147" fg:w="34"/><text x="90.3843%" y="543.50"></text></g><g><title>zmq::message::Message::new::{{closure}} (31 samples, 1.30%)</title><rect x="90.2603%" y="517" width="1.3014%" height="15" fill="rgb(250,61,18)" fg:x="2150" fg:w="31"/><text x="90.5103%" y="527.50"></text></g><g><title>zmq_msg_init (9 samples, 0.38%)</title><rect x="91.1839%" y="501" width="0.3778%" height="15" fill="rgb(235,172,48)" fg:x="2172" fg:w="9"/><text x="91.4339%" y="511.50"></text></g><g><title>core::time::Duration::as_nanos (3 samples, 0.13%)</title><rect x="91.5617%" y="565" width="0.1259%" height="15" fill="rgb(249,201,17)" fg:x="2181" fg:w="3"/><text x="91.8117%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.04%)</title><rect x="91.6877%" y="549" width="0.0420%" height="15" fill="rgb(219,208,6)" fg:x="2184" fg:w="1"/><text x="91.9377%" y="559.50"></text></g><g><title>std::time::SystemTime::duration_since (4 samples, 0.17%)</title><rect x="91.6877%" y="565" width="0.1679%" height="15" fill="rgb(248,31,23)" fg:x="2184" fg:w="4"/><text x="91.9377%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (3 samples, 0.13%)</title><rect x="91.7296%" y="549" width="0.1259%" height="15" fill="rgb(245,15,42)" fg:x="2185" fg:w="3"/><text x="91.9796%" y="559.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (3 samples, 0.13%)</title><rect x="91.7296%" y="533" width="0.1259%" height="15" fill="rgb(222,217,39)" fg:x="2185" fg:w="3"/><text x="91.9796%" y="543.50"></text></g><g><title>core::time::Duration::new (3 samples, 0.13%)</title><rect x="91.7296%" y="517" width="0.1259%" height="15" fill="rgb(210,219,27)" fg:x="2185" fg:w="3"/><text x="91.9796%" y="527.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_add (2 samples, 0.08%)</title><rect x="91.7716%" y="501" width="0.0840%" height="15" fill="rgb(252,166,36)" fg:x="2186" fg:w="2"/><text x="92.0216%" y="511.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (2 samples, 0.08%)</title><rect x="91.7716%" y="485" width="0.0840%" height="15" fill="rgb(245,132,34)" fg:x="2186" fg:w="2"/><text x="92.0216%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.04%)</title><rect x="91.8556%" y="533" width="0.0420%" height="15" fill="rgb(236,54,3)" fg:x="2188" fg:w="1"/><text x="92.1056%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (1 samples, 0.04%)</title><rect x="91.9815%" y="501" width="0.0420%" height="15" fill="rgb(241,173,43)" fg:x="2191" fg:w="1"/><text x="92.2315%" y="511.50"></text></g><g><title>core::cmp::PartialOrd::ge (1 samples, 0.04%)</title><rect x="91.9815%" y="485" width="0.0420%" height="15" fill="rgb(215,190,9)" fg:x="2191" fg:w="1"/><text x="92.2315%" y="495.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.04%)</title><rect x="91.9815%" y="469" width="0.0420%" height="15" fill="rgb(242,101,16)" fg:x="2191" fg:w="1"/><text x="92.2315%" y="479.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (1 samples, 0.04%)</title><rect x="91.9815%" y="453" width="0.0420%" height="15" fill="rgb(223,190,21)" fg:x="2191" fg:w="1"/><text x="92.2315%" y="463.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (1 samples, 0.04%)</title><rect x="91.9815%" y="437" width="0.0420%" height="15" fill="rgb(215,228,25)" fg:x="2191" fg:w="1"/><text x="92.2315%" y="447.50"></text></g><g><title>std::time::SystemTime::duration_since (5 samples, 0.21%)</title><rect x="91.8556%" y="549" width="0.2099%" height="15" fill="rgb(225,36,22)" fg:x="2188" fg:w="5"/><text x="92.1056%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (4 samples, 0.17%)</title><rect x="91.8976%" y="533" width="0.1679%" height="15" fill="rgb(251,106,46)" fg:x="2189" fg:w="4"/><text x="92.1476%" y="543.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (4 samples, 0.17%)</title><rect x="91.8976%" y="517" width="0.1679%" height="15" fill="rgb(208,90,1)" fg:x="2189" fg:w="4"/><text x="92.1476%" y="527.50"></text></g><g><title>core::time::Duration::new (1 samples, 0.04%)</title><rect x="92.0235%" y="501" width="0.0420%" height="15" fill="rgb(243,10,4)" fg:x="2192" fg:w="1"/><text x="92.2735%" y="511.50"></text></g><g><title>std::time::SystemTime::elapsed (17 samples, 0.71%)</title><rect x="91.8556%" y="565" width="0.7137%" height="15" fill="rgb(212,137,27)" fg:x="2188" fg:w="17"/><text x="92.1056%" y="575.50"></text></g><g><title>std::time::SystemTime::now (12 samples, 0.50%)</title><rect x="92.0655%" y="549" width="0.5038%" height="15" fill="rgb(231,220,49)" fg:x="2193" fg:w="12"/><text x="92.3155%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (12 samples, 0.50%)</title><rect x="92.0655%" y="533" width="0.5038%" height="15" fill="rgb(237,96,20)" fg:x="2193" fg:w="12"/><text x="92.3155%" y="543.50"></text></g><g><title>std::sys::unix::time::inner::now (12 samples, 0.50%)</title><rect x="92.0655%" y="517" width="0.5038%" height="15" fill="rgb(239,229,30)" fg:x="2193" fg:w="12"/><text x="92.3155%" y="527.50"></text></g><g><title>__GI___clock_gettime (10 samples, 0.42%)</title><rect x="92.1495%" y="501" width="0.4198%" height="15" fill="rgb(219,65,33)" fg:x="2195" fg:w="10"/><text x="92.3995%" y="511.50"></text></g><g><title>__vdso_clock_gettime (8 samples, 0.34%)</title><rect x="92.2334%" y="485" width="0.3359%" height="15" fill="rgb(243,134,7)" fg:x="2197" fg:w="8"/><text x="92.4834%" y="495.50"></text></g><g><title>[[vdso]] (3 samples, 0.13%)</title><rect x="92.4433%" y="469" width="0.1259%" height="15" fill="rgb(216,177,54)" fg:x="2202" fg:w="3"/><text x="92.6933%" y="479.50"></text></g><g><title>colmet_node::main (1,973 samples, 82.83%)</title><rect x="11.2091%" y="581" width="82.8296%" height="15" fill="rgb(211,160,20)" fg:x="267" fg:w="1973"/><text x="11.4591%" y="591.50">colmet_node::main</text></g><g><title>std::time::SystemTime::now (35 samples, 1.47%)</title><rect x="92.5693%" y="565" width="1.4694%" height="15" fill="rgb(239,85,39)" fg:x="2205" fg:w="35"/><text x="92.8193%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (35 samples, 1.47%)</title><rect x="92.5693%" y="549" width="1.4694%" height="15" fill="rgb(232,125,22)" fg:x="2205" fg:w="35"/><text x="92.8193%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::now (35 samples, 1.47%)</title><rect x="92.5693%" y="533" width="1.4694%" height="15" fill="rgb(244,57,34)" fg:x="2205" fg:w="35"/><text x="92.8193%" y="543.50"></text></g><g><title>__GI___clock_gettime (31 samples, 1.30%)</title><rect x="92.7372%" y="517" width="1.3014%" height="15" fill="rgb(214,203,32)" fg:x="2209" fg:w="31"/><text x="92.9872%" y="527.50"></text></g><g><title>__vdso_clock_gettime (18 samples, 0.76%)</title><rect x="93.2830%" y="501" width="0.7557%" height="15" fill="rgb(207,58,43)" fg:x="2222" fg:w="18"/><text x="93.5330%" y="511.50"></text></g><g><title>[[vdso]] (6 samples, 0.25%)</title><rect x="93.7867%" y="485" width="0.2519%" height="15" fill="rgb(215,193,15)" fg:x="2234" fg:w="6"/><text x="94.0367%" y="495.50"></text></g><g><title>zmq::Error::from_raw (1 samples, 0.04%)</title><rect x="94.0386%" y="581" width="0.0420%" height="15" fill="rgb(232,15,44)" fg:x="2240" fg:w="1"/><text x="94.2886%" y="591.50"></text></g><g><title>zmq_errno (4 samples, 0.17%)</title><rect x="94.0806%" y="581" width="0.1679%" height="15" fill="rgb(212,3,48)" fg:x="2241" fg:w="4"/><text x="94.3306%" y="591.50"></text></g><g><title>[unknown] (2,067 samples, 86.78%)</title><rect x="7.7666%" y="597" width="86.7758%" height="15" fill="rgb(218,128,7)" fg:x="185" fg:w="2067"/><text x="8.0166%" y="607.50">[unknown]</text></g><g><title>zmq_msg_recv (7 samples, 0.29%)</title><rect x="94.2485%" y="581" width="0.2939%" height="15" fill="rgb(226,216,39)" fg:x="2245" fg:w="7"/><text x="94.4985%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.04%)</title><rect x="94.5424%" y="581" width="0.0420%" height="15" fill="rgb(243,47,51)" fg:x="2252" fg:w="1"/><text x="94.7924%" y="591.50"></text></g><g><title>__mmdrop (1 samples, 0.04%)</title><rect x="94.5844%" y="533" width="0.0420%" height="15" fill="rgb(241,183,40)" fg:x="2253" fg:w="1"/><text x="94.8344%" y="543.50"></text></g><g><title>pgd_free (1 samples, 0.04%)</title><rect x="94.5844%" y="517" width="0.0420%" height="15" fill="rgb(231,217,32)" fg:x="2253" fg:w="1"/><text x="94.8344%" y="527.50"></text></g><g><title>__GI___clone (16 samples, 0.67%)</title><rect x="94.5424%" y="597" width="0.6717%" height="15" fill="rgb(229,61,38)" fg:x="2252" fg:w="16"/><text x="94.7924%" y="607.50"></text></g><g><title>ret_from_fork (15 samples, 0.63%)</title><rect x="94.5844%" y="581" width="0.6297%" height="15" fill="rgb(225,210,5)" fg:x="2253" fg:w="15"/><text x="94.8344%" y="591.50"></text></g><g><title>schedule_tail (15 samples, 0.63%)</title><rect x="94.5844%" y="565" width="0.6297%" height="15" fill="rgb(231,79,45)" fg:x="2253" fg:w="15"/><text x="94.8344%" y="575.50"></text></g><g><title>finish_task_switch (15 samples, 0.63%)</title><rect x="94.5844%" y="549" width="0.6297%" height="15" fill="rgb(224,100,7)" fg:x="2253" fg:w="15"/><text x="94.8344%" y="559.50"></text></g><g><title>__perf_event_task_sched_in (14 samples, 0.59%)</title><rect x="94.6264%" y="533" width="0.5877%" height="15" fill="rgb(241,198,18)" fg:x="2254" fg:w="14"/><text x="94.8764%" y="543.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (14 samples, 0.59%)</title><rect x="94.6264%" y="517" width="0.5877%" height="15" fill="rgb(252,97,53)" fg:x="2254" fg:w="14"/><text x="94.8764%" y="527.50"></text></g><g><title>native_write_msr (14 samples, 0.59%)</title><rect x="94.6264%" y="501" width="0.5877%" height="15" fill="rgb(220,88,7)" fg:x="2254" fg:w="14"/><text x="94.8764%" y="511.50"></text></g><g><title>__libc_pause (5 samples, 0.21%)</title><rect x="95.2141%" y="597" width="0.2099%" height="15" fill="rgb(213,176,14)" fg:x="2268" fg:w="5"/><text x="95.4641%" y="607.50"></text></g><g><title>[libzmq.so.5.2.4] (5 samples, 0.21%)</title><rect x="95.2141%" y="581" width="0.2099%" height="15" fill="rgb(246,73,7)" fg:x="2268" fg:w="5"/><text x="95.4641%" y="591.50"></text></g><g><title>__udivti3 (7 samples, 0.29%)</title><rect x="95.4240%" y="597" width="0.2939%" height="15" fill="rgb(245,64,36)" fg:x="2273" fg:w="7"/><text x="95.6740%" y="607.50"></text></g><g><title>compiler_builtins::int::udiv::__udivti3 (6 samples, 0.25%)</title><rect x="95.4660%" y="581" width="0.2519%" height="15" fill="rgb(245,80,10)" fg:x="2274" fg:w="6"/><text x="95.7160%" y="591.50"></text></g><g><title>compiler_builtins::int::specialized_div_rem::u128_div_rem (6 samples, 0.25%)</title><rect x="95.4660%" y="565" width="0.2519%" height="15" fill="rgb(232,107,50)" fg:x="2274" fg:w="6"/><text x="95.7160%" y="575.50"></text></g><g><title>compiler_builtins::int::specialized_div_rem::u128_by_u64_div_rem (5 samples, 0.21%)</title><rect x="95.5080%" y="549" width="0.2099%" height="15" fill="rgb(253,3,0)" fg:x="2275" fg:w="5"/><text x="95.7580%" y="559.50"></text></g><g><title>__libc_start_main (1 samples, 0.04%)</title><rect x="95.7179%" y="581" width="0.0420%" height="15" fill="rgb(212,99,53)" fg:x="2280" fg:w="1"/><text x="95.9679%" y="591.50"></text></g><g><title>__GI_exit (1 samples, 0.04%)</title><rect x="95.7179%" y="565" width="0.0420%" height="15" fill="rgb(249,111,54)" fg:x="2280" fg:w="1"/><text x="95.9679%" y="575.50"></text></g><g><title>__run_exit_handlers (1 samples, 0.04%)</title><rect x="95.7179%" y="549" width="0.0420%" height="15" fill="rgb(249,55,30)" fg:x="2280" fg:w="1"/><text x="95.9679%" y="559.50"></text></g><g><title>_dl_fini (1 samples, 0.04%)</title><rect x="95.7179%" y="533" width="0.0420%" height="15" fill="rgb(237,47,42)" fg:x="2280" fg:w="1"/><text x="95.9679%" y="543.50"></text></g><g><title>_start (2 samples, 0.08%)</title><rect x="95.7179%" y="597" width="0.0840%" height="15" fill="rgb(211,20,18)" fg:x="2280" fg:w="2"/><text x="95.9679%" y="607.50"></text></g><g><title>_dl_start (1 samples, 0.04%)</title><rect x="95.7599%" y="581" width="0.0420%" height="15" fill="rgb(231,203,46)" fg:x="2281" fg:w="1"/><text x="96.0099%" y="591.50"></text></g><g><title>_dl_start_final (1 samples, 0.04%)</title><rect x="95.7599%" y="565" width="0.0420%" height="15" fill="rgb(237,142,3)" fg:x="2281" fg:w="1"/><text x="96.0099%" y="575.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.04%)</title><rect x="95.7599%" y="549" width="0.0420%" height="15" fill="rgb(241,107,1)" fg:x="2281" fg:w="1"/><text x="96.0099%" y="559.50"></text></g><g><title>dl_main (1 samples, 0.04%)</title><rect x="95.7599%" y="533" width="0.0420%" height="15" fill="rgb(229,83,13)" fg:x="2281" fg:w="1"/><text x="96.0099%" y="543.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.04%)</title><rect x="95.7599%" y="517" width="0.0420%" height="15" fill="rgb(241,91,40)" fg:x="2281" fg:w="1"/><text x="96.0099%" y="527.50"></text></g><g><title>elf_dynamic_do_Rela (1 samples, 0.04%)</title><rect x="95.7599%" y="501" width="0.0420%" height="15" fill="rgb(225,3,45)" fg:x="2281" fg:w="1"/><text x="96.0099%" y="511.50"></text></g><g><title>elf_machine_rela_relative (1 samples, 0.04%)</title><rect x="95.7599%" y="485" width="0.0420%" height="15" fill="rgb(244,223,14)" fg:x="2281" fg:w="1"/><text x="96.0099%" y="495.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.04%)</title><rect x="95.7599%" y="469" width="0.0420%" height="15" fill="rgb(224,124,37)" fg:x="2281" fg:w="1"/><text x="96.0099%" y="479.50"></text></g><g><title>exc_page_fault (1 samples, 0.04%)</title><rect x="95.7599%" y="453" width="0.0420%" height="15" fill="rgb(251,171,30)" fg:x="2281" fg:w="1"/><text x="96.0099%" y="463.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.04%)</title><rect x="95.7599%" y="437" width="0.0420%" height="15" fill="rgb(236,46,54)" fg:x="2281" fg:w="1"/><text x="96.0099%" y="447.50"></text></g><g><title>handle_mm_fault (1 samples, 0.04%)</title><rect x="95.7599%" y="421" width="0.0420%" height="15" fill="rgb(245,213,5)" fg:x="2281" fg:w="1"/><text x="96.0099%" y="431.50"></text></g><g><title>__do_fault (1 samples, 0.04%)</title><rect x="95.7599%" y="405" width="0.0420%" height="15" fill="rgb(230,144,27)" fg:x="2281" fg:w="1"/><text x="96.0099%" y="415.50"></text></g><g><title>filemap_fault (1 samples, 0.04%)</title><rect x="95.7599%" y="389" width="0.0420%" height="15" fill="rgb(220,86,6)" fg:x="2281" fg:w="1"/><text x="96.0099%" y="399.50"></text></g><g><title>page_cache_ra_unbounded (1 samples, 0.04%)</title><rect x="95.7599%" y="373" width="0.0420%" height="15" fill="rgb(240,20,13)" fg:x="2281" fg:w="1"/><text x="96.0099%" y="383.50"></text></g><g><title>read_pages (1 samples, 0.04%)</title><rect x="95.7599%" y="357" width="0.0420%" height="15" fill="rgb(217,89,34)" fg:x="2281" fg:w="1"/><text x="96.0099%" y="367.50"></text></g><g><title>nfs_readpages (1 samples, 0.04%)</title><rect x="95.7599%" y="341" width="0.0420%" height="15" fill="rgb(229,13,5)" fg:x="2281" fg:w="1"/><text x="96.0099%" y="351.50"></text></g><g><title>read_cache_pages (1 samples, 0.04%)</title><rect x="95.7599%" y="325" width="0.0420%" height="15" fill="rgb(244,67,35)" fg:x="2281" fg:w="1"/><text x="96.0099%" y="335.50"></text></g><g><title>readpage_async_filler (1 samples, 0.04%)</title><rect x="95.7599%" y="309" width="0.0420%" height="15" fill="rgb(221,40,2)" fg:x="2281" fg:w="1"/><text x="96.0099%" y="319.50"></text></g><g><title>nfs_create_request (1 samples, 0.04%)</title><rect x="95.7599%" y="293" width="0.0420%" height="15" fill="rgb(237,157,21)" fg:x="2281" fg:w="1"/><text x="96.0099%" y="303.50"></text></g><g><title>entry_SYSCALL_64 (3 samples, 0.13%)</title><rect x="95.8018%" y="597" width="0.1259%" height="15" fill="rgb(222,94,11)" fg:x="2282" fg:w="3"/><text x="96.0518%" y="607.50"></text></g><g><title>_raw_spin_unlock_irqrestore (1 samples, 0.04%)</title><rect x="96.1377%" y="501" width="0.0420%" height="15" fill="rgb(249,113,6)" fg:x="2290" fg:w="1"/><text x="96.3877%" y="511.50"></text></g><g><title>_raw_spin_lock_irqsave (2 samples, 0.08%)</title><rect x="96.2217%" y="485" width="0.0840%" height="15" fill="rgb(238,137,36)" fg:x="2292" fg:w="2"/><text x="96.4717%" y="495.50"></text></g><g><title>clockevents_program_event (1 samples, 0.04%)</title><rect x="96.3056%" y="485" width="0.0420%" height="15" fill="rgb(210,102,26)" fg:x="2294" fg:w="1"/><text x="96.5556%" y="495.50"></text></g><g><title>lapic_next_deadline (1 samples, 0.04%)</title><rect x="96.3056%" y="469" width="0.0420%" height="15" fill="rgb(218,30,30)" fg:x="2294" fg:w="1"/><text x="96.5556%" y="479.50"></text></g><g><title>enqueue_hrtimer (1 samples, 0.04%)</title><rect x="96.3476%" y="485" width="0.0420%" height="15" fill="rgb(214,67,26)" fg:x="2295" fg:w="1"/><text x="96.5976%" y="495.50"></text></g><g><title>get_nohz_timer_target (1 samples, 0.04%)</title><rect x="96.3896%" y="485" width="0.0420%" height="15" fill="rgb(251,9,53)" fg:x="2296" fg:w="1"/><text x="96.6396%" y="495.50"></text></g><g><title>hrtimer_start_range_ns (7 samples, 0.29%)</title><rect x="96.1797%" y="501" width="0.2939%" height="15" fill="rgb(228,204,25)" fg:x="2291" fg:w="7"/><text x="96.4297%" y="511.50"></text></g><g><title>tick_program_event (1 samples, 0.04%)</title><rect x="96.4316%" y="485" width="0.0420%" height="15" fill="rgb(207,153,8)" fg:x="2297" fg:w="1"/><text x="96.6816%" y="495.50"></text></g><g><title>__perf_event_task_sched_out (2 samples, 0.08%)</title><rect x="96.6835%" y="469" width="0.0840%" height="15" fill="rgb(242,9,16)" fg:x="2303" fg:w="2"/><text x="96.9335%" y="479.50"></text></g><g><title>_raw_spin_lock (2 samples, 0.08%)</title><rect x="96.6835%" y="453" width="0.0840%" height="15" fill="rgb(217,211,10)" fg:x="2303" fg:w="2"/><text x="96.9335%" y="463.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.04%)</title><rect x="96.7674%" y="469" width="0.0420%" height="15" fill="rgb(219,228,52)" fg:x="2305" fg:w="1"/><text x="97.0174%" y="479.50"></text></g><g><title>update_curr (3 samples, 0.13%)</title><rect x="96.8094%" y="437" width="0.1259%" height="15" fill="rgb(231,92,29)" fg:x="2306" fg:w="3"/><text x="97.0594%" y="447.50"></text></g><g><title>cpuacct_charge (2 samples, 0.08%)</title><rect x="96.8514%" y="421" width="0.0840%" height="15" fill="rgb(232,8,23)" fg:x="2307" fg:w="2"/><text x="97.1014%" y="431.50"></text></g><g><title>__update_load_avg_cfs_rq (1 samples, 0.04%)</title><rect x="97.0193%" y="421" width="0.0420%" height="15" fill="rgb(216,211,34)" fg:x="2311" fg:w="1"/><text x="97.2693%" y="431.50"></text></g><g><title>dequeue_task_fair (7 samples, 0.29%)</title><rect x="96.8094%" y="469" width="0.2939%" height="15" fill="rgb(236,151,0)" fg:x="2306" fg:w="7"/><text x="97.0594%" y="479.50"></text></g><g><title>dequeue_entity (7 samples, 0.29%)</title><rect x="96.8094%" y="453" width="0.2939%" height="15" fill="rgb(209,168,3)" fg:x="2306" fg:w="7"/><text x="97.0594%" y="463.50"></text></g><g><title>update_load_avg (4 samples, 0.17%)</title><rect x="96.9353%" y="437" width="0.1679%" height="15" fill="rgb(208,129,28)" fg:x="2309" fg:w="4"/><text x="97.1853%" y="447.50"></text></g><g><title>__update_load_avg_se (1 samples, 0.04%)</title><rect x="97.0613%" y="421" width="0.0420%" height="15" fill="rgb(229,78,22)" fg:x="2312" fg:w="1"/><text x="97.3113%" y="431.50"></text></g><g><title>finish_task_switch (1 samples, 0.04%)</title><rect x="97.1033%" y="469" width="0.0420%" height="15" fill="rgb(228,187,13)" fg:x="2313" fg:w="1"/><text x="97.3533%" y="479.50"></text></g><g><title>__perf_event_task_sched_in (1 samples, 0.04%)</title><rect x="97.1033%" y="453" width="0.0420%" height="15" fill="rgb(240,119,24)" fg:x="2313" fg:w="1"/><text x="97.3533%" y="463.50"></text></g><g><title>_raw_spin_unlock_irqrestore (1 samples, 0.04%)</title><rect x="97.1872%" y="421" width="0.0420%" height="15" fill="rgb(209,194,42)" fg:x="2315" fg:w="1"/><text x="97.4372%" y="431.50"></text></g><g><title>cpumask_next (1 samples, 0.04%)</title><rect x="97.2292%" y="421" width="0.0420%" height="15" fill="rgb(247,200,46)" fg:x="2316" fg:w="1"/><text x="97.4792%" y="431.50"></text></g><g><title>_find_next_bit.constprop.0 (1 samples, 0.04%)</title><rect x="97.2292%" y="405" width="0.0420%" height="15" fill="rgb(218,76,16)" fg:x="2316" fg:w="1"/><text x="97.4792%" y="415.50"></text></g><g><title>idle_cpu (2 samples, 0.08%)</title><rect x="97.2712%" y="421" width="0.0840%" height="15" fill="rgb(225,21,48)" fg:x="2317" fg:w="2"/><text x="97.5212%" y="431.50"></text></g><g><title>update_blocked_averages (1 samples, 0.04%)</title><rect x="97.3552%" y="421" width="0.0420%" height="15" fill="rgb(239,223,50)" fg:x="2319" fg:w="1"/><text x="97.6052%" y="431.50"></text></g><g><title>__update_load_avg_cfs_rq (1 samples, 0.04%)</title><rect x="97.3552%" y="405" width="0.0420%" height="15" fill="rgb(244,45,21)" fg:x="2319" fg:w="1"/><text x="97.6052%" y="415.50"></text></g><g><title>pick_next_task_fair (10 samples, 0.42%)</title><rect x="97.1453%" y="469" width="0.4198%" height="15" fill="rgb(232,33,43)" fg:x="2314" fg:w="10"/><text x="97.3953%" y="479.50"></text></g><g><title>newidle_balance (10 samples, 0.42%)</title><rect x="97.1453%" y="453" width="0.4198%" height="15" fill="rgb(209,8,3)" fg:x="2314" fg:w="10"/><text x="97.3953%" y="463.50"></text></g><g><title>_nohz_idle_balance (9 samples, 0.38%)</title><rect x="97.1872%" y="437" width="0.3778%" height="15" fill="rgb(214,25,53)" fg:x="2315" fg:w="9"/><text x="97.4372%" y="447.50"></text></g><g><title>update_rq_clock (4 samples, 0.17%)</title><rect x="97.3971%" y="421" width="0.1679%" height="15" fill="rgb(254,186,54)" fg:x="2320" fg:w="4"/><text x="97.6471%" y="431.50"></text></g><g><title>sched_clock_cpu (2 samples, 0.08%)</title><rect x="97.4811%" y="405" width="0.0840%" height="15" fill="rgb(208,174,49)" fg:x="2322" fg:w="2"/><text x="97.7311%" y="415.50"></text></g><g><title>sched_clock (1 samples, 0.04%)</title><rect x="97.5231%" y="389" width="0.0420%" height="15" fill="rgb(233,191,51)" fg:x="2323" fg:w="1"/><text x="97.7731%" y="399.50"></text></g><g><title>native_sched_clock (1 samples, 0.04%)</title><rect x="97.5231%" y="373" width="0.0420%" height="15" fill="rgb(222,134,10)" fg:x="2323" fg:w="1"/><text x="97.7731%" y="383.50"></text></g><g><title>pick_next_task_idle (4 samples, 0.17%)</title><rect x="97.5651%" y="469" width="0.1679%" height="15" fill="rgb(230,226,20)" fg:x="2324" fg:w="4"/><text x="97.8151%" y="479.50"></text></g><g><title>__update_idle_core (4 samples, 0.17%)</title><rect x="97.5651%" y="453" width="0.1679%" height="15" fill="rgb(251,111,25)" fg:x="2324" fg:w="4"/><text x="97.8151%" y="463.50"></text></g><g><title>psi_task_change (2 samples, 0.08%)</title><rect x="97.7330%" y="469" width="0.0840%" height="15" fill="rgb(224,40,46)" fg:x="2328" fg:w="2"/><text x="97.9830%" y="479.50"></text></g><g><title>psi_group_change (1 samples, 0.04%)</title><rect x="97.7750%" y="453" width="0.0420%" height="15" fill="rgb(236,108,47)" fg:x="2329" fg:w="1"/><text x="98.0250%" y="463.50"></text></g><g><title>__x64_sys_clock_nanosleep (45 samples, 1.89%)</title><rect x="95.9698%" y="565" width="1.8892%" height="15" fill="rgb(234,93,0)" fg:x="2286" fg:w="45"/><text x="96.2198%" y="575.50">_..</text></g><g><title>common_nsleep (43 samples, 1.81%)</title><rect x="96.0537%" y="549" width="1.8052%" height="15" fill="rgb(224,213,32)" fg:x="2288" fg:w="43"/><text x="96.3037%" y="559.50">c..</text></g><g><title>hrtimer_nanosleep (43 samples, 1.81%)</title><rect x="96.0537%" y="533" width="1.8052%" height="15" fill="rgb(251,11,48)" fg:x="2288" fg:w="43"/><text x="96.3037%" y="543.50">h..</text></g><g><title>do_nanosleep (42 samples, 1.76%)</title><rect x="96.0957%" y="517" width="1.7632%" height="15" fill="rgb(236,173,5)" fg:x="2289" fg:w="42"/><text x="96.3457%" y="527.50"></text></g><g><title>schedule (33 samples, 1.39%)</title><rect x="96.4736%" y="501" width="1.3854%" height="15" fill="rgb(230,95,12)" fg:x="2298" fg:w="33"/><text x="96.7236%" y="511.50"></text></g><g><title>__schedule (29 samples, 1.22%)</title><rect x="96.6415%" y="485" width="1.2175%" height="15" fill="rgb(232,209,1)" fg:x="2302" fg:w="29"/><text x="96.8915%" y="495.50"></text></g><g><title>put_prev_task_fair (1 samples, 0.04%)</title><rect x="97.8170%" y="469" width="0.0420%" height="15" fill="rgb(232,6,1)" fg:x="2330" fg:w="1"/><text x="98.0670%" y="479.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.04%)</title><rect x="97.8589%" y="565" width="0.0420%" height="15" fill="rgb(210,224,50)" fg:x="2331" fg:w="1"/><text x="98.1089%" y="575.50"></text></g><g><title>do_execveat_common (1 samples, 0.04%)</title><rect x="97.8589%" y="549" width="0.0420%" height="15" fill="rgb(228,127,35)" fg:x="2331" fg:w="1"/><text x="98.1089%" y="559.50"></text></g><g><title>bprm_execve (1 samples, 0.04%)</title><rect x="97.8589%" y="533" width="0.0420%" height="15" fill="rgb(245,102,45)" fg:x="2331" fg:w="1"/><text x="98.1089%" y="543.50"></text></g><g><title>load_elf_binary (1 samples, 0.04%)</title><rect x="97.8589%" y="517" width="0.0420%" height="15" fill="rgb(214,1,49)" fg:x="2331" fg:w="1"/><text x="98.1089%" y="527.50"></text></g><g><title>__clear_user (1 samples, 0.04%)</title><rect x="97.8589%" y="501" width="0.0420%" height="15" fill="rgb(226,163,40)" fg:x="2331" fg:w="1"/><text x="98.1089%" y="511.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.04%)</title><rect x="97.8589%" y="485" width="0.0420%" height="15" fill="rgb(239,212,28)" fg:x="2331" fg:w="1"/><text x="98.1089%" y="495.50"></text></g><g><title>exc_page_fault (1 samples, 0.04%)</title><rect x="97.8589%" y="469" width="0.0420%" height="15" fill="rgb(220,20,13)" fg:x="2331" fg:w="1"/><text x="98.1089%" y="479.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.04%)</title><rect x="97.8589%" y="453" width="0.0420%" height="15" fill="rgb(210,164,35)" fg:x="2331" fg:w="1"/><text x="98.1089%" y="463.50"></text></g><g><title>handle_mm_fault (1 samples, 0.04%)</title><rect x="97.8589%" y="437" width="0.0420%" height="15" fill="rgb(248,109,41)" fg:x="2331" fg:w="1"/><text x="98.1089%" y="447.50"></text></g><g><title>__do_fault (1 samples, 0.04%)</title><rect x="97.8589%" y="421" width="0.0420%" height="15" fill="rgb(238,23,50)" fg:x="2331" fg:w="1"/><text x="98.1089%" y="431.50"></text></g><g><title>filemap_fault (1 samples, 0.04%)</title><rect x="97.8589%" y="405" width="0.0420%" height="15" fill="rgb(211,48,49)" fg:x="2331" fg:w="1"/><text x="98.1089%" y="415.50"></text></g><g><title>page_cache_ra_unbounded (1 samples, 0.04%)</title><rect x="97.8589%" y="389" width="0.0420%" height="15" fill="rgb(223,36,21)" fg:x="2331" fg:w="1"/><text x="98.1089%" y="399.50"></text></g><g><title>read_pages (1 samples, 0.04%)</title><rect x="97.8589%" y="373" width="0.0420%" height="15" fill="rgb(207,123,46)" fg:x="2331" fg:w="1"/><text x="98.1089%" y="383.50"></text></g><g><title>nfs_readpages (1 samples, 0.04%)</title><rect x="97.8589%" y="357" width="0.0420%" height="15" fill="rgb(240,218,32)" fg:x="2331" fg:w="1"/><text x="98.1089%" y="367.50"></text></g><g><title>nfs_pageio_complete (1 samples, 0.04%)</title><rect x="97.8589%" y="341" width="0.0420%" height="15" fill="rgb(252,5,43)" fg:x="2331" fg:w="1"/><text x="98.1089%" y="351.50"></text></g><g><title>nfs_pageio_doio (1 samples, 0.04%)</title><rect x="97.8589%" y="325" width="0.0420%" height="15" fill="rgb(252,84,19)" fg:x="2331" fg:w="1"/><text x="98.1089%" y="335.50"></text></g><g><title>nfs_generic_pg_pgios (1 samples, 0.04%)</title><rect x="97.8589%" y="309" width="0.0420%" height="15" fill="rgb(243,152,39)" fg:x="2331" fg:w="1"/><text x="98.1089%" y="319.50"></text></g><g><title>nfs_generic_pgio (1 samples, 0.04%)</title><rect x="97.8589%" y="293" width="0.0420%" height="15" fill="rgb(234,160,15)" fg:x="2331" fg:w="1"/><text x="98.1089%" y="303.50"></text></g><g><title>mm_update_next_owner (1 samples, 0.04%)</title><rect x="97.9009%" y="517" width="0.0420%" height="15" fill="rgb(237,34,20)" fg:x="2332" fg:w="1"/><text x="98.1509%" y="527.50"></text></g><g><title>__x64_sys_exit_group (3 samples, 0.13%)</title><rect x="97.9009%" y="565" width="0.1259%" height="15" fill="rgb(229,97,13)" fg:x="2332" fg:w="3"/><text x="98.1509%" y="575.50"></text></g><g><title>do_group_exit (3 samples, 0.13%)</title><rect x="97.9009%" y="549" width="0.1259%" height="15" fill="rgb(234,71,50)" fg:x="2332" fg:w="3"/><text x="98.1509%" y="559.50"></text></g><g><title>do_exit (3 samples, 0.13%)</title><rect x="97.9009%" y="533" width="0.1259%" height="15" fill="rgb(253,155,4)" fg:x="2332" fg:w="3"/><text x="98.1509%" y="543.50"></text></g><g><title>mmput (2 samples, 0.08%)</title><rect x="97.9429%" y="517" width="0.0840%" height="15" fill="rgb(222,185,37)" fg:x="2333" fg:w="2"/><text x="98.1929%" y="527.50"></text></g><g><title>exit_mmap (2 samples, 0.08%)</title><rect x="97.9429%" y="501" width="0.0840%" height="15" fill="rgb(251,177,13)" fg:x="2333" fg:w="2"/><text x="98.1929%" y="511.50"></text></g><g><title>unmap_vmas (2 samples, 0.08%)</title><rect x="97.9429%" y="485" width="0.0840%" height="15" fill="rgb(250,179,40)" fg:x="2333" fg:w="2"/><text x="98.1929%" y="495.50"></text></g><g><title>unmap_page_range (2 samples, 0.08%)</title><rect x="97.9429%" y="469" width="0.0840%" height="15" fill="rgb(242,44,2)" fg:x="2333" fg:w="2"/><text x="98.1929%" y="479.50"></text></g><g><title>page_remove_rmap (1 samples, 0.04%)</title><rect x="97.9849%" y="453" width="0.0420%" height="15" fill="rgb(216,177,13)" fg:x="2334" fg:w="1"/><text x="98.2349%" y="463.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.04%)</title><rect x="97.9849%" y="437" width="0.0420%" height="15" fill="rgb(216,106,43)" fg:x="2334" fg:w="1"/><text x="98.2349%" y="447.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.04%)</title><rect x="97.9849%" y="421" width="0.0420%" height="15" fill="rgb(216,183,2)" fg:x="2334" fg:w="1"/><text x="98.2349%" y="431.50"></text></g><g><title>__fget_light (2 samples, 0.08%)</title><rect x="98.1528%" y="533" width="0.0840%" height="15" fill="rgb(249,75,3)" fg:x="2338" fg:w="2"/><text x="98.4028%" y="543.50"></text></g><g><title>__fget_files (2 samples, 0.08%)</title><rect x="98.1528%" y="517" width="0.0840%" height="15" fill="rgb(219,67,39)" fg:x="2338" fg:w="2"/><text x="98.4028%" y="527.50"></text></g><g><title>_copy_from_user (3 samples, 0.13%)</title><rect x="98.2368%" y="533" width="0.1259%" height="15" fill="rgb(253,228,2)" fg:x="2340" fg:w="3"/><text x="98.4868%" y="543.50"></text></g><g><title>copy_user_generic_unrolled (1 samples, 0.04%)</title><rect x="98.3207%" y="517" width="0.0420%" height="15" fill="rgb(235,138,27)" fg:x="2342" fg:w="1"/><text x="98.5707%" y="527.50"></text></g><g><title>__x64_sys_poll (9 samples, 0.38%)</title><rect x="98.0269%" y="565" width="0.3778%" height="15" fill="rgb(236,97,51)" fg:x="2335" fg:w="9"/><text x="98.2769%" y="575.50"></text></g><g><title>do_sys_poll (8 samples, 0.34%)</title><rect x="98.0688%" y="549" width="0.3359%" height="15" fill="rgb(240,80,30)" fg:x="2336" fg:w="8"/><text x="98.3188%" y="559.50"></text></g><g><title>eventfd_poll (1 samples, 0.04%)</title><rect x="98.3627%" y="533" width="0.0420%" height="15" fill="rgb(230,178,19)" fg:x="2343" fg:w="1"/><text x="98.6127%" y="543.50"></text></g><g><title>do_syscall_64 (59 samples, 2.48%)</title><rect x="95.9698%" y="581" width="2.4769%" height="15" fill="rgb(210,190,27)" fg:x="2286" fg:w="59"/><text x="96.2198%" y="591.50">do..</text></g><g><title>__x86_retpoline_rax (1 samples, 0.04%)</title><rect x="98.4047%" y="565" width="0.0420%" height="15" fill="rgb(222,107,31)" fg:x="2344" fg:w="1"/><text x="98.6547%" y="575.50"></text></g><g><title>fpregs_assert_state_consistent (1 samples, 0.04%)</title><rect x="98.8245%" y="549" width="0.0420%" height="15" fill="rgb(216,127,34)" fg:x="2354" fg:w="1"/><text x="99.0745%" y="559.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (72 samples, 3.02%)</title><rect x="95.9278%" y="597" width="3.0227%" height="15" fill="rgb(234,116,52)" fg:x="2285" fg:w="72"/><text x="96.1778%" y="607.50">ent..</text></g><g><title>syscall_exit_to_user_mode (12 samples, 0.50%)</title><rect x="98.4467%" y="581" width="0.5038%" height="15" fill="rgb(222,124,15)" fg:x="2345" fg:w="12"/><text x="98.6967%" y="591.50"></text></g><g><title>exit_to_user_mode_prepare (3 samples, 0.13%)</title><rect x="98.8245%" y="565" width="0.1259%" height="15" fill="rgb(231,179,28)" fg:x="2354" fg:w="3"/><text x="99.0745%" y="575.50"></text></g><g><title>switch_fpu_return (2 samples, 0.08%)</title><rect x="98.8665%" y="549" width="0.0840%" height="15" fill="rgb(226,93,45)" fg:x="2355" fg:w="2"/><text x="99.1165%" y="559.50"></text></g><g><title>entry_SYSCALL_64_safe_stack (15 samples, 0.63%)</title><rect x="98.9505%" y="597" width="0.6297%" height="15" fill="rgb(215,8,51)" fg:x="2357" fg:w="15"/><text x="99.2005%" y="607.50"></text></g><g><title>ret_from_fork (1 samples, 0.04%)</title><rect x="99.5802%" y="597" width="0.0420%" height="15" fill="rgb(223,106,5)" fg:x="2372" fg:w="1"/><text x="99.8302%" y="607.50"></text></g><g><title>schedule_tail (1 samples, 0.04%)</title><rect x="99.5802%" y="581" width="0.0420%" height="15" fill="rgb(250,191,5)" fg:x="2372" fg:w="1"/><text x="99.8302%" y="591.50"></text></g><g><title>finish_task_switch (1 samples, 0.04%)</title><rect x="99.5802%" y="565" width="0.0420%" height="15" fill="rgb(242,132,44)" fg:x="2372" fg:w="1"/><text x="99.8302%" y="575.50"></text></g><g><title>__perf_event_task_sched_in (1 samples, 0.04%)</title><rect x="99.5802%" y="549" width="0.0420%" height="15" fill="rgb(251,152,29)" fg:x="2372" fg:w="1"/><text x="99.8302%" y="559.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (1 samples, 0.04%)</title><rect x="99.5802%" y="533" width="0.0420%" height="15" fill="rgb(218,179,5)" fg:x="2372" fg:w="1"/><text x="99.8302%" y="543.50"></text></g><g><title>native_write_msr (1 samples, 0.04%)</title><rect x="99.5802%" y="517" width="0.0420%" height="15" fill="rgb(227,67,19)" fg:x="2372" fg:w="1"/><text x="99.8302%" y="527.50"></text></g><g><title>colmet-node (2,304 samples, 96.73%)</title><rect x="3.0227%" y="613" width="96.7254%" height="15" fill="rgb(233,119,31)" fg:x="72" fg:w="2304"/><text x="3.2727%" y="623.50">colmet-node</text></g><g><title>syscall_return_via_sysret (3 samples, 0.13%)</title><rect x="99.6222%" y="597" width="0.1259%" height="15" fill="rgb(241,120,22)" fg:x="2373" fg:w="3"/><text x="99.8722%" y="607.50"></text></g><g><title>all (2,382 samples, 100%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(224,102,30)" fg:x="0" fg:w="2382"/><text x="0.2500%" y="639.50"></text></g><g><title>perf_5.10 (6 samples, 0.25%)</title><rect x="99.7481%" y="613" width="0.2519%" height="15" fill="rgb(210,164,37)" fg:x="2376" fg:w="6"/><text x="99.9981%" y="623.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.25%)</title><rect x="99.7481%" y="597" width="0.2519%" height="15" fill="rgb(226,191,16)" fg:x="2376" fg:w="6"/><text x="99.9981%" y="607.50"></text></g><g><title>do_syscall_64 (6 samples, 0.25%)</title><rect x="99.7481%" y="581" width="0.2519%" height="15" fill="rgb(214,40,45)" fg:x="2376" fg:w="6"/><text x="99.9981%" y="591.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.25%)</title><rect x="99.7481%" y="565" width="0.2519%" height="15" fill="rgb(244,29,26)" fg:x="2376" fg:w="6"/><text x="99.9981%" y="575.50"></text></g><g><title>do_execveat_common (6 samples, 0.25%)</title><rect x="99.7481%" y="549" width="0.2519%" height="15" fill="rgb(216,16,5)" fg:x="2376" fg:w="6"/><text x="99.9981%" y="559.50"></text></g><g><title>bprm_execve (6 samples, 0.25%)</title><rect x="99.7481%" y="533" width="0.2519%" height="15" fill="rgb(249,76,35)" fg:x="2376" fg:w="6"/><text x="99.9981%" y="543.50"></text></g><g><title>load_elf_binary (6 samples, 0.25%)</title><rect x="99.7481%" y="517" width="0.2519%" height="15" fill="rgb(207,11,44)" fg:x="2376" fg:w="6"/><text x="99.9981%" y="527.50"></text></g><g><title>begin_new_exec (6 samples, 0.25%)</title><rect x="99.7481%" y="501" width="0.2519%" height="15" fill="rgb(228,190,49)" fg:x="2376" fg:w="6"/><text x="99.9981%" y="511.50"></text></g><g><title>perf_event_exec (6 samples, 0.25%)</title><rect x="99.7481%" y="485" width="0.2519%" height="15" fill="rgb(214,173,12)" fg:x="2376" fg:w="6"/><text x="99.9981%" y="495.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.21%)</title><rect x="99.7901%" y="469" width="0.2099%" height="15" fill="rgb(218,26,35)" fg:x="2377" fg:w="5"/><text x="100.0401%" y="479.50"></text></g><g><title>native_write_msr (5 samples, 0.21%)</title><rect x="99.7901%" y="453" width="0.2099%" height="15" fill="rgb(220,200,19)" fg:x="2377" fg:w="5"/><text x="100.0401%" y="463.50"></text></g></svg></svg>